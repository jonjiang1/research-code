"Backward compatibility is important to many. See what happened to the Itanium which was a clean start on a new architecture.\n"
"This has nothing to do with CESU-8. It's just that UTF-8 is not allowed to encode any UTF-16 surrogate codepoint ever. The reference decoder is a bit more complex than the naive approach because it identifies those code points as early as possible to replace them with substitution characters.\n\nedit: I found the relevant part of the Unicode standard. Look at table 3-7 in [chapter 3](http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf)."
"* [Final form of my real name's game of life result](http://i.imgur.com/mh8b99x.png)\n* [Final form of my handle's game of life result](http://i.imgur.com/wK3QsTs.png)\n\nIt was interesting how long it took to get to the final stable form. My real name took ~20 minutes. Whereas my handle (dharh) took only 5 minutes to reach near stability except for a loan glider that took, I think, 2-3 minutes to walk across the screen to reignite a bit of fiery activity until the final ultimate death nearing the 10 minute mark."
"Just wanted to confirm that the code for generating the data structures is nearly instantaneous and that the isEqual call is severely bottlenecked."
"Not when it's his only post, and it was several years ago."
"Thanks for the confirmation. I did make sure to run the code before I posted. (Extremely important to do this. If I hadn't, the post would have incorrectly used `equals:` instead of `isEqual:`)."
"I was trying to make them well known ;) \n\nI tried to argue that `map` should be presented *before* queue/workers. My reasoning is that understanding how a single `map` call works is a lot easier than reasoning about the state of a queue and a worker pool. \n\nOnce they understand map, I think it's an easy enough leap to explain how the work of one function can be divided across multiple processors. They don't need to know how to manage a pool or understand how to use a sentinel to shut them down. The picture of a couple of CPUs grabbing elements from the map tends to be a good enough heuristic to get the idea of what's going on under the hood. If that doesn't do it, opening a process monitor and running some benchmarks usually does. \n\nWhen they need more control, *then* I think it makes sense to introduce Queues and workers. I think the Queue comes with a lot of caveats that we more experienced people take for granted. An infinitely blocking queue was the bane of my existence when I started with Python. \n\nSo, there's my view! \n"
"[deleted]"
"ReST = Representational State Transfer. If you're 'performing operations' without getting or updating data, you're not transferring state, thus you don't have a ReST API."
"[deleted]"
"I thought this site was just a picture until I saw discussion on this page. Note if your page has a header image that takes up the entire screen* then I'm going to assume your page is void of content. At least put the first line of the article visible.\n\nI see this pattern more and more on the internet. It is a usability nightmare.\n\n*my resolution is 1920x1080 so it isn't as if I'm completely in the monitor dark age"
"What are some of the things that sqlalchemy do better than most ORMS?"
"That's not how the real world works. If you do something with databases, you'll need something like SQL. If you write a 3D game, there will be shaders. If you use Sass, you'll probably need some Ruby (e.g. if you want to use a particular cache busting scheme). If you have some kind of web frontend, there will be of course also some JavaScript.\n\nThere is usually some sort of \"stack\". There are several different pieces of technology involved and you have to make them all play nicely together. Typically, you'll need more than one language for that."
"Yeah it uses a lot of UFCS. It would be parallel(map!get(urls)) otherwise. I understand your unfamiliarity with it, but it isn't difficult to read once you are used to the idea. It is used everywhere in D code."
"[deleted]"
"[deleted]"
"Official Notice\n\nPost Immediately\n\n         X     x\n          X   x\n           X x\n            X\n           x X \n          x   X\n         x     X\n\n\nDangerous Virus!\n\nFirst, a little history. The X window system escaped from Project Athena at MIT where it was being held in isolation. When notified, MIT stated piblicly that \"MIT assumes no resonsibility...\". This is a very disturbing statement. It then infiltrated Digital Equipment Corporation, where it has since corrupted the technical judgement of this organization.\n\nAfter sabotaging Digital Equipment Corporation, a sinister X consortium was created to find a way to use X as part of a plan to dominate and control interactive window systems. X windows is sometimes distributed by this secret consortium free of charge to unsuspecting victims. The destructive cost of X cannot even be guessed.\n\nX is truly obese - whether it's mutilating your hard disk or actively infesting your system, you can be sure it's up to no good. Innocent users need to be protected from this dangerous virus. Even as you read this, the X source distribution and the executable environment is being maintained on hundreds of computers, maybe even your own.\n\nDigital Equipment Corporation is already shipping machines that carry this dreaded infestation. It must be destroyed.\n\nThis is what happens when software with good intentions goes bad. It victimizes innocent users by distorting their perception of what is and what is not good software. This malignant window system must be destroyed.\n\nUltimately DEC and MIT must be held accountable for this heinous *software crime*, brought to justice, and made to pay for a *software cleanup*. Until DEC and MIT answer to these charges, they both should be assumed to be protecting dangerous software criminals.\n\nDon't be fooled! Just say no to X.\n\nX-Windows: ...A mistake carried out to perfection. X-Windows: ...Dissatisfaction guaranteed. X-Windows: ...Don't get frustrated without it. X-Windows: ...Even your dog won't like it. X-Windows: ...Flaky and built to stay that way. X-Windows: ...Complex nonsolutions to simple nonproblems. X-Windows: ...Flawed beyond belief. X-Windows: ...Form follows malfunction. X-Windows: ...Garbage at your fingertips. X-Windows: ...Ignorance is our most important resource. X-Windows: ...It could be worse, but it'll take time. X-Windows: ...It could happen to you. X-Windows: ...Japan's secret weapon. X-Windows: ...Let it get in *your* way. X-Windows: ...Live the nightmare. X-Windows: ...More than enough rope. X-Windows: ...Never had it, never will. X-Windows: ...No hardware is safe. X-Windows: ...Power tools for power fools. X-Windows: ...Putting new limits on productivity. X-Windows: ...Simplicity made complex. X-Windows: ...The cutting edge of obsolescence. X-Windows: ...The art of incompetence. X-Windows: ...The defacto substandard. X-Windows: ...The first fully modular software disaster. X-Windows: ...The joke that kills. X-Windows: ...The problem for your problem. X-Windows: ...There's got to be a better way. X-Windows: ...Warn your friends about it. X-Windows: ...You'd better sit down. X-Windows: ...You'll envy the dead."
"I leave this authentic screen capture:\nhttp://www.art.net/~hopkins/Don/unix-haters/x-windows/XCalc.gif"
"Serious question: what is the alternative? I haven't done much with C++11."
"Sort of -- you have to explicitly add `:shared` all over the place to get sharing, but it's there.  Not that Perl's threading is worth using..."
"I've been meaning to dip into Go. That might be my Language To Learn next year. Any initial thoughts on it? "
"Gotcha. I suppose that goes back a bit to what the author said of 'REST' having lost its meaning.\n\nIn practice I suppose you could have a 'job queue', where you're manipulating the queue via the API and the backend service performs whatever operations are described by a given job."
"proggit: come for the code, stay for the strippers."
"If you consider \"abandonment because of regime changes\" to be failure then yes. I know lots of people working for the government in IT who all say that projects are planned with the contingency that they will be decommissioned in 4 years when someone else in power with different ideals takes control. There's very little long term planning that goes in to most projects, and the ones that do stick around tend to be unmaintainable after 2-3 election cycles."
"Exactly, you could run foo.Select(f =&gt; Rand.NextInt()) (I don't remember exact random syntax, forgive me if I'm wrong) and it would return lazily evaluated collection of foo.Count random integers.\n"
"Nope, it was created to disallow this kind of thing. It preserves the freedom of users to swap out the library for another with the same ABI.\n\nIt even requires this for large functions in headers! A C++ LGPL library will likely have templates, and you'll always end up needing to distribute linkable object files or source code.\n\n&gt; If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.) "
"I assume the comment was simply that \"std::cout\" could just be referenced as \"cout\" given that \"using namespace std\" was already specified."
"You mean C# linq operators aren't well-known?\n\nI hope every C# programmer worth his or her salt knows what this means..."
"It made me laugh, though."
"Can we do a practical example? Honestly, I only know Linux from a purely server-application perspective and I've got plenty of respect for Unix culture with regards to that. However, I could not imagine trying to use Linux for quickly and easily putting GUI apps in front of people's faces in a corporate/enterprise environment because I've never tried it, heard of it or seen it done.\n\nI worked in IT in a fast paced environment that had a fledgling call center (~15-20 people). The call center was tasked with working a list of business contacts and collecting a graph of info on each, for a marketing campaign. Each user was supposed to search online to ensure updated information before calling an entry in the list.\n\nHere is what I was able to accomplish in a day, with Windows, SQL Server and .NET. The **only thing** I want to know is how this could be done better and faster (*in one day*) with existing Linux tools for Linux desktop users? What tools would you use? Could you do it faster than a day? (I don't want to hear about web apps, I could have done an ASP.NET web app just as easily, but I wanted to scrape the embedded web browser that i used to do online searches automatically.) **I know Linux can do all of these things, but I am doubtful that it could be done this quickly.** In any case, I disagree that programming in Windows is harder than Unix and I offer you this case study as an example of why I disagree.\n\n- Create a db in SQL Server. Load the initial list into a primary entity table. Add columns and related tables for info we want to collect. Add columns and tables to track user edits (CRUD history) and queue control (pessimistic locking).\n\n- Create a C# desktop gui that uses single sign-on (Windows authentication) to connect to the db so that SQL procedures automatically know the user info and for security. No login required. (Winforms, databinding, LINQ)\n\n- Make the gui pull and lock each record (with a SQL stored procedure) upon the user clicking Next. Automatically show Google and/or Bing search results for business name/address in a browser embedded in the window. Allow the user to pull info from web browser into database entry fields with one click.\n\n- Let the gui add/update/delete a master/child data graph. (Primary entity form elements and controls up top, set of tabs on the bottom each containing a grid for child data. Save. Cancel. Next. Add New.)\n\n- Use a tool (ClickOnce) to automate the deployment and updating of said gui application, to a network share that only the call center folks and IT can get to. Each time the program starts, it checks for updates and automatically applies them (*I check a box in Visual Studio to get that behavior*).\n\n- Throw a policy script on the Windows Domain server to trigger installation of the gui program for users in a given group. (My system admin guy did this, I don't know what they're using for that.)\n\n- Basically, automate an office full of people to work through a large list of calls (I forget - maybe 3,000 or so) as quickly and efficiently as possible."
"Stupid question, but when you say modules, do you mean ruby-style mixins? If so, isn't that replicable by using a parent class as C++ supports multiple inheritance?"
"&gt; So my first question is why are you using a web browser to test an API?\n\nBecause practically speaking most REST APIs are for web applications and testing in the browser provides many useful tools such as inspecting the requests, their headers, latency, etc. "
"It's very much how the world works. On reflection I would say that what I wrote applies more to hiring senior-level people. Of course most people know the full stack to some extent. Everyone knows a little js and a little about half a dozen middleware languages and a few databases. But when you get hired for a senior position, what they really want to see is deep and extensive knowledge of one area. As a backend developer I know plenty of SQL, but the database developers who spend all day long writing PL/SQL are the ones I go to when I get stuck. And they probably know a little Java or a little PHP or whatever, but they know a LOT about Oracle or whatever db is in use in that company. The more experience you have, the more you end up getting specialized. \n\n"
"\\^C does seem to get delivered, eventually, when using `multiprocessing.dummy` instead."
"But that goes for *all* kinds of government projects, not just software. There's really nothing special about government software projects, except that the risks of government projects and the inherent planning impossibilities of software projects align."
"They're actually pretty much the same; Java just doesn't have a clean pattern for adapting List&lt;File&gt; to List&lt;Runnable&gt;. Otherwise, they're pretty much the same. And actually, Guava does. Most Python idioms translate pretty cleanly to Java if you're using Guava."
"Holy buzzwords..."
"Exactly.  Would be interesting to see the data because private sector projects fail an an extremely high rate.  It's basically an industry standard."
"A lot of \"software engineers\" haven't ever been to CS undergrad to even know what a Turing machine is. I'm going to start interviewing people soon and I'm really afraid of what's out there..."
"People need to stop bashing on languages. Different people like different languages, and different languages are better for some tasks than others.\n\nSometimes you just need to get something done, but you're in the middle of a project and you're not gonna switch languages so you can use a feature. This is what OP's link is about; maybe some dude is on a cluster doing scientific stuff using numpy and needs parallelism without messing in CPython and whatnot.\n\nEDIT: I meant Cython, sorry."
"Found via brian d foy's via [Twitter feed](https://twitter.com/briandfoy_perl)"
"I think that's just the medium blogging site. Giant pictures that fade as you scroll are web 4.0 or something. "
"Cobol, JCL, natural, java, c#.\n\nYou know, the usual.\n\nProbably going to get java certifications this year and maybe check out rust."
"With Perl, you can almost get to that one-liner level of conciseness:\n\n    perl -Mthreads -l -e '@squares = map { $_-&gt;join() } map { async { sleep 1; $_ * $_; } } (1 .. 10); print for @squares;'\n\nSpread out so it's not a one-liner:\n\n    #! /usr/bin/perl\n\n    use threads;\n\n    my @squares =\n        map { $_-&gt;join() }\n        map { async { sleep 1; $_ * $_; } }\n        (1 .. 10);\n    print \"$_\\n\" for @squares;\n\nThat maps a list of inputs to a list of threads running a function on those inputs, then it maps those threads to a list of their results.\n\nPretty fun, but it all sort of breaks down if you don't want to have a thread for every single item in the list."
"https://bitbucket.org/birkenfeld/sphinx/pull-requests\n\nCreate a pull request adding onto the documentation in the official place."
"Lowest Bidder?"
"&gt; pwait\n\nOr you can just call wait - that's what it's for.\n\n    for url in \"http://www.google.com\" \"http://www.reddit.com\"; do\n     wget \"$url\" &amp;\n    done\n    wait\n\nThis will complete once all background jobs are done.  More fancily:\n\n    FETCHES=()\n    for url in \"http://www.google.com\" \"http://www.reddit.com\"; do\n     wget \"$url\" &amp;\n     FETCHES[${#FETCHES[@]}]=$!\n    done\n    wait \"${FETCHES[@]}\"\n\nWill finish once this particular set of fetches is complete ($! is the PID of the last background job).  Another useful keyword is disown which is equivalent to a thread detach; it detaches the child from the parent &amp; thus even when the parent dies the child lives on.\n\nAll that being said, just because you can do something in bash, it's usually easier to maintain or even express that same logic in a different language (e.g. python)."
"Personally I don't see the lack of soft shadows as a problem, stylistically I've often wanted really hard edged shadows and I'm glad this provides another (efficient) way of achieving that."
"I work in games, and I have a lot of friends in film and games. Many of us use Autodesk Maya. We're on Maya 2012, with the current version being 2014, which means we're actually quite current. Big companies take a long time to upgrade. It's non-trivial to swap out the baked-in Maya 2.6.5 of Maya 2012, so I'm not going anywhere. I'm certainly not heading up any initiative to fight 3.x into the mess that is Maya, and then roll it out to the team, and upgrade all our scripts, tools, importers, exporters, and pipeline mechanisms in the middle of the constant deadlines, especially because then I'd own it, and I'd be on call to constantly be re-upgrading anyone who borked their install and needed it all built up again from standard Maya 2012, or to assist in 3.x issues that I don't know anything about. I'm too busy, and that all sounds way too fragile, and an awful lot like a firable offense. I wouldn't be surprised if we're still in 2.x 5 years from now.\n\nAutodesk has a [large catalog](http://www.autodesk.com/products) of film, effects, product design, physical simulation, architectural, and general 2D and 3D design products, probably many of which include Python, as the professional products scattered through [this list](http://en.wikipedia.org/wiki/Python_%28programming_language%29#Use) do, most of which are probably also stuck in 2.x land. This is a not-insignificant group of users."
"The point of `pwait` is to limit the number of background processes that you spawn, without that limit all hell will break lose and you'll end up DDOS'ing yourself sooner or later."
"yep. If c# was like java in which it runs pretty much everywhere, it would be even more awesome. "
"you can do some crazy one liners with LINQ and friends. "
"Western intellectuals and countercultural thinkers have had a fascination with Zen since the 1960s (and probably much earlier)."
"looks like functional programming being rediscovered 1 line at a time"
"do COBOL programmers use twitter?"
"We could use your skills on /r/28thworldproblems. "
"and doesn't afraid of anything"
"I thought there was legislation that specifically prevented the lowest bidder from winning (due to QC issues)"
"Yes there is. \n\nOne way is doing a simple chrome/firefox extension, or using the browser console to input javascript and change the page on the fly."
"[Gimme the gold!](http://www.youtube.com/watch?v=nda_OSWeyn8)"
"He means an actual module/package system (like `require`, `import`, etc in some languages) instead of using headers."
"I am pretty sure we totally agree on this."
"You should stick with functional python, it really is pretty good. With `sorted`, lazy sequences everywhere and the new destructuring in Python3, stuff is pretty good.\n\n    &gt;&gt;&gt; a, *b = range(4)\n    &gt;&gt;&gt; a\n    0   \n    &gt;&gt;&gt; b\n    [1, 2, 3]\n    &gt;&gt;&gt; *a, b = range(4)\n    &gt;&gt;&gt; a\n    [0, 1, 2]\n    &gt;&gt;&gt; b\n    3   \n\nSome sort of awesome mashup between F#, Python and Clojure on the PyPy runtime would make my year."
"Xamarin has a great Mono port to Android and iOS. Of course it has commercial pricing (but if I'm not completely mistaken they have a free version now).\n\nAnd Mono on Linux runs perfectly. It lags a bit behind in .NET compatibility, but .NET 2.0 and 3.5 are pretty much fully supported."
"Looks like your D-Link DIR-615 router: http://www.exploit-db.com/exploits/24477/"
"650x speedup for native code across all cores? 10000x speedup for OpenCL."
"[http://www.revolutionwifi.net/2011/03/explaining-dhcp-server-1111.html](http://www.revolutionwifi.net/2011/03/explaining-dhcp-server-1111.html)"
"It's because they're run by politicians instead of engineers. And by the way, that's often the same reason that commercial IT projects fail. (A lot of them do). It's because they're run by the office politicians. "
"I'm impressed that CPAN still seems to be growing."
"Most lua threading implementations tend towards an Erlang model, ala https://github.com/LuaLanes/lanes and https://github.com/cloudwu/hive"
"I too am a programmer, but I took a different route. I made some short Java code to make a random number, a 0 or a 1. I made it run until it had 100 numbers. I will go enter them, and be back shortly with the results.\n  \nIf anyone is wondering, from my code, I got:\n\n0\n0\n1\n1\n0\n0\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n0\n0\n0\n1\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n0\n1\n1\n0\n1\n0\n0\n1\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n1\n1\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n1\n1\n1\n0\n1\n1\n0\n\nRemarkable! I got 50.00% vs computer's 50.00%. Exactly 1/2."
"The metaphor started to break down at the end, but I was amused by the analogy between Linus Torvalds and Martin Luther."
"I meant what program/package is being used to send the requests and receive responses."
"Isn't \"HE\" a \"SHE\"?"
"For whatever reason, I've seen a decline in people learning/using Perl. I have been goading people into learning more Haskell though, so that's been going well. :)"
"You know, I still don't get why Python has such a bad reputation for having a global interpreter lock. In similar languages (Ruby/Lua/Javascript/Perl/etc), almost every implementation has the same exact restriction: only one thread per interpreter. Doesn't make sense to share an interpreter across threads."
"depends on what mono is using, like keepass runs on mono, but i think it runs using winforms so it looks ugly as sin and is very unstable. "
"[deleted]"
"Meanwhile, here's little ol' me.\nLaughing because I break most of the \"rules\" and still get my work done.\nThe only \"rules\" here I even kind of follow are 1 and 8.\nThe rest are either copies of these rules reworded or are just mindless tripe.\nI mean, lets nest 8 ifs with the same conditions?\nI think I'll leave unnecessary redundancy to sysadmins.\nThen again, no amount of redundancy is unnecessary when you're a sysadmin.\nEspecially if you're on a windows server.\nMay Richard Stallman have mercy on your soul in that case."
"Excluding DSLs...\n\n* Ruby\n* Lisp\n* JavaScript\n* CoffeeScript\n* Python\n* Java\n* Objective C\n* C\n\nWith a little bit of toe dipping into:\n\n* Scala\n* Go"
"[deleted]"
"Anal as fuck "
"As someone who has done software for government entities, entities with government oversight, and private entities, i can tell you:\n\n&gt; The more our customer is required to be answerable to tax-payers, the worse it gets.\n\nA government [entity is open to public scrutiny](http://en.wikipedia.org/wiki/Ontario_Lottery_and_Gaming_Corporation#Controversies), the entity is very nervous about doing anything that could be irrationally-twisted by irrational-public as *wrong*. As a result, they have layers, and layers, and *layers* of red tape. Nobody is willing to decide anything, nobody is able to answer anything, nobody is willing to make any decision, nobody can do anything - for fear they'll look bad.\n\nA private company doesn't have to answer to the public. They can decide whatever they want, whenever they want. As a result they have much quicker turn-around. They can get things done faster. They can decide things faster. And they can get udpates faster. \n\nThe more government oversight you add, you add more:\n\n- meetings\n- paperwork\n- conference calls\n- waiting for resources to accomplish a task\n- forms\n- waiting for people to decide things\n\nAs a result the development time and cost for government clients is **much** higher. \n\n**For a private client**: i could have a fix within an hour:\n\n- connect to their network and deploy the fix\n\n**For a government client**: i could have a fix for them in 3 months\n\n- get approval for a change\n- document the change\n- have a conference call about the change\n- create an RFC for auditors\n- ISO needs to review the proposed changes\n- Security needs a threat model\n- get a PO\n- make the change\n- build the change on the customer-dedicated build machine\n- test the build\n- create release notes\n- put the build and release notes on web-site\n- send link to release to project manager\n- project manager contacts internal Systems and Database administrators to download the release\n- project manager schedules time to update test system\n- Database applies database changes\n- Desktop deploys test software to test environment\n- IT contacts project manager that test has been updated\n- project manager contacts internal group to test the new version\n- group signs off on new version\n- project manager schedules downtime to deploy new version to live\n- outside auditor needs to be on-site during the update\n- Desktop and Database groups perform same change on live\n- inform project manager that software is updated\n\nAnd god help us if there's a firewall somewhere. Getting an exception added takes a week. The ISO team needs to sign off. The Security Team has to do a threat assessment. Paperwork needs to be created for when KPMG comes in to do the audit.\n\nAnd then the public complains that the government is big, slow, and wastes money. Yet, if the public agency did what the private company did, people would **also** be bitching. Government agencies can't win.\n\nIt's the fucking taxpayers. \n\nThe public thinks they have a right to complain about something - and the government act as though the public's complains are valid."
"Do you have a comparison of your method (with the conversion)  versus the plain old method? It would be helpful, although what you've said makes sense as ping tends to be quite high on mobile networks (thus each request has an overhead). "
"It's pretty common to have extensive knowledge in more than one area.  I'd argue it's hard to grow or stay current if you're too specialized in your bubble for prolonged periods of time. "
"I really hate that site. It's useful whenever I need to find a quick answer to a trivial problem, but unless I want to get yelled at or have a question closed or ignored, there's no reason to post. It seems like a giant circle jerk to post the same stupid questions as often as possible and recieve the same stupid answers. \n\nI think part of the problem is that some employers use the site as a way to evaluate candidates. This leads to people just wanting to get as many points as possible,  whether they be up votes for a stupid question or up votes for a stupid answer.\n\nSome subreddits also suffer from that authoritarian problem he talked about,  which is interesting. I think it's because people seem to think that the community knows best. Groups need competent, opinionated and consistent leadership. Letting anyone from the community \"lead\" is dumb. The super strict guidelines that the stack overflow community is trying to enforce is unnecessary and annoying.\n\nIdk. So far Reddit seems like the only site where thoughtful discussions are appreciated. Too bad it is mostly filled with jokes and sarcasm"
"Scala being in lockstep with SQL is also strange."
"This matches up with what I seem to be seeing - finally, after far too long a life, the dot-com-boom, FormMail.PL style of Perl is very definitely on its way out, hence the drop in the overall market for Perl code (though the most egregious examples usually miscapitalise it as PERL). Of course, most of this software was merely terrible and would probably have been a huge improvement rewritten in sane Perl, but the point is that during the popularity glut a lot of crap was written (see also PHP, rails, and now node.js for other projects that have suffered similarly).\n\nOn the other hand, the Perl *community*, as in the people who actively care about using the language and seek out new knowledge about it in order to better their craft - and who thereby are likely to come into contact with others with the same mindset - seems to be, albeit slowly, getting larger and more active as time goes on.\n\nOr: PERL is dying. Perl is growing.\n\nI'm ok with that."
"It depends whether HTTP requests for images are the symptom or the issue. \n\nIn some sites there's simply lots of images that could be done without, in this case your bandaiding the issue by using this. \n\nOn other sites those extra images are needed, and this is a good way to speed it up.\n\nYour analogy could perhaps be better expressed:\n\n\"Let's just use the faster hardware.\"\n\nWhere the faster hardware is already present (thus the \"the\"), so it would be unoptimal to rely on the slow hardware if there's hardware that'll do it faster. "
"Which really is important to know. Also important: Count() enumerates a collection. Logical, of course, but I still had to learn that the hard way."
"I guess it will be atleast 2.5 years before \"M#\" v1.0 will be launched, more like 4 years."
"They don't all fail; PRISM is working swimmingly. It's all about priorities."
"It would be kind of nice if some of Core could make it into the standard libs. Is there any discussion with the INRIA OCaml folks about making that happen in future releases? I'm thinking of how the boost libraries have been making it into the C++ standard libs - they start out in boost and then some eventually are accepted into the stdlib (more of that will be happening with C++14 as I understand)"
"&gt; That one is a flawed premise too. In particular it is not trivial to do timezone conversion for any date in the past or future trivially due to DST changes over the years, leap seconds,...\n\nYou should look into the olson tz database, because in fact you're quite wrong. It automatically handles all this for you. I mean, obviously it doesn't know about future time zone changes (country X passes a law in 2018 that moves them an hour forward) but it deals with historical time zones and other things."
"[deleted]"
"Time zone hell.... Boy if I had a nickel for every time.  It feeds off people who think they understand it."
"I was using `wget -i` just today to download several large files from a text file containing URLs.... I was wondering if it had an option to parallelize them..."
"This especially gets heated when it involves UI. Yuck"
"I didn't say anything about native Unicode support.\n\nYou end up in this debate because you misuse terminology like \"ASCII\" to mean \"strings of nonstandardized bytes\"."
"He doesn't mention this, but if you need to run through 100 million items or something, you probably don't want to use this because you'll get a memory-busting list. Luckily, multiprocessing also has imap, which does the same thing with iterators. "
"Is it perhaps that in the end, they're still JavaScript?"
"As someone who has worked a government job and done quite a bit of development, it's a number of reasons. \n\nLow pay is one. Many of the government institutions still treat coders like worker bees and upper management like queens. Places with \"person as pay\" give you a pay grade and will pay you that much regardless of whether you are a secretary or a subject matter expert of national importance. Furthermore, if you want to be promoted past a certain grade, you are REQUIRED to take on a management job. This means that talent will constantly be flowing away from technical work into management to be promoted. When I first started I mistakenly thought \"wow if I do fantastic work they'll promote me a few grades up into a competitive pay scale!\" but no, you work up one step of the ladder at a time. Usually one grade every 1-3 years. And one grade promotion is around $4k I think. So basically, there's no motivation to blow anyone away.\n\nTurnover is another. There were a lot of interns and rotational employees where I worked, as well as a lot of contractors. Each one basically got done eating shit where they were, and moved on with another poor soul waiting to get their shit serving with no knowledge usually passed down. In addition, due to the pay problems, there's high turnover in young employees. And in these jobs, young employees are *usually* the ones directly handling the work. All the older ones worked up into management because they knew it was the only way to make money.\n\nManagement turnover. My previous statements weren't trying to say that management is less important than low level stuff. In fact, high management turnover leads to lots of changes in the mission, as new leaders try to make their splash. And in a culture where breadth is valued FAR more than depth, you can be sure that your upper management will rotate in and out in 2-5 year spans, sometimes shorter.\n\nLack of motivation. There's obviously a need to make it hard to fire public employees (see: history of civil servants). However, it means that, especially with older retirement systems that require employees to serve their full time to get any retirement, people simply \"retire in place\" and you get the stereotypical government employee that gives zero fucks. It's often impossible to fire for incompetence, so they're just moved the some crappy management position where they (best case) do jack shit and act as dead weight or (worst case) mismanage the shit out of everything because they don't care.\n\nFinally, there are morale issues that prevent people from feeling motivated and encourage turnover. When our Congress treats its public employees as bargaining chips, what do you expect? You get good people leaving to make double elsewhere and new talent that needs training to even tread water.\n\nThe current trend to address this seems to be to pour money into contractors, but the people who award contracts don't seem to have a single fucking clue how to do their goddamn job because \\*insert previous parts of post here\\* and end up giving it to some jackasses who blow it."
"&gt; So my first question is why are you using a web browser to test an API?\n\nIf it's not supposed to be used by a web browser, why is it using HTTP at all?"
"NO WAY me too!"
"Ruby, C++, C#, bit of JS."
"Core is basically incompatible with the standard lib so I don't see how the compiler team would be able to include it.\n\nThe best bet would be to have core as the default standard library for the upcoming OCaml platform. At least that's my best guess."
"The question was if government software projects failed more often than private software projects.\n\nWhether or not software government projects fail more often than general government projects in general is not the OP's question."
"Politics."
"... and then you get a call from SPACE, and they tell you that time *itself* goes faster up there than it does down here, due to General Relativity, that they end up gaining a second every 100 years or so ..."
"Oddly enough, this post got me to contribute to SO for the first time in a few months."
"That's ALL my (.net) code"
"Are you asking what program the image is a capture of? If so, it's [Burp Suite from Portswigger](http://portswigger.net)."
"'looks good works well'  \nWell. It is unreadable on mobile."
"[deleted]"
"Does anyone remember [Singularity](http://en.wikipedia.org/wiki/Singularity_%28operating_system%29) OS and [Sing#](http://en.wikipedia.org/wiki/Sing_Sharp)?"
"who cares.\n\nA new Language bugged by the NSA and open source to microsoft and close source to the public."
"You can also use parallel xargs\n\n    echo http://www.google.com http://www.reddit.com | xargs -n1 -P4 wget\n\n`-n1` says to execute wget once per item in the input list, `-P4` says to use up to 4 processes at a time."
"I think I'm going to stick to Clojure. I'm relatively new to it, but I'm really digging the syntax (after getting used to it) and STM just makes so much *sense*. The day job is in Ruby these days, and even *that* has started to feel better to me than Python (heresy!) because of the common application of blocks, which actually makes it feel more functional than Python."
"Vaguely."
"Why does it fail?\n\nBecause the IT world is full of fake cocky people that run their mouths about how good they are but can never get shit done because they just don't know how to fucken program. These people use buzz word and brag about how pretty and simple code looks rather then the functionality. That's why Software fails and that's why the IT world is full of shit.\nDon't tell me I'm wrong, I know that more than half of these people can't even program something so trivial, if you ask them to."
"I do not! That's a good idea though, I will include one in the next commit"
"There's also GNU parallel.\n \n    parallel --gnu wget {} ::: www.google.com www.reddit.com\n\nThe arguments in the list (after :::) are substituted in the {} position and executed in parallel, with automatic load balancing and not mangling stdout (althought output may appear out of order - use  the -k flag to avoid this).\n\nThe --gnu flag is to prevent using Tollef's tool with the same name. In Ubuntu, GNU's come in package parallel, and Tollef's come in package moreutils. They've got completely different syntaxes and may fail silently if you're not aware which one you're using; this bit me and I never missed this flag again."
"Scala:\n\n    var l = List(\"Smith\",\"Jones\",\"Rodin\").par.map(_.toUpperCase)\n\nI think it's quite a bit cleaner than C# (which seems to have a bunch of extra [], (), {}, =&gt; operators in the parent comment's example - hopefully they're optional)."
"There are some things that are not easily expressed in C/C++. Multiplying two 64-bit numbers to get a 128-bit number for instance, and adding with carry. Plus, if you have known precision numbers you can do full unwinding and get, for instance, a 512-bit by 512-bit multiply with no branches. This can double performance over assembly language with loops, and will probably be four times faster than C/C++.\n\nhttp://randomascii.wordpress.com/2012/03/28/fractal-and-crypto-performance/"
"One area doesn't necessarily equal one language.\n\nI am extremely specialized. I still *need* to know several languages, which are used in my particular area."
"The CPU-bound part is image processing done in C, so it's not held up by the GIL.\n\nThe GIL only affects code that holds it, which is to say code that calls into the Python runtime (such as Python code).  External C code like the PIL (Python Imaging Library) functions called in his example, don't have to hold the GIL once they have done their memory allocation, so building the thumbnails (i.e. the actual graphics processing) can be done with the GIL released.\n\nThat means that any of the threads that are CPU bound on that part of the task will not block any others: there can be one CPU executing the Python parts of the code, and arbitrarily many other CPUs doing the CPU-intensive parts of the thumbnail generation.\n\nThe GIL mainly affects the parallelism of Python code, not C code called from Python.  (Or at least, C code that releases the GIL during CPU-intensive operations.)"
"That's true, but not relevant here: the code runs faster *without* multiple processes, because the thumbnail generation code (in PIL) releases the GIL, allowing Python code to keep running in parallel with it, even in the same process."
"There are two more filters which introduce even more bias. Not only is restricted to people on Twitter, it's also restricted to people who happen to know about this (i.e. they visit particular websites or subreddits) and who would participate in this kind of thing.\n\nThe result looks pretty much as one would expect. Most people of this selected group do web-related stuff, which generally involves some JavaScript."
"Learn functional programming once, and be amazed how many people retrace the old Lisp/ML path again and again."
"Accurately define \"fail\" first. Did healthcare.gov fail? Did NASA shuttle code \"fail\"? Is something that took 10x too long to build at 10x cost but eventually worked \"fail\"? Fail is such an easy word to throw around."
"I guess the holidays are just a slow time for programming news, but there's no reason to care about this language at all yet. It looks like they're still at the spitballing stage, which leaves it maybe a year from beta and five years from production. Plus nothing I've read yet has made me think, \"Wow, these guys really get it.\"\n\nOn top of that, Microsoft is the worst company to launch a new language, since they're allergic to good licenses. (I could be wrong about that though.)"
"I think Perl has an aging problem. It's a decent language with some uses, but I suspect that the majority of its users are older; there's very few reasons why a younger engineer (like myself) would need to learn Perl, and very few reasons to attract us. All the shiny new toys are in languages like Ruby, Python, and our Functional Friends (Haskell, Clojure, etc.)"
"Yep. Apparently these are descendants from those."
"I think it depends a great deal on the contractor and the management from that particular government agency.  I say this because your question has some falsehood to it - there are a large number of government computer systems that work just fine.\n\nBut lets take a few high-profile successes...\nNASA's space shuttle computer systems are super-redundant and highly reliable.  The number of errors in this code base is very tiny.\n\nYou'd think that the WhiteHouse.gov website might be a hacker's fantasy target (no matter who the president is), but it's been highly stable for years now.\n\nAnd when Congress isn't trying to take a gigantic shit all over it, the US Postal Service's computer systems do a great job at helping users of all experience levels across the US get their mail delivered correctly.\n"
"The NSA doesn't have to bug a language.\nThey already have unrestricted access to our communication thanks to regulation on ciphers.\n\nNot to mention, it would never replace C.\n\nThrow in all of the safety features you want.\nThey're not useful for kernel development with them causing unnecessary bloat.\nSo really, not only do your statements not match up with anything that makes sense.\nThey're also pointless.\n\nEven if it were bugged by the NSA, the only people it would affect are people the NSA are already capable of bugging.\nNamely, those completely dependent on microsoft products."
"Entertaining distinction, but pointless. Turing completeness is a very low bar, and while it's interesting when your type system accidentally ends up crossing it, it's not really the be all of \"is this a programming language?\""
"Ooh, if you lean towards dynamic typing, consider Clojure and [Core.Async](http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html). It implements Go's CSP channels as a library level feature in Clojure/Clojurescript. "
"They've thrown a lot of support behind mono."
"I'm glad I don't have to deal with you as a hiring manager. Because you'd basically be asking me to tie my career to 1 language, something I will never do."
"Yeah... I know flash isn't popular with the cool kids but Actionscript didn't even make the list. Excuse me? Flash games are still blowing up facebook... more people coded in Ada than Actionscript? Uh ... no."
"-1, because I dont believe this adds quality to this subreddit. Its a silly fictious story tangential to programmers and software (over)engineering. I expect to read some truer (but not necessarily programming-related) and/or more relevant (but not necessarily reality-related) material here."
"In the same breakfast-related software design,  [Software to slice bread](http://www.johndcook.com/blog/2012/03/18/sliced-bread/)."
"They probably mean in python"
"He mentions it during the talk, but it boils down to \"Maybe he didn't find it, but yes, people are working to exploit it.\""
"Repost, original poster (OP) submit a post, up vote or down vote a post and report a post all come to mind driving from posting on a bulletin board. I'd imagine that might be the etymology behind the get and post of the http protocol as well"
"Not to judge a book by its cover, but if this is an extension of the .net framework(as it says in the article with it being an extension of C#) the \"balance\" is likely non-existent.\nAnd the idea of \"the lowest level language you'll ever need\".\nSeems way too bold a claim for anyone to be capable of backing up at this moment.\n\nNevermind kernel development, where those safety systems they're making are /pointless bloat/.(Though there's probably something about micro vs monolithic that I don't understand at this point to which, by all means, have that conversation :P. I'll have fun reading it)\n\nUnless this has the power of C++(or reallllllly close), it wouldn't replace C++ for a lot of development applications within microsoft itself."
"[deleted]"
"[deleted]"
"Simple.  The esiest solution is a web application.  Then it will work on workers tablets and phones as well as their desktops."
"If you don't do it now, you won't find many people brave enough to try navigating what I saw in those screen shots and give you constructive feedback. The presentation problems are bigger than font issues. The narrative in the text that tries to describe what is happening is not illuminated by the images."
"And they are counting Sass, which certainly isn't something I'd call a programming language."
"&gt; The question was if government software projects failed more often than private software projects.\n\nNope. The question was why, not if. The assumption was already made by op."
"&gt; How many companies or departments do you know of that hold project retrospectives to figure out what went right or wrong?\n\nRetrospectives are a valuable aspect of project planning and post-release wrap up"
"The original poster asks \"Is there any evidence that government software projects fail at a higher rate than private sector projects?\".\nThis means he is asking whether or not government software projects failed more often than private (software) projects."
"8 queens is a pretty fun exercise. I was able to get PHP to run 25 queens but it ran into too many unsolvable solutions in a reasonable amount of time.\n\nHopefully [this code](https://github.com/ajbogh/php/blob/master/recursion/nqueens.php) is still up to date.\n\nThe trick isn't to place 8 queens, it's to figure out the fastest algorithm. Different languages will provide different baseline speeds but as you evolve the algorithm to be more efficient you can add more queens to the board to see how many you can get before it becomes unsolvable, either by running out of time or running out of memory.\n\nThe time limit I set was N queens in 30 seconds. What is the maximum number N you can place?"
"As someone who works on government software contracts, the problem is communication. The gov representative never knows what requirements they want, so you end up writing your own requirements based on assumptions.  \n\nUsually there are multiple companies working on a large government contract. The gov representative is supposed to handle communication between the different groups, but fails miserably by not responding in a timely manner and blocking direct communication with the other companies.  This causes project overruns and redoing major sections of code when assumptions are wrong."
"It's not an extension of .NET, and no CLR - there was a pretty big thread on this a couple of days ago. Joe Duffy's blog has the best information, the comments there are worth reading.\n\nEDIT: Actually, I take it back. I assume no .NET and no CLR based on comments that they've removed all reflection and JITting. However, I don't actually see any implementation details and no explicit statements that this would be running on \"bare metal\". So - I dunno.\n\n[Reddit thread](http://www.reddit.com/r/programming/comments/1tvic1/the_microsoft_response_to_d_and_rust_m/)\n\n[Joe Duffy's blog](http://joeduffyblog.com/2013/12/27/csharp-for-systems-programming/)"
"    &lt; urls.txt xargs -n 50 -P 4 wget -q\n\nxargs will start up to four processes in parallel, synchronize them, and ensure that at most fifty URLs are passed at a time so that wget can reuse connections (HTTP keep-alives) if any of the URLs point to the same server."
"I disagree on your point about \"drinking contests\", which I haven't seen. And also, I think the puns are pretty fun.\n\nAlso, you're listing only bad points. Some good ones:\n\n  * fun and inclusive community\n  * has learned from multiple mistakes and dead-ends\n  * strong dev team\n  * very public development practices\n\nI'll leave out my predictions and armchair dev advice. Good luck to the Perl 6 team.\n"
"[deleted]"
"That's not how programming languages work. "
"I'm not seeing much of a shift. FWICT, old perlers are sticking with Perl 5, and old pythoneers are sticking with Python 2. (Ruby I haven't followed for years.)\n\nRather than a shift, I'm seeing a *vacuum* in scripting languages. That is, users don't want to shift to {Perl 6|Python 3} but rather, are looking toward other options, like Go, Dart, Scala, etc. These languages (and some others) are eating {Perl 6|Python 3}'s lunch.\n\nIMO, the answer is: give people a useful, simple, consistent, sensible, C-like (yes, curlies and semicolons), comprehensible, community-focused scripting language, and you'll fill the vacuum."
"Because you still get benefits of caching, all the HTTP infrastructure, etc."
"The same way things like SteamOS, the \"Google Phone\" and WolframAlpha got mountains of press before any product was even previewed."
"&gt; Even if it were bugged by the NSA, the only people it would affect are people the NSA are already capable of bugging. Namely, those completely dependent on microsoft products.\n\nLmao"
"Aw,  (in the words of someone else in this thread) I wanted to wave my dlang dick around.\n\nOh well, yours is almost exactly what I would've used anyways. =P"
"I just up-voted you as you are right that Yin and Yang are not mentioned in the book. Also in the Chinese philosophical history the religious Daoism (Taoism) and Buddhism were bitter rivals and that was a major reason China has not had a dominant religion. \n\nEdit:\n\nThere is actually at least one occurrence of Yin and Yang and it seems to have a different meaning. It says \"All things avoid Yin and embrace Yang\". Here Yin and Yang seem to be taking their literal meanings of the Moon and the Sun.\n"
"Also I love ufcs and alias.  Some of the things it enables is beautiful.\n\n    Thread.sleep(500.msecs);\n\nWhen the actual syntax would be:\n\n    Thread.sleep(dur!(\"msecs\")(500));\n\nAnd they are equivalent."
"yeah, that is missing"
"No different in large companies, IMHO."
"Nope. Similar process for us and I do all private sector. We also have to document our own time spent down to the quarter hour so the client can review reports about what we do."
"Agreed: The X-Windows network protocol and graphics model totally sucks. (See [The X-Windows Disaster](http://www.donhopkins.com/mediawiki/index.php/The_X-Windows_Disaster)!)\n\nTo incrementally update the overall map in SimCity Classic (Micropolis), which usually just changed a small number of pixels each frame, I would scan for changed pixels, and only call XPutImage if more than a certain number of them changed. \n\nThe X protocol lets you draw a batch of points of the same color, but it is expensive to switch colors between each point, so it was better to sort the changed pixels by color, and then draw batches of pixels of the same color with XSetForeground / XDrawPoints. (The tile set only used 16 colors so there were never many batches.) \n\nLooks like that code deteriorated and I disabled it in the migration from 8 bits to full color (networks got a lot faster since I wrote the code in 1992, and the game was usually to run locally on the OLPC using shared memory for XPutImage anyway), but here it is: \n\nhttps://code.google.com/p/micropolis/source/browse/trunk/micropolis-activity/src/sim/w_map.c#466"
"[deleted]"
"Sadly I've found many of the things that make ubuntu (can't comment on mint since I haven't used it recently) user friendly are also buggy. For instance plymouthd (provides graphical splash screen) crashes on me constantly.\n\nMaddeningly enough, the \"submit bug report\" application also freqeuntly crashes. I can't comment on the user friendliness of debian so much, but I do my less technical girlfriend uses debian+xfce with no problems.\n\nI believe synaptics is available. xfce provides graphical interfaces to pretty much everything a non-technical user would want to modify. Then if they become technical users later, they can customize even more. This is where gnome and xfce differ IMO, but being able to easily modify xfce might no longer be true either.\n\nI personally use a terminal/xmonad/firefox/emacs for everything, so I'm not a typical user and my viewpoint of \"user friendly\" is pretty skewed even though I try to empathize."
"And then there is this guy.."
"I am no apologist for Microsoft but \"allergic to good licenses\" is just totally unfair. Microsoft has released a crapload of software under the Apache 2.0 license.\n\nI have benefited from that greatly. You have probably benefited, at least a little ."
"CMMI :'("
"I'm wondering this too. If they can interfere with your hard drive firmware, tamper with your downloads, implant spyware in your BIOS, replace or complement some of your hardware with spyware, etc., how exactly would you be able to stop them? Very few people approach the level of technical expertise required to keep abreast of all this stuff in the first place.\n\nWhile this needs to be reigned in or put to a stop, isn't anyone else surprised that we haven't actually seen more abuse of these systems? Granted, the abuse could be concealed, but if things are as they appear then we may have dodged a bullet."
"I looked through the sub, like, 4 times throughout the night. I still have no idea what it is. \n\nBut... Glory to the colony! "
"[deleted]"
"Euh... OK, but I seem to remember something like this being the case with Unix and C, too.\n\nAlso, a specialized/incubated system having a \"dedicated\" language isn't anything novel or exciting.\n\nWith systems and languages, things get interesting when people actually start to use what they want/like ;-)."
"How would you get those operating systems? By download? What about the compilers that produced them? The people involved? There are so many weak links and the stuff in this video just makes them more plausible rather than hypothetical."
"[deleted]"
"Poor planning, scope creep, abysmal budgets and high expectations. Although, that's pretty much any IT or software project, not just for the Government."
"are you  saying that you are surprised that javascript is faster then python? Does python literally have entire teams at 5 major companies working to squeeze every little bit of performance out of the language (aka web browser companies, mozilla, google, microsoft...)\n\nif python had anywhere near the attention as javascript then it would be much faster. "
"C#, (Arduino) C++, Javascript and Java, PHP, ASP, Lua and SQL. (Mix of games programming and Website developing And [this for Arduino](https://www.youtube.com/watch?v=vS3JJxMosvM))"
"I'm not sure whether programming is worthy of being in the default curriculum, but I DO thing it is very useful because it teaches you how to think in a different way ... Also, having a clue about what computers can and cannot do is useful ... And being able to write excel macros, or bat/bash/powershell scripts is also very useful, and not terribly complicated"
"Genuine question, what would be the purpose of using Fortran over much newer languages that exist? Did you use it for fun, or does Fortran does something better than other languages?"
"Lua, Java, Bash, Batch, C/C++, JavaScript... others...\n"
"Unless of course you want to generate reports e.g. on a per-hour basis...."
"Except ... They don't write good code either ; at least not alone ; good code comes from collaboration and code reviews ; in a way, that's kind of the definition of good code, one that many people understand"
"I suppose it's one of those things we'll just have to see.\nSeeing as the blogger himself has complained about people being too speculative.\nI open my mind, but prepare to be underwhelmed :P.\n\nNow, all I have to do is wait 5-6 years to find out what it's all about.\n\n/lol/\nEdit:\nOff topic :P\nJoe's blog is interesting, though I kind of have to sit here with a spoon of salt on somethings.\nPerhaps its a bias of mine, but when I look at charts about safety &amp; productive compared to performance for languages, in the back of my mind, I'm like. \"are those higher level languages any safer/more productive?\". I mean, honestly, people sit around and basically hack higher level programming languages to work better. Either that or they include C snippets for specific parts.\nAll of the ordeals of first optimizing their code, and then optimizing the C code you've written to optimize earlier code... I feel like Safety &amp; Production should take a hit for that. At least if we're discussing any fairly large project where optimization is going to be an issue."
"This is also an interesting metric when considering whether private sector or public sector is more efficient. Both sides have seemingly high failure rates. One of them everyone whinges about because it uses a share of their contributed money towards the failures."
"This is awesome. Thanks for sharing!"
"This is pretty cool, I wonder if they will make one for the xbox 360?"
"First thing I noticed is lack of KDE integration. I forked it and am going to take a whack at adding it. Also, it would be super-handy on Windows. I filed a new issue to track that.  Great idea!"
"I'm a fan of that add-on too, but it only works with Firefox."
"Exactly, if your career has spanned a couple of decades, you'll know several languages, frameworks, platforms which are pretty much defunct.\n\nSpecialize in this industry at your peril, your greatest value is ability to learn and adapt. If you can't go deep on more than one thing, it's a very bad sign."
"The name \"M#\" strikes me as being a bit uninspired - the original idea behind naming programming languages \"C#\" and \"F#\" was a clever pun on musical notes, where \"#\" is used to raise a note by a semitone, thus being somewhat equivalent to the \"++\" suffix in \"C++\". The letter \"M\" is not the name of any note, and I can almost hear the \"whoosh\" of the pun going over the head of the developers.\n\nOr, maybe I have just missed the musical reference myself?"
"I think he was specifically comparing private companies and the government, excluding publicly traded corporations that are subject to almost as much red tape as any government entity I've worked for.  The larger the entity you are working for gets, the more people have to answer for problems and the worse things get."
"Hmm. Interesting. Perhaps it was because they could develop it in isolation and those who worked on it weren't underpaid."
"Is it just me, but it is pretty much the same with *any* big organization contract!?\n\nIn that light, tl;dr of the TFA is: big organizations don't know how to participate in software projects.\n\nMy take: the more people of influence get involved, the more of them hasn't got the first idea how software is made, that reflects decision process, communication and everything else, and that bogs it all down."
"How about if it was COBOL, APL, or maybe ColdFusion... ;)"
"[deleted]"
"Because Joe Duffy is incredibly highly regarded in the Windows development community, specifically because of his in-depth knowledge of how concurrency works in Windows. His book \"[Concurrent Programming on Windows](http://www.amazon.com/Concurrent-Programming-Windows-Joe-Duffy/dp/032143482X)\" is the gold standard and required reading at most Windows shops that deal with systems programming.\n\nIf he's been working on a systems language for 5 years and thinks it is mature enough to share; that's big news in the land of Windows systems programming.  Unfortunately; there aren't too many more people in the world who that effects.\n\n(Also, [this problem](http://stackoverflow.com/questions/20860709/why-does-monitor-pulseall-result-in-a-stepping-stair-latency-pattern-in-signal) has been in the back of my head all day and he's probably one of the few people on StackOverflow who could actually answer it)"
"Actually m is used in music to denote minor chords, but its a bit far fetched."
"Apparently the government found a way to remotely hack iPhones from 8 miles away. Why is the NSA different? Why can they seemingly pull off miracles? "
"The above is the very reason why I prefer smaller companies. \n\n**Everything** you say applies to wast swaths of larger, well-established companies.\n\nAnd \"well-established\" is as important as \"larger\", as it brings the kind of \"accountability\" that virtually exclusively depends on office politics."
"We all gotta learn my friend. Functional programming is definitely the most important part of computer science that I have studied, even though I haven't since used a functional language.\n\nBut I do believe if you don't study it you will eventually end discovering most of the principles. Functional idioms are quite simple, but most of us approach general problem solving in a procedural manner. "
"Oh my god. Guys, guys! Strcpy has a backdoor that corrupts your memory, the NSA is trying to hack us! Believe me, I'm professional C programmer."
"Not until they stopped working on them."
"&gt; haven't ever been to CS undergrad to even know what a Turing machine is.\n\nI'll save those poor souls a bit of time.\n\nTuring complete means able to provide the result from a computable problem given enough time and space.\n\nA CS degree is not required to understand this, any highschooler could be exposed to this factoid and grasp it... given enough time and space."
"...Elm, Haxe, Idris..."
"lolwat. c# is open spec. look at mono."
"You'd think everybody knew this, but where I work at, our database is currently on Eastern (ET). Which, of course, changes twice a year. You can't imagine the hell I have to go through."
"Seriously. Magic: The Gathering is Turing complete, for fucks sake."
"&gt; So my first question is why are you using a web browser to test an API?\n\nBecause it's convenient (too convenient, specifically). I appreciate the point you're trying to make and I generally agree, but it isn't a very convenient solution. That's not to say that Wireshark or whatever you want to use is overly complicated but it is an extra tool and an extra step, while the browser \"just works\" -- and if it doesn't fellow developers are going to be confused. My ~~company~~ employer's API isn't even versioned (oh gawd), if the version number isn't in the URL my colleagues will be lost. The notion that an API is *not* a plaintext representation of a web service running in tandem is simply not well established yet.\n\nI also think REST is too young to say much about best practices yet. People can't even really agree on whether to use PUT or POST."
"I just went and reread the \"new in python 3\" doc from the latest release.   Unless you deal with unicode often, the improvements are all minor.  Dict/set comprehensions, nice.  Legacy cleanup on stuff returning lists, great.  But none of this stuff was a major problem.\n\nOn the other hand a lot of the breaking changes are annoying.  print as a function is more flexible, but I actually have no problems with the keyword version.  The text vs bytes thing just sounds like it will be a pain in the ass.  I don't really care about bigger ints and why the FUCK are they deprecating % string formatting?\n\nSo that's python 3 from my perspective.  Heroically solving a bunch of problems I've never once run into, while breaking everything I've written in python.  Not being adopted?  No shit."
"My anecdotal evidence is that they fail at a lower rate than private sector projects, and that's terrible. When I worked for the federal government as a coder I often said that the only reason we hadn't gone out of business from our own incompetence is that we couldn't, not being a business and all.\n\nThere were many many projects still being worked on, still sending piles of your taxes off to contractors, that had long since passed the old-yeller mercy threshold. Internal sites no one used and we couldn't even run locally because they were such security disasters, but we couldn't shut down because their existence was required by one of our funding bills. "
"&gt; Better multi core would indeed by helpful but is it really stopping adoption?\n\nImho what's stopping adoption is if you happen to use the OS installed on 91% of desktops and laptops, then for most decent languages you can download a simple installer like Haskell Platform, RubyInstaller, DMD 1 click installer etc. and you're ready to go (and for some others it's just \"cabal install thislang\" which works fine thanks to Haskell Platform). Some years ago OCaml had something similar. And now you come to ocaml.org and see a big ~~fuck you~~ \"collect the puzzle (cygwin, flexdll etc.) and compile from sources\". And only then, if you're lucky, you get a natively compiled language (yay!) with no parallelism and ~~shitty~~ very minimal and inconsistent stdlib. \n\nI've been using OCaml since 2007 and now mostly don't, because for more functional stuff I can use Haskell and for more imperative - D, both being multicore-friendly, Windows-friendly and having nice package management &amp; build tools (cabal and dub)."
"Well the 2016 election is coming up....."
"If you haven't done anything wrong, then you have nothing to avoid citizen."
"No never not believing in yourself."
"Oh yea you're right, it's actual content."
"What version of adblock do you have? Do you have adblock edge?"
"I don't really care for windows too much myself and I agree that in general that's the general attitude for OCaml users but what you're describing seems like a slight exaggeration of the state of affairs. Have you tried:\n\n* http://protz.github.io/ocaml-installer/\n* http://yypkg.org/"
"I think when it's capitalized it is usually major "
"[deleted]"
"Well, to be fair naming the programming language Midori after the Linux browser is an early potshot at PC Plus. But that's assuming there is anything here...."
"It's a pity that the \"CodingForInterviews\" website linked in the blog article doesn't have an archive of the past newletters. Anyone knows how to get those?"
"Please put some android interview questions and answers."
"[deleted]"
"My belief with respect to projects run by New Zealand government departments is that there is too much attachment to existing infrastructure and established methologies. Once you've invested millions on \"enterprise\" software, expensive big-name hardware, and top-of-the-line Agile training, certification, and coaches, you'd better bloody well use them for every godamn probem you can come up with. And be sure to spend even more next year. You've got a budget to justify!\n\nDon't get me wrong, there are a lot of very talented and earnest professionals working on these projects, at all levels, but the inpenetrable haze of group-think dampens any and all critical objections.\n\nThe working environment has been shaped by egalitarian ideals through successive governments. It is a culture that does not comprehend the importance and value of disruption. Disruption is chaos, and chaos cannot be organised.\n\nDespite this glaring ommission, IMHO, there is a lot of thought and engineering committed to these projects. In my view there is way to much. Every solution has to be huge and complex; it must address not merely the specific demands of the immediate problem, but the entire class such problems.\n\nWhen crunch time comes around though along comes that dreadful question: this is the problem we needed to solve, so have you managed to solve it with the millions of dollars we have spent over the course of this multi-year effort? The response to that question often turns out to be cancellation, restructuring, absorbtion into a newer, more awesomer superproject.\n\nAnd at all levels there is not a bike shed in sight."
"They could have added the ugly synonyms for \"transitional\" versions. Python 3.0 could have had some of ugly crutches (with deprecation warnings) to keep some compatibility with Python 2*.  Then they could remove them gradually, to make the transition less painful."
"[deleted]"
"There is also http://careers.stackoverflow.com/ so some might game the meaningless number to have a better chance with future employers. "
"Well, we do intend on improving the presentation before we seek a mass audience.\n\nWe didn't invite this publication -- and indeed we're at too preliminary a stage to be showing this off."
"Many complain of search on stackoverflow. The best trick that I use to find good answers is to begin to write myself a question. The automatic live matching of questions content is very very helpful. When a question that matches what I'm searching pop up I give up mine."
"did you at least leave a comment? or, if you have enough privileges (which he does), edit the post and say \"this is buggy, the bug is blah blah\""
"basically: you don't need to use the ORM. sqlalchemy core is like a database-agnostic pythonesque SQL compiler for both queries and DDL."
"the jobs-vector is unneeded:\n\n    int main() {\n      std::vector&lt;std::future&lt;std::string&gt;&gt; results;\n      for(const auto &amp;job: {\"url1\", \"url2\"}){\n        results.emplace_back(std::async(get_url, job));\n      }\n      for(auto &amp;result:results) { std::cout &lt;&lt; result.get() &lt;&lt; '\\n'; }\n      return 0;\n    }\n\nAlso, concerning the explicit launch-policy: The default is “async if a new thread will bring an advantage, lazy otherwise”, so no need to change that (unless you are using a buggy implementation like libc++ or libstdc++)."
"it's a code name, while the others are actual product names. \nThe original idea here would be, I think, SingularityOS-&gt;Sing#, MidoriOs -&gt;M#. \nSing# was terrible too :)"
"to be honest, and I'm saying this as an OSX/iOS fanboi, Apple's Xcode is rather hard to automate (e.g. try creating an xcodearchive on the command line - is that finally supported now?). But _most_ tasks can be done."
"&gt; abysmal budgets\n\nHuh, can't be that bad, HP and IBM both have set up operations in my country just for the government contracts."
"[deleted]"
"Thank you for the links!\n\nI think I tried the first one some time ago, not the newest version though. Haven't seen the second one yet.\nUpd: looked again, it still needs Cygwin environment to build OCaml programs which makes it rather complicated to use from non-Cygwin things like OcaIDE, for example. "
"Am I brilliant or just very lucky when less than 5% of the projects I've been involved in have failed?\n\n*edit* Nevermind, I know the answer to this one."
"Hi Strilanc, thanks for your reply. You are right but this is because the main purpose of the post is to define the meaning of delegates not how to use them. As you can see the post didn't include a single line of code because I didn't want to jump into code rather than scratch the surface for others to start searching on delegates and how they are used."
"Excellent documentation.  Always nice to see."
"[We heard.](http://www.reddit.com/r/programming/comments/1tvic1/the_microsoft_response_to_d_and_rust_m/) [Twice.](http://www.reddit.com/r/programming/comments/1tvcxy/c_for_systems_programming/)\n\nWhy are we posting blogspam when we have already seen have the original sources?"
"Yes. They really do. We're in the process of ripping out sqlalchemy and reverting back to psycopg2. It makes everything *so* much simpler."
"My impression, having worked on about 15 government projects and over 60 in the private sector, is that the failure rates are similar, but the private-sector projects get the plug pulled on them sooner when it's evident that they're failing.\n\nOne reason for that, besides the unhelpful \"government can't do anything right\" mantra, is that government projects are often required to be completed due to some legislative mandate, so their managers are more reluctant to shut them down instead of trying to fix them. In the private sector, unless the project is driven by a compliance requirement, there are often more options than just pressing on if it all turns to shit.\n\nAn interesting comparison would be between no-alternative-but-to-do-it private-sector projects, versus similar public-sector projects. "
"Not gonna lie, the government has allocated some serious cash to different IT projects around the world, but the ones that get the cash are few and far between. The remaining 95% of projects run by the government get the remaining 5% of cash."
"And mi is the third degree of the major scale—raised one half step (mi#) would make it fa (the fourth degree of the major scale). "
"They are open sourcing it this year."
"Because being good at what the contract wants you to do and winning that government contract have nothing in common with each other."
"Why not? Works fine in bing."
"I was on a highly successful big-budget private sector project that was abandoned when the managing VP who sponsored it moved to another firm. His successor wanted to pursue a different strategy and threw away two years of very costly work. The new strategy failed after about two years."
"Just says \"Chris\" ?"
"That seems like a discussion of what constitutes project failure.\n\nNot meeting significant documented requirements, and/or not being fit for use regardless of the documented requirements, is a failure even if the project was completed and everyone got paid. \n\nThe software engineering literature tends to define failure as \"project abandoned, or project failed to meet critical objectives.\" "
"Side effects!"
"In the words of Colbert: If you have done nothing wrong you have nothing to hide from the giant surveillance machine the government's been hiding."
"Have you ever heard of ITIL? Multinational corporations are big on it, which makes their lists as long as gov thing you wrote.\n\nOn the other hand bringing down webpage of your local grocery store is different from getting pharma or electronics R&amp;D department offline for few hours. First one will be noticed by the owner, if it's a slow day, second one will get you a free cardboard box for shit from your desk."
"If you're going to compare the government to a private-sector entity, you should choose a very large company. Otherwise you're confusing phenomena caused by the scale of the enterprise to those caused by whether the enterprise is public or private."
"[But an M# already does exist](http://www.msharp.co.uk/Home.html) ([wiki](http://en.wikipedia.org/wiki/M_Sharp_(programming_language\\)))."
"&gt;It's because they're run by politicians instead of engineers.\n\nVery few large private companies are run by engineers. More often, MBAs and accountants."
"Oh god, why did I google that?  I didn't realize that the brain could feel physical pain before."
"&gt; This is probably not the fault of the author as there are few people who have lived through a government project that was put right.\n\nThe consulting firm I worked for did this consistently, and also held senior management accountable for failed projects, though in many cases it was acknowledged to be the client's fault and nobody's head was chopped off for those.\n\nWe also gave bonuses to our sales people for selling profitable, viable projects and withheld bonuses for projects that were under-bid. That meant a delay in compensation, which the sales-folk didn't like, but the quality of projects went way up when we started doing that."
"Nope. I didn't even know about Midori.\n\nThe only thing I know they are working on was barrelfish (http://www.barrelfish.org/).\n"
"A toolkit using d3js for a near example:\nhttp://dimplejs.org/examples_viewer.html?id=bars_vertical_grouped"
"I was relatively boring this year: from most to least... C#, python, iec61131 languages, java, f#\n\nAlso at work I've been developing a DSL for a specific task and using that, but I don't know if that counts\n\nI am not counting database nor content creation things (SQL, LaTeX, etc)"
"&gt; The number of torrents indexed has reached a staggering 2.8 million\n\nAssuming a magnet link takes 0.5 KB of storage, the entire index is currently less than 1.5 GB. What would it take to distribute it on a p2p basis itself instead of relying on HTTP?"
"[deleted]"
"No one is saying publicly how well PRISM works, but I'm glad you pointed out this cognitive dissonance in our perception of government.  Government is inept and slow, unless, of course, it is spying on you, in which case it is super sophisticated and innovative!  Surely reality lies somewhere in the middle."
"I agree with you all the way, funny discussion however.  \n  \nWdr1 is being ridiculous, fucking stupid."
"I use wpf, windows forms and XNA 4.0 every single workday. Love XNA, winforms can be a pain at times however but I am still very productive using it and my business makes all its money on products built on these technologies."
"AAF"
"I prefer it, I can't be the only one. I just think most people don't like change."
"First, CMMI is not a methodology, it's an assessment framework.\n\nSecond, done right, doing the things the CMMI says an organization should do, and doing those things in an operationally efficient manner (which the CMMI doesn't score you on), really does lead to better project success and better software. It's just that CMMI (and any other framework defining \"best practice\") works best in the context it was intended for: big software-engineering projects in situations where quality overrides other success criteria such as time-to-market. I worked in an aerospace firm on CMMI level 5 projects. Those projects were well-run, the process overheads weren't excessive, and both the bug rates and time-to-fix statistics were low. But it's also possible to achieve a high CMMI score and have extremely costly processes. CMMI doesn't tell you how to make (or save) money.\n\nIf I were buying a command and control system, I'd want to see the contractor's methodology, and I'd want to see an assessment by a third party like the SEI of their CMMI level (self-assessment is bullshit). On the other hand, if I were looking for a set of PHP templates for $29, or even a much more complex item of consumer software, I'd have no reason to care. I moved to consulting for high-tech and software firms and successfully used many of the principles I learned. But I would never unthinkingly apply all of them, because the objectives are not the same. "
"`xargs` is just such a black art. It has so many switches and options and I've never got the hang of the `{}` syntax without looking up examples."
"&gt; For a private client: i could have a fix within an hour: connect to their network and deploy the fix\n\nFor a private client that lets you connect to their network you could also lodge a snooper on behalf of a competitor within an hour. Governments are better than private business at managing risk."
"That's unresponsive to the question. Are there proportionally fewer bullshitters in the private sector than in the public sector?\n\n&gt;Don't tell me I'm wrong, I know that more than half of these people can't even program something so trivial, if you ask them to.\n\nYou're wrong. In most places I've worked, programmers are moderately competent. The morons get weeded out pretty quickly. The problem is that, even without the morons, getting the ordinarily-competent programmers to produce a quality product on budget and on schedule is trickier than it should be. That's a different problem."
"Not sure how such a true statement gets voted down so much... maybe because it doesn't differentiate between government and business projects, or maybe a \"shit\" too many. At the beginning of the eighties it was highly unusual to find programmers without aptitude, but around then these sorts started drifting in. I think the cause was to do with the PC revolution. Someone bought a PC for home use on a Friday night, managed to figure out how to write a Batch file with a conditional and a loop by Sunday night, then went to work on Monday morning, looked at the programmers in EDP and thought \"Surely I can do what they do\", whereas before the thought of doing anything technical on the mainframe never occurred to them."
"I couldn't give a shit. Rust is open source, more mature, will support a new browser engine, and works on all OS."
"Or alternatively, Fa, but that's a long long way to run."
"You wrote a super-basic blog article and linked it to reddit... why?!?\n\nHow about actually putting some effort into something.\n\nQuite frankly I feel this tinker-post denigrates New Zealand as a country of pragmatic and hard-working people - and I would vote you off the island first."
"[deleted]"
"Also: Ruby and Python bigger than C# and Java? No way."
"The fact that there are libraries which hide the complexity from you does not mean it isn't there. Of course there is very little about time calculations that can not be hidden in a library of a suitable abstraction level."
"We did work for a large casino. In the early days it was great. We could connect to the network when we wanted, find the problem, push an update right away\n\nThen auditors started showing up and asking questions. And rather than ignoring the auditors suggestions, they started to introduce bureaucracy. They're not as bad as a full government client. Updates for them went from an hour to a few days."
"[Here](http://theverge.com/2014/1/1/5262740/4-6-million-snapchat-phone-numbers-and-usernames-leaked) is the non-mobile version of this site."
"&gt; For a private client that lets you connect to their network you could also lodge a snooper on behalf of a competitor within an hour. Governments are better than private business at managing risk.\n\nYes I could. But either they trust me or they don't. \n\n"
"So what are the options there?  If we just used functions we can namespace them: Foo.days 2 or what not"
"&gt; I'm going to start interviewing people soon and I'm really afraid of what's out there...\n\nOh dear. Be afraid."
"Many python developers have come to python from the Java world and brought Java habits with them. They just treat it as Java without the curly braces"
"Try also WODI http://wodi.forge.ocamlcore.org/\n\nIt not only installs a decent number of OCaml libs, but also C libs like curl, sqlite3, ssl or zlib required by the corresponding OCaml bindings. BTW, do you happen to know how the installers you mention (Haskell Platform, RubyInstaller, DMD) handle this (\"installing system libraries\")? Do they just ship all the DLLs? \n\nAs for it working without Cygwin, this is relevant:\n\n&gt;WODI is an extended Windows port of GODI. Its build system and package tools rely on Cygwin, but the libraries and programs, compiled with mingw-w64 and OCaml, are independent of Cygwin."
"The moral of the story?\n\nDo not use Java"
"lol \n\n\"worst solution ever\" :)"
"There are atm. two independent efforts to make in-process multicore happen, see \n[OCaml Labs' 2013 progress report](http://anil.recoil.org/2013/12/29/the-year-in-ocamllabs.html#threadlocal_storage_runtime) and OCamlPro's blogpost series, starting from [here](http://www.ocamlpro.com/blog/2013/02/18/monthly-01-02.html) (look for \"multi-runtime\")."
"Creating a database schema should be about the same amount of effort for any database server (well, other than the big commercial stuff like DB2 and Oracle which is explicitly designed around providing full time employment to a DBA). It largely depends on the complexity of your entities and the relationships between them but other than the completely system-agnostic design of that model itself it should be basically the time to write the create table statements. Loading the initial data (assuming CSV or something similar, you didn't specify that) has commands in any SQL database I know of as well.\n\nObviously on Linux you wouldn't use C# for the GUI, you could use C++ and QtWebkit or one of the many higher lever languages with bindings to Webkit (or if this were to happen a few years ago bindings to Firefox's xulrunner and Gecko).\n\nYou also wouldn't use Windows authentication for SSO, you could use Kerberos or LDAP authentication, the former does work against a Windows DC (among other KDC implementations) if you need that kind of functionality. I am not aware of any Linux bindings that \"automatically\" leak authentication info to unrelated software as you describe bu of course the benefits of stored procedures are rather dubious anyway given that for security reasons you do not want your whole network to be able to connect directly to your database server. Not to mention the lock-in into one specific dialect of SQL. If you insist on using them stored procedures do exist on any major database server though. I would probably use PostgreSQL.\n\nMost likely the authentication and possible filtering would happen in a REST service used by the desktop application if a Linux developer would design this. There are many good frameworks making this very easy in pretty much any language you can think of (not counting joke languages like Brainfuck of course).\n\nI assume by locking records you mean a lock while an employee works on a record since transactions are more sensible for automated changes that need to be atomic. That is just a column in the table with the editing username and possibly a timestamp so locks can time out, I don't see why you would see that as difficult at all.\n\nAs for the deployment, these days I would probably use Puppet to completely automate it. Adding it to the repository for your favorite Linux distro's package management tool of choice would be involved too. Automatic updates on application startup are quite frankly archaic, both because they require your application to be able to write to its installation location while running as a normal user and because better solutions exist, namely package managers doing all the updates at the same time.\n\nAs a very quick and dirty way if the installation had to happen right now you could always just use a shell for loop and scp and ssh to do the work but I wouldn't recommend it if you have the ten minutes the clean solution would take (given an already managed infrastructure, just as in your example).\n\nOverall i would say the time this takes is largely dependent on how much time you spend on the GUI, in particular how many iterations you go through before you are content with the look and feel of it.\n\nI really don't know why you wouldn't just use a web application though, it would make things a lot more portable, you don't need to deploy it to any desktop systems at all and most importantly, your Google, Bing,... result display becomes trivial in the browser.\n\nHaving worked on a project doing address parsing from random places in the past I don't see how you could do the \"Allow the user to pull info from web browser into database entry fields with one click.\" part in one day due to hundreds of different address formats in use on random web pages. The rest seems fairly trivial and would largely depend on how many fields your records have (as that makes writing the schema and the GUI and the queries longer).\n\nFor a web solution I would probably use PostgreSQL as the database, Parsec for the parsing of the addresses off web pages and Yesod for a web framework...but you could do most of it just as well in any other language (not sure about the parsing, parsec is pretty easy to use there)."
"The fact that there are libraries witch hide the complexity from you means we should not have this conversation."
"hmm I agree with most of what you are saying.\n\nRegarding faster hardware, I think that if you have sloppy and un-optimized code then using faster hardware is certainly a band aid.\n\nOf course there are cases when the code is not sloppy and it is as fast as it will get and faster hardware is the only option, those are legimitate cases for opting for faster hardware."
"The trouble is that the suitable abstraction level I mentioned often would include the full decision of what exactly to display to the user and even some of the user inputs (e.g. select home timezone for repeating appointment) in the library itself. Most libraries don't go that far."
"i like the name M#..  i see it as \"i am sharp\" where the letters i and a are dropped. just like the short text sms lingo."
"Mostly: speed and backwards compatibility.\n\nBut also: Modern Fortran is not FORTRAN77\n\nBackwards compatibility: A lot of scientific programming in the 80s and earlier was done in FORTRAN77 (and much in the 90s too). Rather than spending 5 years rewriting the code in C++, you might as well use something that already works. Or at very least, writing in modern Fortran lets you incorporate older FORTRAN77 code without having to mess around with wrappers and so on. Also, in my kind of science we're running on hundreds of processors, and most of the software to do that (openmp, mpi etc) is based around C, C++, or Fortran.\n\nSpeed: I do hydrodynamic simulations of galaxies, which is basically a series of very large for-loops to do calculations on arrays of over a million particles. So if you want it done in less than a year, you really need speed. Fortran and C are [close enough](http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=ifc&amp;data=u32) that it comes down to difference within the implementation. But if you compare to a modern language like [Python](http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=ifc&amp;lang2=python3&amp;data=u32), it blows it out of the water. Sure, you can use libraries and stuff to speed up Python, but you'd have to write these libraries in C or Fortran anyway, so you might as well not bother with the complexity of having two languages and just do the whole thing in Fortran. However, I do some of my post-simulation analysis in Python, because speed isn't so critical.\n\nAnd lastly: Fortran has a bit of an unjustified reputation for being archaic, but modern Fortran is actually quite nice. The problem is that too many people think that FORTRAN77 (where 77 means 1977 !) is the only type of Fortran worth bothering with. But Fortran-90 is actually a fully featured modern language, and it's constantly under development. There are even some features that sort of mimic object-oriented programming for instance. There are a few things in Fortran-90 I'd even prefer over C (although for object-oriented stuff, I'd go with C++ or Java). The syntax for pointers and dynamic arrays is much more straightforward, and the array operations are extremely convenient. Overall, I would argue that modern Fortran is slightly more advanced than C, but less advanced than C++."
"The Irish government implemented a software HRM system for the entire civil service. It was basically an SAP installation. SAP Is expensive to install, but the HR part doesn't require that much modification to work correctly, just a few weeks of config. If your implementation costs go above 7 figures, you've done something seriously wrong. \n\nRather than install it and say, \"this is the way we're doing things now\", they butchered and modified the system so that it would match the existing HR processes. Not just for one department but for hundreds of different government departments and organisations, each with their own particular way of doing the same damn thing. \n\nIn the end the cost of implementing an out-of-the-box software solution exceeded €200m and took a number of years. It's commonly cited as an example here of how bad governments are at doing things. \n\nThe main issue is that governments rarely operate like a single entity. They're more like a loosely linked confederation of different companies, with different bosses and different priorities. While the leader of the country is in theory the \"CEO\" of this corporation, in reality his/her power is only to negotiate with these companies rather than dictate to them, because unions and politicians continually demand a say, even in things which don't concern them. "
"Somehow it seems that BarrelFish is worked on independently. It seems that BarrelFish is still a tad more *researchy* with different goals (handling heterogeneous hardware rather than being provably safe)."
"Yes, I am, because python has a huge userbase and is opensource, also, Guido works for google on it so you'd expect some of the resources of the monolithe devoted to it..\n\nAlso, other languages with a significantly smaller userbase behind it which are also dynamically typed languages with similar semantics like scheme and clojure completely blow it out of the water performance wise in most implementations."
"Javascript is about as safe a language as exists. Whether or not implementations are safe is another question. They haven't been traditionally, they mostly are now."
"I was making $50 an XBOX back when the original mod required the machine to be opened up, a bridge to be soldered, and a memory card exploit. It was nice being able to slap a 80gb drive in the XBOX, copy games to it, and load them straight from the drive.\n\nProbably made close to $1k doing it during my freshman year of college. Those were the good ol' days."
"GPL has rules about you must do with the code, what you can't do with it. All kinds of rules.\n\nBSD is much freer then LGPL. In BSD there is no restrictions on what you can do with the code.  You just have to have a copyright line somewhere in your  documentation. \n\nWith BSD you can close source it, modify it, sell it. It doesn't matter. BSD is the closest to public domain you will find.\n\nGPL is filled with limitations and should be avoided."
"I recommend you install this. It will make your life much easier.\n\nhttps://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en\n\nAlso you should be writing functional tests which automate and repeat all of your use cases. "
"I generally *hate* ORM/db abstraction layers/toolkits, with one exception: SQLA. It's a fantastic bit of work and a joy to work with. Well thought out and gets out of your way"
"Wow, thanks for the detailed explanation! I think I'll try my hand at Fortran someday.\n\n\nI thought your comment was worthy of a /r/DepthHub submission. I'm not sure how it'll fare though :P\n\nEdit : It fared well."
"&gt; A good RESTful API will keep track of the version in the URL. \n\nWhat for? I've never come accross a consumer that could inspect said version and switch implementation based on that information. Versionning is useful, but mostly to developers writing the consuming software.\n\nIf consumers could automatically adapt, I would agree but then again the URL would still be a poor choice to expose that piece of info."
"Capital M is also for [meter](http://trillian.mit.edu/~jc/doc/doc/ABCtut_Headers.html#I_Meter)"
"Greenspun's tenth rule strikes again!"
"&gt; The fact that there are libraries which hide the complexity from you does not mean it isn't there.\n\nI guess I don't get your point then. Of course there is plenty of complexity. The point is that you don't need to handle it because it has already been done."
"You can't make cross domain javascript calls and scrape things from another website using an iframe as far as I'm aware. Google won't even load in a frame. So, that's why it's a desktop app."
"Regarding the scraping of data from web browser to database field, consider this: User selects some text (or an image), right-clicks it and now sees a context menu of which field to send their selection to. Also, the address format was all domestic/business (3 lines) so parsing and breaking it up into separate fields was easy.\n\nSo...could you do a *desktop app* like this faster than a day then? Are you still of the opinion that Windows is harder to program for if someone as obviously retarded as I am can do this in a day on Windows?"
"Well it is not so far fetched considering they based it on sing# which was AOT compiled to machine code."
"What about them?"
"&gt;     FETCHES[${#FETCHES[@]}]=$!\n\nWhy not:\n\n    FETCHES+=($!)"
"you can't prove your program anymore. given the state of your network and the websites you're querying you won't get the same results for the same input.\n\nyou should feel bad. this could cost you the membership in the ivory tower club of academia!"
"[deleted]"
"Then look at Go, PHP, Perl, Python, Ruby, and Rust. They're open *source*, as are javac, GCC, LLVM, and V8. "
"Nobody has a good definition of what \"fail\" means.  If fail means going over-schedule or over-budget, sure let's guess 90% of projects everywhere fail.\n\nBut if a project is finished a year late, 30% over budget, with 70% of the originally promised requirements (a common scenario for government)....did it fail?   Not so clear."
"The snapchatdb.info site is down -- apparently nobody thought to spring for anything more than a cheapo shared host.  [But the internet archive did capture a copy of the site before it went down](https://web.archive.org/web/20140101043605/http://www.snapchatdb.info/).  The downloads seem to stall at about 18%.  There's [a mirror](http://www.reddit.com/r/netsec/comments/1u4xss/snapchat_phone_number_database_leaked_46_million/ceek4ay) listed in one of the comments of the [/r/netsec post on the matter](http://www.reddit.com/r/netsec/comments/1u4xss/snapchat_phone_number_database_leaked_46_million/).\n\n"
"No one has a good definition.  That combined with generalities in OP's article makes it not so useful.\n\nThe funny part is that they start by acknowledging how many stakeholder groups there are.  Each tend to have their own set of pet requirements; so there are at least as many definitions of failure as there are stakeholder groups.  \n\nReality is that failure is in the eye of the beholder.  You've failed if you didn't deliver the functionality I care about, on a schedule that helps me."
"[deleted]"
"oh you're one of those anti-haskell (maybe anti-FP in general) trolls who thinks \"pure = useless\"\n\nobviously this has side effects but they're in `IO` so who cares"
"I think I'm literally the first person to submit ActionScript. I thought that was relatively popular.\n\nMostly C and C# this year, though."
"I don't think my point was very clear. The issue is one of lacking education. In my experience, REST is too young for people to know much about it if they don't go out of their way to research it. I can do all the Right Things™ and still be considered unproductive by my colleagues, or worse, in their way, because they value other things (rightly or wrongly). REST isn't anything special in this respect, it's just the topic of conversation. It's the same thing that leads companies to jump Node.js and NoSQL bandwagons without careful considerations first.\n\nObviously the only way to address this issue is indeed to educate people, but up until recently I'd say the expectation of being able to test an API in a plain browser was reasonable. Naive, error prone, and inefficient, but reasonable. A change such as the one you propose breaks that completely and many places that will raise questions."
"Yes, it failed. I think you're asking if should we look at metrics other than failure?"
"There's a torrent now.  I got an email about this at midnight last night and by 2am there were mirrors and torrents up."
"What is the connection between rails and javascript?  Just that they are both used for websites or something more important?"
"Is Microsoft ecosystem still relevant these days?"
"No, it actually looks like a specialized wrapper around multi-processing with a thread pool."
"Well that'll put a bit of a dent in their valuation."
"&gt; \"Oops.\"\n\nTheir response."
"[deleted]"
"Seems to have ignored the large strides made by PyPy in 2013"
"&gt; Also, this problem has been in the back of my head all day and he's probably one of the few people on StackOverflow who could actually answer it\n\nEither him, or Jon Skeet"
"OK, thanks. I understand now. I personally think it would be better in practice to think of the *code points* as forbidden in context, rather than considering what things look like at the byte encoding level.\n\nTable 3-7 also excludes the code points greater than 10FFFF. This fact is not mentioned in the accompanying text. It *is* mentioned in the accompanying text for UTF-32, so this all ends up being more confusing than it needs to be.\n"
"All I'm saying is that no one can define failure.  Other metrics are fine.\n\nIf the requirements delivered included the most important ones for the big boss, maybe the project I described succeeded for them.\n\n"
"&gt;  so who cares\n\nMath cares, d'uh."
"thanks, just the kind of comment I like!"
"Why'd you get an email about it? "
"yeah, I never use \"using namespace std\" but given the more general audience of r/programming, I thought it would be more readable if I did it. the std::cout just slipped in as muscle memory!"
"The sad thing is that nobody really care out the nerd/geek/hacker circlejerk."
"Snapchat is worth $3-4 billion? How? I still don't understand how companies like this get arbitrary numbers slapped on them when I can't think of a viable monetization option for them. "
"Yes, I use fortran too (sometimes). I am in physics and it was the first language I learnt. This was partially because my phd adviser is very senior (+70yo) and it's the only thing he understands. But I learnt C++ and IDL in my postdoc years and these three languages complement each other very well. People nowadays continue using and sharing code written in fortran and for some very specific purposes it works very well: molecular dynamics simulations, for instance.  We have very fast computers, so usually there is not a huge difference in speed compared to C++."
"Well, no, it was still a failure, just not a monumental or big failure. Let's say I want to build a house. That's my goal. I decide the dimensions, materials, etc. Those are all my little plans. If I build the kitchen an inch less than I planned, cause of some unexpected hurdle, I failed in my plan. When I said, \"I want to build a house\", I still had a rough picture of the final house, an early mental image of my plan. So, even though I succeeded in building a house (what I said), I didn't succeed in building a house how I wanted it (what I meant). If this is just a one inch mistake, I can reasonably say I succeeded. If it's numerous big mistakes, like only having some of the rooms I wanted, it costing me significantly more than expected, etc., it's a failure, though not a monumental one, because I still built a house, so part of my original big picture goal was still met.\n\nI guess it depends on how big your margin of error is. Which will be different for everyone. Which is why it's more useful to look at something other than failure, because no one will 100% succeed in most of the stuff they do. If we're measuring things, it's best to look at less vague definitions of things."
"Security group mailing list"
"They've got a lot of users but I can't figure out how they're going to make money..."
"phone numbers are truncated 2 digits"
"Can you share info to get on the list?"
"The copyright on this book is 2003. Some additional insights to the original Xbox were gained since then, but Microsoft did pretty well in keeping the walled garden of the Xbox 360 walled."
"What are they even doing with user's phone numbers? I've never used the app, but I have developed apps before. Seems like they're doing it wrong if they actually need the numbers. Username, email, and password should be enough."
"[deleted]"
"Jon Skeet has one more comment besides the one that got +2, suggesting comparing it to a version that is just lock contention.  That was posted before I put up the MRES graph.  He doesn't know the internal implementation of Monitor so didn't provide an answer.\n\nHans is usually another person I would assume would know the answer, which made me really surprised he was writing it off as NUMA when at least to me it didn't smell like NUMA at all.  That was before I posted the single processor graph which shows the behavior on a 1-CPU system."
"Well you are using reddit, which is written in Python (2). The same with mercurial."
"[deleted]"
"So they show you 2 or 8 digits? If it's 8, you can brute force that with minimal effort."
"Show 8"
"Phone number is used so your friends can find you through their phone contacts."
"Potential value and speculation is baked into that price tag. Lot's of users and high engagement rates which means potential for massive revenues.\n\nYou could have said the same thing about Facebook, YouTube, etc. a few years ago - both of which are now extremely profitable."
"[deleted]"
"I think you can lookup friends by their number. "
"_was_ worth $3-4 billion...."
"minimal effort = minimal fun"
"Sure, but if you're trying to find out (e.g.) Mark Zuckerberg's phone number, that's probably the easiest. 10^2 different numbers &lt;&lt; 10^10(ish) numbers. There's a point where you simply have to be pragmatic. "
"Same way all of the $1+ Billion valued social networks are planning to make money: advertisement. Slap on as many and as obnoxiously as possible adverts before the user base drains to get as much as possible back out of it before it all collapses. They will of course never as much out of it as they value it, but it'll have to do."
"[deleted]"
"[deleted]"
"I was very hyped about that.\n\nWhen it got released my hype went away. I am not impressed by Midori."
"Does anybody know if/when the remaining videos will be released?\n\nI was watching the last 15 minutes of 'The Year in Crypto' live and it was really interesting, but I can't find the talk on the site."
"&gt; Sure, you can use libraries and stuff to speed up Python, but you'd have to write these libraries in C or Fortran anyway, so you might as well not bother with the complexity of having two languages and just do the whole thing in Fortran.\n\nI've used ctypes precisely for this purpose, and it's really not that bad once you've got the interface and build scripts set up."
"I believe they're doing it the way WhatsApp is doing it. You sign up once with a username that is associated to your phone number and need no password to sign in, because your phone number is your password."
"To put it a little differently, Parallel.ForEach is mainly for side-effecting computations (like writing data to an image, downloading webpages and the like) while Select is for transforming lists of data. "
"So does it solve any *technical* problems? I think a lot of people tend to be skeptical of ideological code. Having the license be such a prominent motivating factor as for it to be part of even the name of the library is worrying, because it reveals priorities that may not be in line with those of people who might want to use a library like this.\n\nRegardless, the more players on the block the better, and the code seems nice and readable. I do wish it didn't explicitly rely on `malloc`, but it seems like that would be an easy enough improvement to make."
"With a name that bad, you know it has to be open source software!"
"Exactly:\n\n\n**Post**\n\n*verb*\n\n1. display (a notice) in a public place.\n\n\"a curt notice had been posted on the door\""
"Good point. At least Facebook and YouTube had pretty clear avenues of monetization in my mind. Snapchat though? Force an ad each time before viewing a message, maybe? I could see their usage dwindle extremely quick if they did that. Throw a banner ad into the message list? That would largely distract from the beautiful simple look and feel of the app.\n\nI don't know. I just don't get how they would monetize that one. "
"[7 hours too late, sorry](http://www.reddit.com/r/Android/comments/1u58tz/snapchat_phone_number_database_leaked_46_million/)"
"Nope. HNY!"
"but they'll also send you the untruncated version if you ask nicely"
"I'm a \"HE\" (these days, anyway ([thanks to a risky operation](http://www.spanish-only.com/wp-content/uploads/2010/11/simpsons.gif))).\n\nI'm guessing the \"SHE\" assumption is due to the female Scythian avatar on my twitter/Medium accounts? I just thought it looked neat. The pixel art from that game completely blew me away.  \n\nI should probably switch it to a different picture... like one that I actually own.. \n\n\n"
"I had never heard of the term \"semantic versioning\".  Reading the description, it just looks like \"proper versioning\".  It's interesting to see it get a trendy new name.  I think I agree it's the highest quality approach but I wonder about the overhead imposed on nascent projects.\n\n&gt; Ideally I could rely on something that already exists and happens to be a great fit for Elm. Two commonly suggested choices were npm and Nix. Both sounded plausible, but I decided to create a set of goals before choosing an approach.\n\nI'm grateful for the thought towards this but it looks like elm-get just adds to the heap of language-specific package and build tools.  It always strikes me as extraordinarily silly that every new language needs to come with it's own specific package manager, build tool, etc etc.  Does every language need to create it's own version control system from scratch too?  \n\nIt's a general lament.  I don't want to disparage the elm project specifically for doing what every other language project does.  Clearly having a CPAN-like library available is critical to long-term success and this looks like it puts elm on that path."
"[deleted]"
"Perhaps it is also to prevent a lot of fake accounts?"
"For compute bound tasks you want to use or write a native (C/C++/assembly/...) library that has a python interface and if possible handles the GIL in its entry points."
"&gt; Over the past year we’ve implemented various safeguards to make it more difficult to do.\n\n[Source](http://blog.snapchat.com/post/71353347590/finding-friends-with-phone-numbers).  Not difficult enough, apparently.  You should have taken the buy-out when you had the chance."
"The users are the product, and there's almost always a buyer."
"That's useless. Ninjas are omnipotent."
"so this is what the nsa feels like"
"[deleted]"
"I find in my models that I don't really reuse stuff enough for wrapping it in Python to be useful. The \"meat\" portions are big enough that the Python code would just be a loop that calls a half dozen Fortran subroutines, which doesn't help much. But for a different type of problem it might be more useful."
"There are local security groups all over the world that are open to memberships, mine is currently NoVAHackers.  Look 'em up, there be meetin's 'n' shit, which are optional."
"wanna bet those photos sent with the app arent actually deleted and will also be leaked too one day?"
"So you have to dial up to 100 phone numbers to call him.  Not a big deal."
"Haha. Sing sharp."
"or Measure #"
"&gt;  FORTRAN77 (where 77 means 1977 !)\n\nI've heard 77 means average age of developers in it.\n"
"&gt; Lot's of users and high engagement rates\n\nIf only Charmin would sell ad space...\n\nEDIT: [Nevermind, already done](http://usatoday30.usatoday.com/money/industries/story/2012-08-20/toilet-paper-advertising-coupons/57157328/1)."
"Very good point! \n\n`pool.imap` paired the itertools `take` recipe is one of my favorite combos. It makes it super easy to 'chunk' the problem into little steps only really hitting the processing bits when you need them. "
"&gt; It always strikes me as extraordinarily silly that every new language needs to come with it's own specific package manager\n\nPackage manager takes advantage of specific characteristics of language. So its difficult to generalize it. For example, npm allows lib X and lib Y to depend on different version of lib Z. This is not possible in language like ruby because require  semantics are different in both languages."
"Hint: not yours."
"Just a service reminder for everybody: report posts like these and message the mods telling them why."
"Oh,  so it wasn't one click for all fields (unless in some standard format) but one click per field, that makes the whole task a lot easier, yes.\n\nPersonally I think you consider the task to be much more complex than it really is. I never said that the Windows tools do not work at all, just that they are painful to use and emphasize the wrong things, e.g. in this case providing a tool for a manual task instead of automating it completely, which should be doable given I wrote a similar program in the past (well, all but the phonecalls but for those PBX call out solutions exist to minimize the pain)."
"Not a single phone number with either of the two popular area codes around me. I'm curious how they got this information with out getting all of it (all the username/phone numbers). "
"I was happy enough with just [screen-oriented mail processing](http://nixdoc.net/man-pages/HP-UX/elm.1.html), but now it even manages packages!"
"Well, points are always imaginary, not only in the internet. "
"&gt; That article confirms exactly what I just said. Everyone writes their python code as if they can define mutable global things in order to express whatever computation needs doing, so in order to remove the lock and not break everybody's code, they tried putting fine grained locks on mutable data structures (effectively training wheels on code that expected global mutability to always make sense), and this resulted in very poor performance.\n\nYou are totally incorrect.\n\nEven mutable integers and strings do not work correctly in Python if you remove the global interpreter locks. This is an implementation detail of CPython and has nothing to do with semantics.\n\nThis is documented here:\n\nhttp://docs.python.org/2/faq/library#can-t-we-get-rid-of-the-global-interpreter-lock\n\nAnd the fact that the GIL has nothing to do with Python semantics nor \"the way normal python code is expected to be written\" has trivially demonstrated by the fact that Jython and IronPython have no such thing.\n\nhttp://www.jython.org/jythonbook/en/1.0/Concurrency.html\n\n&gt; Jython lacks the global interpreter lock (GIL), which is an implementation detail of CPython. For CPython, the GIL means that only one thread at a time can run Python code. This restriction also applies to much of the supporting runtime as well as extension modules that do not release the GIL. (Unfortunately development efforts to remove the GIL in CPython have so far only had the effect of slowing down Python execution significantly.)\n\n&gt; Again, Jython does not have the straightjacket of the GIL. This is because all Python threads are mapped to Java threads and use standard Java garbage collection support (the main reason for the GIL in CPython is because of the reference counting GC system). The important ramification here is that you can use threads for compute-intensive tasks that are written in Python.\n\nAnd here is what the PyPy devs say:\n\n&gt; Does PyPy have a GIL? Why?\n\n&gt; Yes, PyPy has a GIL. Removing the GIL is very hard. **The problems are essentially the same as with CPython (including the fact that our garbage collectors are not thread-safe so far)**. Fixing it is possible, **as shown by Jython and IronPython**, but difficult.\n"
"It was accomplished by querying a broken API, and there are code examples. Also, something doesn't strictly have to be \"programming\" to be interesting to programmers."
"I often run into you when Fortran is mentioned. I think because we both trust in the power of the language, even when it falls out of favour of computer scientists.\n\nYou could talk for pages about why it is still an excellent language but I'd like to add a particular benefit, related to speed:\n\nFully optimized FORTRAN and c++ are very close in speed but what I think is that optimization is a lot easier to do in Fortran. In fact, some methods of optimization are just not possible in C++. This means incredibly efficient code is very simple to write. This is a benefit that counts double for us lot, who are not computer scientists at heart and we just do not have the development time to write code (in a language that is already more complex) that can run as fast in C.\n\nThe implementation of MPI makes parallelisation beyond easy in F90.\n\n&gt;the array operations are extremely convenient\n\nI wonder if this is another feature that is beneficial only to someone doing the kind of things I do but this can't be emphasised enough, the array operations (normal in stuff like MatLab) in a language as fast as Fortran is an absolute gift to numerical simulations."
"The thing with snapchat is that as soon as they try to monetize it, there are a dozen other free photo sharing or sexting apps they can switch to immediately. They can't do that with Facebook and YouTube as easily. Snapchat is worth zero until they make some money. I hope they fall on their face for not taking Facebook's ridiculous offer. "
"[deleted]"
"Or don't, seeing as 75%+ of the people here found it interesting."
"That would serve no purpose for them except to sabotage their entire business."
"That's cute"
"[deleted]"
"looks to be only US numbers, or at least a limited subset of the db?\n\ncan't see any obviously UK ones"
"[deleted]"
"If only!\n\nSeriously, information leaks are so current that you wonder whether companies really do anything about it. I am very much afraid that such \"potential\" threats are either blissfully ignored or just so downplayed that nobody thinks it worth investing anything to protect against them.\n\nAnd we do know that the only thing companies care about is making money (that's their purpose after all), so if only such news could strike at that level, maybe they would be less reluctant to invest on security...\n\n... and of course the worst of it is that this kind of leaky API can be relatively easy to fix! It is probably that if only one of the developers had had some security mindset he could have spotted the danger from afar."
"You're in a thread about Unicode. Deal with it. It was nearly the only thing you said in that comment: \"strings are ascii-only and probably always will be\". So I responded to it.\n\nYou've been putting down *other developers* by saying that they don't really care about Unicode, but you're the one equating 128 characters to 256 bytes and saying \"eh, those are mostly the same thing, you're being pedantic\". That's the assumption that causes most of the Unicode bugs that are out there.\n\nEncodings are *how you represent Unicode in bytes*. When you use an encoding, you can do so without any particular help from your programming language. It's great that Python gives you some help, but you could still encode text without it.\n\nYour \"mystery encoding\" is called UTF-8, and it represents non-ASCII characters using many of the non-ASCII bytes, and the fact that they're non-ASCII is absolutely key to how it works.\n\nIf you have a problem where you end up in Internet arguments about Unicode, you should start by not being completely wrong about the simplest encoding there is.\n\nStart reading: http://www.joelonsoftware.com/articles/Unicode.html"
"I seriously doubt it. Even though storage is relatively cheap, developing an ever-increasing storage takes some effort; we may be protected by simple laziness here: it's much easier to delete them than to try and keep with the volume."
"Really? When did they stop working on F#, ASP.NET MVC and Entity Framework? How about TypeScript? I would have expected to see that news here.\n\nThose are certainly not the only major contributions under Apache either. I assume your comment was aimed at IronPython and IronRuby for example. I think the DLR is another one.\n\nThe BarrelFish research OS from Microsoft is being developed under the MIT license.\n\nMicrosoft is all but openly bankrolling the Xamarin guys to build a .NET ecosystem (based on the MIT and LGPL Mono project) to iOS and Android.\n\nI am all for bashing Microsoft. I also appreciate the ability to express our individual bias and spin. That said, let's not completely abandon the facts and head-off into la-la land."
"[deleted]"
"Should mention that there are a bunch of major systems at the back end of airlines, reservations, ticketing, cargo, weight and balance that are mostly still in Fortran. There may be sexy frontends in Java or whatever offering web type connectivity but that core code remains in Fortran."
"In real minecraft, in SMP, some people frown on x-raying, that is, using client knowledge to locate resources (diamond ore, for example) that the vanilla client should be obscuring.  This is because the identity of all blocks in a certain radius is sent to the client by an unmodified minecraft server, and a modified client can easily indicate interesting blocks to the player that normally would be obscured.\n\nUsing the current system, it is possible to implement server-side mods (one is called Orebfuscator) which deliberately obscure certain blocks under certain conditions.  Since the server sends complete the block data to the clients, but obscures (before sending) some of it, it is impossible for even a modified client to detect obscured resources.  \n\nIf the system used a seed/delta approach, there would be no way, even in principle, to hide naturally generated resources from the client.  By handing them the seed, they have all the information they need to find these.  You could send an obscured delta that would show the ores have been removed, but a modified client could trivially ignore the deltas for purposes of finding these resources.\n\nNot only this, but using the seed a player could locate all of the diamond ore that exists in an arbitrary area, out to thousands of blocks if desired, without ever having to actually visit those locations and be told by the server.\n\nBasically, if you want to have any hope of obscuring naturally generated resources from the client, you can't ever share the world seed with the client."
"It's funny that Fortran-90 is sometimes considered to be this newfangled thing that won't really catch on, even though it's older than Croatia."
"I've got adblock plus 1.7.2 on chrome and I'm also running ghostery."
"ref: http://www.antipope.org/charlie/blog-static/2013/12/metaphor-for-the-day.html"
"Bytes as filenames is insane. Period. Without knowing the encoding you cannot even implement 'ls' correctly (as your tty HAS some encoding). Its one of those silly inherited things from the dark POSIX past that should be nuked. (and lots of systems are already opinionated on UTF-8, e.g. OS X, NFSv4, some file systems, Qt/KDE (it ignores LC_* crap for filenames) and so on.)\n\nWhile it is true, that not all unix filenames are UTF-8, it wouldn't be a problem for Python to simply declare all filenames are expected to be UTF-8. If someone decides to choose insane things, let them feel the pain and not hurt everyone else.\n\nAfter all they did the same for Windows in lots of places when declaring ANSI is enough for all filenames (and fixed it piece by piece later, so you cannot start executables on a non ANSI path (without tricks like cd'ing first) with Python 2.x or add those to your sys.path, great fun for mounted profiles) "
"I may be wrong, but as far as i remember \"Global\" in GIL means that it's real global, like one per process, not one per interpreter.\n\nSo you can't embed several python interpreters in one process (running on different threads or cooperative). That's a pain in the ass sometimes."
"I just love doing things like:\n\n    if ( any(a(:,i:j)==b) ) then\n        ! do something\n    endif\n\nwhich in C would require an extra boolean variable and a nested for loop."
"The silicon valley bubble."
"Been using bash for almost 20 years, it never occurred to me to put a redirection before the command."
"http://www.theguardian.com/media-network/partner-zone-infosecurity/snapchat-photos-not-deleted-hidden ?"
"I can see that I didn't noticed that the output should be exactly: \"abcdefghijklmnopqrstuvwxyz\"\n\n\nCorrect version are:\n\n\nprintf \"%s\" (List.fold(fun a x -&gt; a + (string x)) \"\" ['a'..'z'])\n\n\nprintf \"%s\" (['a'..'z'] |&gt; List.map(fun x -&gt; string x) |&gt; List.reduce (+))\n\n\nprintf \"%s\" (System.String [|'a'..'z'|])"
"Yep I remember it from 10 seconds ago when I was reading the article."
"Anyone who has read \"Zen, and the Art of Motorcycle Maintenance\" will find these points familiar. An enjoyable book that can be applied to any subject."
"yawn."
"Well [Sabre](http://en.wikipedia.org/wiki/Sabre_(computer_system) the airline reservation system was written in assembler, then pl/1 and more recently C++. \n\nThe use of cobol was widespread in these sorts of apps too. Fortran not so much, it's niche has always been scientific computing.\n\nI'd quite like a go at fortran again (when I used it last, F77 was considered ultra modern)."
"http://www.dice.com/job/results?caller=basic&amp;q=microsoft\n\n*Maybe.*"
"Most large IT projects have abysmal success rates even in the commercial world.  This is shared by other large projects that involve the common thread of changing an organization's social structure or norms, which includes merge-acquisition (M&amp;A), organizational restructuring and process re-engineering which have typical **failure rates** of greater than 70%-80%!\n\nThe problem is usually too much hierarchal top-down command-and-control without enough bottom-up buy-in.  The result is both lack of communication inherent to a hierarchy and lack of alignment between *the stronger force of social networks and norms* and abstracted command orders.\n\nOften misunderstood is that social structure trumps command power in terms of strength and will.  Organizations can easily sabotage any top-down initiative through passive-aggressive means if not even active means without a lot of coordination or effort.  Without their cooperation, there really is no easy way to assure success.  \n\nBut success also requires enough correctness of action to work as well.  This is where hierarchies, particularly more top-down, command-and-control oriented ones are inherently incapable of high fidelity \"situational intelligence\" and thus can be predicted to issue low quality, high error commands.  This ties in again into getting organization buy-in at the lower levels because this bottle neck can ONLY be remedied by autonomy of action within a bought-in strategic alignment at those levels (i.e. you can't micromanage a large project; you must count on distributed authority doing the right thing at the right time largely autonomously within a more diffuse plan context). \n\nThis is why well-led organizations do NOT actually force down change but they lead and inspire those below to *want* to follow and assure correctness.  This is seldom done in practice, which is why large change projects usually/mostly fail - the above success/failure ratio almost matches the \"natural leadership charisma\" rate in the general population which probably isn't accidental."
"It’s normally the editors and moderators who are doing that additional work, though. *As a rule*, edits to a question or an answer *improve* the text. Not always – and I agree that this case was simply wrong – but those are clearly the exception.\n\nInsulting people who sacrifice their time to improve other peoples’ posts is just immature. Don’t over-generalise from a few jerks."
"[We already did this just last Monday](http://www.reddit.com/r/programming/comments/1u0rpi/the_problem_with_time_timezones_computerphile/)."
"I know some people still working on Fortran at LH Systems and I know that Unisys have some old airline systems that are also Fortran based down in Australia as well as elsewhere.\n\nThe applicability of Fortran to engineering/scientific problem spaces is a \"given\", especially stuff like hydrodynamics, finite elements and so on (yep, lots of big matrices). I always found it interesting that it was in fields that seem at least to be totally different (and more the kinds of thing that PL/I or Cobol were designed for)."
"Wow, the parallel man page has a lot of great examples.  It has the advantage that you can easily capture the output to a file for each url that is safely escaped:\n\n    parallel --res output wget -O - {} ::: https://www.google.com/ http://www.reddit.com/r/random"
"Whose failure was it? The programmers for failing to meet the requirements or management for making unmeetable requirements?"
"That's a separate issue."
"Excellent post.  I would also add to your tl;dr \"Not actually knowing what needs to be done\", which you cover in your first two paragraphs."
"Graphical programming seems like a good idea until you have to debug it.  It introduces many of the same stupidities that are a necessary fact of life in VHDL and ASIC-design needlessly into what could have been some deterministic procedural or functional coding system.  Race conditions, race conditions, EVERYWHERE!"
"I just wish I couldn't crash it quite so often :)"
"Bingo.\n\nThis post and the post by user \"gronkk\" above sum it up nicely."
"Did you already manage to crash 3.8 that quickly? Then please submit a bug."
"Woefully short 'guide' - and an ignorant assessment of ASP.NET (possibly others as well)."
"I suppose feel free to downvote me if this is a silly question, but R is also a (from what I can see) OS replacement to Matlab. \n\nAm I missing something in the above statement? \n\nI suppose my question is, why Octave over R? "
"You know that uncle you have, that lives in Northern Virginia and works with computers for the government, but isn't allowed to talk about what he does?  He changes backup tapes on one of the CIA's PDP-11s."
"I did a similar hustle with the xbox 1's. Those were the days man! \n\n\n"
"R is more a replacement to Stata/SPSS/SAS, not Matlab"
"[deleted]"
"R is a completely different language with a similar purpose. Octave is a different dialect of the same language and has pretty good compatibility with MATLAB. It's not perfect compatibility, but enough that porting code from MATLAB to Octave is extremely easy unless you depend on a library/toolbox that is only available for MATLAB."
"sigh... sometimes opensource projects seem focused on sending people away.\nif the main news of this update is an experimental GUI shouldn't some screenshots of the experimental GUI be on the news update / project homesite? "
"[\"Opps, did I just step over something?\"](http://i.imgur.com/Z5xJrwn.jpg)\n\n--Google"
"R is STATA, Octave is MATLAB."
"Ah, ok. So if you know Matlab, Octave is trivial to pick up. \n\nGotcha. \n\nThat's the answer I was looking for I think.\n"
"I also find it interesting and I'd like to hear about it in /r/technology, just as I'd prefer not to read about new C# features over there."
"Screenshot here: http://www.reddit.com/r/linux/comments/1tvyb2/phoronix_gnu_octave_38_has_a_gui_uses_opengl/ceckdnd"
"What you have then is an RPC (remote procedure call). You're performing an operation, calculation, etc., not manipulating a resource."
"True, you can, but that's not REST. It's anything you want it to be, but rest it isn't.\n"
"Nice! Now all you need are type classes and the language should be ready for production."
"&gt; there aren't too many more people in the world who that effects.\n\n*affects ^(sorry)"
"In fact, something like 80-90% of your MATLAB scripts will execute in Octave with little or no modification."
"&gt; So does it solve any technical problems?\n\nYes, the comment you are responding to mentioned several purely technical advantages: simpler code, smaller code, and implementations of some new algorithms."
"What's the problem with malloc and what do you suggest instead?"
"Hi everybody, this is a program I just wrote that morphs images based on semi-randomly generated sub-programs. I'm really happy with how it's turned out.\n\nIf you're interested, there's a fuller explanation on the page of how it works.\n\nThe default image is small for performance considerations, but you can load your own images in.\n\nIt runs in Chrome and Firefox (the page formatting is a bit off in Firefox, I haven't fixed it yet). Doesn't work in IE, haven't tried other browsers yet.\n\nI think I should also put it somewhere where the source code is easier for other people to look at."
"Guido does not work for google anymore, he works for drop box. Secondly, I think you are vastly underestimating the number of people who use python versus people who use a webbrowser"
"Thanks to the Octave team for releasing this, I hope it makes Octave even more accessible to users and will hopefully be a huge incentive for universities to drop MatLab and replace it with Octave!\n\nHowever...where can I get a Mac OS X bin? The last time I compiled GNU Octave, it was a bitch to get compiled and I ended up installing it from Macports. I was so excited about this release, I downloaded the source and tried to compile it on Mac OS X 10.6.8... but I can't even get past configure!\n\nHere is the error I get: \n\n    ~/src/octave-3.8.0$ ./configure\n    ...\n    checking for a usable sed... configure: error: no usable version of sed found\n    ~/src/octave-3.8.0$ which sed\n    /usr/bin/sed\n\nI love Octave. I would appreciate more support for building it from scratch on a Mac.. the wiki page is mainly about installing it from macports and homebrew. I would even skip compiling from source and use the Macports version, but as of now the latest version available is 3.6.4. \n\nFrom the octave wiki (http://wiki.octave.org/Octave_for_MacOS_X):\n&gt;A reliable App bundle for Octave on Mac OS X is not presently available. The developers would like to be able to provide an App bundle, but need volunteers to support the effort.\n\n\nI would help with this if I could get the damn thing to compile from scratch! Or if not me, surely someone here or on hacker news who is more qualified could do it.. it would be a HUGE boost for the community. IMHO, better support for Mac OS X could tap into its huge userbase and really help adoption take off! \n\n"
"Why?! You don't have to use the ORM to benefit from sqlalchemy. I use the dsl for simple queries and fall back to text() SQL for more complex stuff. Plus, sqlalchemy has useful features like connection pooling and schema reflection. "
"Or why should we use it over Sage? "
"Also the R language is just horrible to look at."
"Next on the roadmap is to drastically improve the JS foreign function interface and make it easy to convert Elm values to JS values and JSON. I think that'll be way higher value for industry users.\n\nI have been meaning to do a write-up on why I have not added type classes to Elm. The short version is that I think there are better ways to do it.\n\nThe longer version: The original idea for type classes was published [in 1988](http://people.csail.mit.edu/dnj/teaching/6898/papers/wadler88.pdf) aiming to solve the particular problem of overloading `(+)` and `(==)` in a coherent way. Since then type classes have been used for lots of more intense things, and the idea has slowly been extended in somewhat haphazard ways. [This post](http://www.haskellforall.com/2012/05/scrap-your-type-classes.html) does a great job describing these issues and shows a way to do \"explicit type classes\" to get around those issues (although without the prettiest naming conventions). Work [in Scala](http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf) and [in Agda](https://lirias.kuleuven.be/bitstream/123456789/304985/1/icfp001-Devriese.pdf) pushes these ideas farther, allowing you to make things implicit again in a general way.\n\nMaking this choice is a big deal. I still have not decided what is best and feel like I need to do more research. The point though is that adding type classes is not a slam dunk feature, and even without them, you can do a decent amount of generic programming, as in [Max's Generic library](http://library.elm-lang.org/catalog/maxsnew-Generic/0.1/)."
"[Direct link to screenshot](http://jordi.platinum.linux.pl/piccies/octave-4.1+-screenshot.png)\n\nRead what they have to say, though."
"only to soulless drones"
"word"
"I think the NSA does a very important job. So I don't have any problems with doing my share to help them."
"No. We're not going to start measuring code by how many tweets it takes to transmit. No way.\n\nWe have Lines of Code or bytes, perfect measurements."
"They were too busy hiding things behind forum posts, plaintext files, source trees, unavailable binaries, complicated setup instructions, and CLI flags.\n\nEDIT: Don't get me wrong, I don't mean to sound unappreciative, but it's frustrating how many open-source projects are only interested in finding more programmers, bug testers, and financial backers, then inevitably come up with the most esoteric and inaccessible forms of distribution and user interaction. They need to start asking for UI and web designers, artists, usability testers, and just general people who are more capable of interacting with other humans. It took the Blender guys what, 10 years to figure that out?"
"It; s not about the amount of people that use the applications written in it, it's about the amount of people that use it and have the capacity to improve the implementation.\n\nAnd like I said, it's like one guy working on Clojure and its first iteration already blew cPython apart"
"The problem with malloc is that it removes control over memory allocation and access patterns. Some use cases (embedded, games, real-time, etc.) either benefit massively from it or downright depends on it to work. (EDIT: And as for a replacement, I suggest the ability to plug in custom alloc/free functions, with the sane default being `malloc`)."
"Simpler+smaller code can also just mean \"does less\". The page specifically states that there is nothing preventing one from implementing the same algorithms with GMP. Although obviously it's nice to have those algorithms, they clearly weren't a fundamental motivation."
"Install `gsed` from MacPorts and then set up an alias to it as sed. "
"Looking for replacement for Matlab with a GUI? Try SciLab :)\n\nhttp://www.scilab.org/"
"How does it remove control over memory allocation? It's sole purpose is to control memory allocation."
"Here's a way to represent actions using REST.\n\nPerhaps if you want to log a user in, you'd do:\n\n    POST /authentication\n\nWhich replies with an \"auth token\", a unique ID to represent the logged-in session. To later log out, you would do:\n\n    DELETE /authentication/ATID\n\nAnother example would be sending an email. Do something like this:\n\n    POST /invoiceemails\n\nYou could also later do this to get information about a previously sent email:\n\n    GET /invoiceemails/IEID\n\nOr perhaps do this to get a list of emails sent out for a specific invoice:\n\n    GET /invoices/IID/invoiceemails"
"My understanding of REST APIs was that you shouldn't have any kind of 'token' or 'session' - and that any authentication information should be provided with every request, since the API itself is supposed to be stateless."
"What about http://www.scilab.org ? It has been mentionned to me by people in Mech Eng as a valid alternative to Matlab. It's open source too."
"It makes a lot more sense if you read the [paper](http://tweetnacl.cr.yp.to/tweetnacl-20131229.pdf).  The whole point of this implementation is that it's meant to be small and compact, and as easy to audit and review for correctness as possible.  There are other [existing implementations of the same library/API by the same author that are much faster](http://nacl.cace-project.eu/), but they are many times the size of this one.\n\nAnd they did actually [post the whole thing to twitter over a series of 100 tweets](https://twitter.com/tweetnacl).  (The [non-obfuscated version is about 800 lines](http://tweetnacl.cr.yp.to/20131229/tweetnacl.c).)  I guess the point was for it to be made part of the public record, and available worldwide outside of the normal channels of source code hosting.  The recent revelations of the frightening capabilities of various government agencies to intercept and modify anything and everything has the whole security world questioning the integrity of everything.  It's a stunt, yes, but after things like [this](https://www.youtube.com/watch?v=vILAlhwUgIU) it seems there is no sufficient amount of paranoia any more.\n\n"
"I was not speaking to C#, I meant that parallel map wasn't well known in Python."
"[deleted]"
"At least you know you're screwed. The app I work on ignored the existence of time zones for years even though we have people across the US using it."
"It said *usable* sed. \n\nThe OS X version does not qualify."
"[deleted]"
"Yeah, I'm not sure why I let it go on that long."
"Is there a good technical reason, or just GNU snobbery?"
"Why does it even need sed to compile? That's just making trouble for people who don't have it."
"Memory allocation *patterns*. Malloc is free to allocate chunks of memory wherever and however its implementation feels like it. Which is fine as a general solution, but fragmentation and cache pollution become real issues in more constrained environments."
"great job!"
"It's a GNU project, no reason for them not to rely on their own tools. GNU tools include far more than the nominal UNIX equivalents. I'm not a GNU fanboy but I was actually quite surprised how limited in functionality some of AIX tools are."
"Probably because it (OSX sed) doesn't support extended regex. "
"One could say the same about Matlab/Octave.  Every non-local function needs its own file?\nComments begin with `%`?  No return statement, just assign to variable names defined in the function header?  Also one-indexing?  Also the function declaration is just a weird order.  `function [output1, output2] = name_of_function(param1, param2, param3)`.  And everything shouldn't be matrix multiplication."
"http://wiki.octave.org/Projects#GUI.2FIDE See the first item... Isn't that the halting problem? Is it the missing semicolon that they're talking about?"
"That would indeed be a good technical reason!"
"Nevermind, we all know the answer to this one.\n\n"
"Yeah that's really not that big of a change from a text editor and a console, is it?"
"I think where type classes really shine is with Edward Kmett's famous [lens](http://hackage.haskell.org/package/lens) library. Here, type classes work so well that other library writers can implement them without any dependencies on the lens package itself! They (along with newtypes) are an incredibly elegant and powerful tool of abstraction.\n\nAs for those explicit type classes? They miss the point almost completely. They don't enable overloading, automatic deriving or clean type inference. It'd be a very big mistake to insist on that technique for Elm, a language that is otherwise extremely beginner-friendly. As for implicits? I'm not a fan unless they can be statically guaranteed (as they are in Agda). Scala's implicits violate the principle of least surprise.\n\nMax's generic library seems nice but it's still tied to lists. What about user-defined collection types?"
"I suppose I shouldn't be surprised that it's considered a lost art these days. But then again, I'm from an era that believes you can't be a truly great programmer unless you can code in assembly language, even if you no longer do so, because that way you understand what the compiler is doing with memory for you."
"Any article about structure packing should really mention [pahole](http://linux.die.net/man/1/pahole)."
"I'll totally agree - the metric here is more of a joke, but it still falls in line with a very important rule of security in this domain: keep the trusted computing base (TCB) small, easy to audit and verify. The code is so tiny it's reasonably possible to hand-verify, for example (you can also use tools to do things like automated theorem proving, showing that certain versions of code are equivalent; e.g. a fast poly1305 implementation is equivalent to the tweetnacl implementation, given reasonable amounts of confidence the tweetnacl version is correct.)\n\nHaving a tiny, 'reasonably-possible-to-verify' implementation is actually pretty useful for a number of reasons.\n\nNB: I personally think TweetNaCl is still a bit of a cheat, because it doesn't support the default `crypto_auth` HMAC-SHA-512-256 interface, so it's not totally complete IMO. (I guess you can just use Poly1305 authenticators instead, but still.)"
"It's more of an IDE, so that's expected."
"Because Sage can be a pain in the arse to setup and run, and Octave provides a much better transition from someone who's used to Matlab than learning how to deal with Python and the tons of libraries bundled together in Sage."
"Don't forget the compilations where it compiles for 15 minutes and then `make` spits out some unhelpful error."
"I'm not sure what cache pollution means but I know that heap fragmentation can be a real issue. If that kind of control over memory is needed then I guess your only option is to write the memory management yourself, isn't it?"
"This is one way of packaging a flask-app, but certainly not the only one. Im planning on a series of blog posts on different ways to deploy including native packages, checkout of source from git and possibly something around configuration management as well. If anyone has a preference then let me know."
"Simpler+smaller can mean \"does less\", yes. But it also can mean it is more compact so it can run in more places, easier to understand so it can get more contributions, and simpler so it has less bugs.\n\nOf course nothing prevents GMP from implementing new algorithms too. But that is the point of the previous paragraph - a smaller and simpler codebase might make it easier to do so, so GMP is at a technical disadvantage.\n"
"[deleted]"
"I guess opinions vary, but although the stuff you named isn't the nicest I still find R to be much more ugly.\n\nBTW the % comments are not too awful if you ask me, it's just a choice of some character(s) that are reserved for a language to indicate a comment.\n\n&gt; everything shouldn't be matrix multiplication.\n\nFor engineers this is one of the best features of the language. It hasn't really failed me anywhere. What's your beef with matrix multiplication? If you want scalar multiplication you can use scalar values."
"FreeMat is also worth checking out. \n\nhttp://freemat.sourceforge.net"
"Everyone is replaceable, disposable, and forgettable in the grand scheme of things. But I think the point is the zen programmer doesn't try to pretend otherwise, which would lead to his disappointment (ie a kind of Buddhist suffering)"
"Yeah. Another thing that I didn't mention (but which is implicit): it takes almost as much time to gather the specs and write these down as to gather the specs and build the whole thing. To write 'correct' specs you have to get the whole thing in your head anyway. \n"
"I believe there is a homebrew recipe for it."
"&gt; Interpret regular expressions as extended (modern) regular expressions rather than basic regular expressions (BRE's).  The re_format(7) manual page fully describes both formats.\n\nfrom the 'man' output. is this not what you're mentioning?"
"Definitely (and offsetof(), plus how it works -- shockingly simple, but many people never bother thinking about the how and why).\n\nMy guess is that he was trying to be really generic about the subject. If that document lives for even 1/4 the current age of C, most such tools are in danger of falling out of relevance, but the raw concept certainly wont. Pahole is *fantastic* when you have access to DWARF data, but many platforms lack that sort of pleasantness - particularly/unfortunately true in some parts of the embedded world where packing is all the more critical.\n\nEdit:   To give a quick idea of how nice pahole can be, here's example output using the code from ESR's article.\n\nstruct foo5 {\n\n    short int                  s;                    /*     0     2 */\n    char                       c;                    /*     2     1 */\n\n    /* Bitfield combined with previous fields */\n\n    int                        flip:1;               /*     0: 7  4 */\n    int                        nybble:4;             /*     0: 3  4 */\n\n    /* XXX 19 bits hole, try to pack */\n\n    int                        septet:7;             /*     4:25  4 */\n\n    /* size: 8, cachelines: 1, members: 5 */\n    /* bit holes: 1, sum bit holes: 19 bits */\n    /* bit_padding: 25 bits */\n    /* last cacheline: 8 bytes */\n};"
"I don't consider the task to be complex at all, but it's a lot to get done in a day. Back-end, front-end, deployment with auto-updates (which I used because I had to fix a couple of bugs after the first release).\n\nNot sure what you mean by painful but regarding emphasis of the \"wrong things\" and your example of the fact that I \"provided a tool for a manual task instead of automating it completely\" - I find that that claim to be absurd if I'm understanding you correctly.\n\nThere's no *practical* way to automate a person making a phone call and talking to another person to collect some data. That's why we have call centers filled with people and not *just computers*. There's also no practical way to automate scraping of *correct* business info from the web without a little bit of human interaction on each scrape.\n\nSo, 1) How exactly do you think you would automate this entire process and 2) what about my MS/Windows tools forced me to \"provide a tool for a manual task instead of automating it completely\"? Even if it were practical to automate the entire process, which it was not. How am I limited or in pain here, relative to your world of Linux? Can you be specific?"
"&gt; He doesn't mention the term M# (\"M sharp\"), but ZDNET heard from its sources that that's what he's describing.\n\nReddit. "
"&gt; They need to start asking for UI and web designers, artists, usability testers, and just general people who are more capable of interacting with other humans. It took the Blender guys what, 10 years to figure that out?\n\nThis!! \n\nthe problem though is how you would make this kind of interaction work in a *unstructured* team such as most OS projects have. When UI and usability folks started asking/demanding for some changes and limitations why would the developers listen/obey? \n\nbut i wish the bug/feature request was somewhat easier/appropriated to UI/UX things. there are so many small things that i usually notice that trying to write them off as bugs or feature requests in most bug/tickets system is a pain in itself, as they are mainly focused on software bugs not UX. In fact, is there some sort of thing as UI/UX feature/feedback system?"
"[deleted]"
"Someone will package it and it will be available through repositories in a week or two.\n\nAlso: If there is something lacking from a project, it's much more helpful to contribute VS complain."
"As in: \"integrated a console and text editor in one window\"?"
"Incorrect. C# was C++++, after C++ (Four ++++ make a #, get it?). F# just followed C#. There's no musical pun/reference. Nothing to do with music whatsoever. "
"There are very few actual government software projects. Almost everything is outsourced to the private sector. Even \"management\" is outsourced to a consultantsy."
"I tried doing UX design on open source projects. It just made me bitter about open source. \n\nYou analyze a project's users and scenarios. You even run user studies. Then you present a prioritization of features and a design proposal... aaaand it's ignored. The OS community largely prides itself on obscure functionality at the expense of common basic tasks. \n\nThe simple should be simple, and the complex should be possible.\n\nEdit: And it doesn't take a designer to realize it's not OK to require users to compile the software"
"[deleted]"
"It's common knowledge in the game hacking/reversing crowd. \"Kids\" out there still know these things :). "
"STM is great for a number of reasons, but IMO it's better to offer a lot of options rather than stick to one. There are a lot of available parallel programming models in Haskell that work for a wide variety of situations.\n\nIf you want things like HPC, certain classes of problems could much more easily benefit from Accelerate (GPU) or Repa (auto-parallel array programming,) for example, and like STM, those are just both libraries! There are also other things like dataflow parallelism, lock-based concurrency, channels, etc. A grab bag like this is quite useful."
"It's not?"
"Outsourcing is the root cause of this in any large organization. The largest organizations are so huge and unmanageable they can effectively outsource to themselves. \n\nThe problem with outsourcing is ownership. The people doing the work, probably don't understand it well, have almost no control over the work, don't care about the work or its success (only getting it done/paid), won't be around for updates, fixes changes. That last one is another key difference between construction projects and software. (Large) Software is never done. And it should never be built with a \"release date\" and expectation that we can, one day, pat ourselves on the back for job well done. "
"If you ever get a chance, you might really enjoy [Shake](https://github.com/ndmitchell/shake) as an alternative to regular `make`, although it is a little heavier to use as you need a Haskell toolchain (sorry :(.) It still retains the same bare-bones aspect of Make, but allows dynamic dependencies and a lot of other things for example, and is pretty fast. (It's more imperative than Make in the average case I find, but again, it's got a lot of upsides. Also since it's a library, you could write some code to help make it more declarative for a lot of tasks.)\n"
"I actually used the naïve implementation a lot as a demonstration of stream calculus in Haskell to some people wanting to get into non strict semantics, I had no idea of the penalty it incurred against the more optimized version.\n\nThis article may also serve as a counter to the claim that it is hard to optimize and reason about performance with non strict semantics. You will still reason about the amount of calculations the runtime has to make in non strict semantics and alternative algoritmhs can heavily reduce that amount as this article points out."
"It needs sed to run [`./configure`](http://en.wikipedia.org/wiki/Configure_script), which is really common and standard. \n\nEvery Unix has `sed` installed or available - I'm pretty sure that if you completed a text-only install of Gentoo or Arch or Ubuntu's minimal server version, they'd all have `sed` installed.\n\nMacs have `sed` installed by default - it's a 90K executable - the problem is that this GNU project expects the GNU version of `sed` to be installed. "
"You haven't looked at Executors, have you?"
"....aaaaaand it's back, if you want to upload a buffer to a modern shader (layout(std140) uniform or generic cbuffer) you have to observe packing rules"
"I think Agda has done it best so far too, and obviously I don't want to choose a crappy alternative. My point is that there are complex trade-offs. The fact that type classes are familiar and have a good reputation does not mean they are the best way. With Max's library, Elm does not have higher-kinded polymorphism yet, which is needed for talking about arbitrary collections.\n\nI don't really want to debate this because I have not actually decided one way or the other, and I am familiar with the arguments. I just wanted to explain the current state of affairs. I can only really focus on one hard problem at a time, so I must prioritize carefully. When I talk to folks in industry, no one asks about the expressiveness of the type system, everyone asks about integrating with existing code bases and how designers fit into the picture. These problems are fairly orthogonal, so it's safe to tackle them separately. I am working really hard to make things nice as quickly as possible, so it's frustrating when strategic prioritization decisions are interpreted as a failure to understand type classes.\n\nedit: I hope I am not sounding rude or combative. I just want to give insight on the thought process and roadmap!"
"Ah, the \"code or STFU\" macho man. What the hell does it matter other than impressing \"hello world\" guys. We've seen where that \"pretty code\" crap leads to and it ain't pretty. \n\nI hope its code is ugly just to weed out the syntax hipsters. "
"This is why I eventually sprang for a personal license for Mathematica. It just works, out of the box."
"I have a kind of related question because I saw something the other day that I've been wondering about:\n\nHere's a mosaic of a bunch of small pictures: http://www.ludumdare.com/compo/2013/12/31/the-2-064-kilogames-of-ld-28-in-wallpapers-and-a-clickable-grid/\n\nHow would you make that mosaic such that it fits a general target picture, e.g. arrange the screen shots so they look at a squint like the Mona Lisa?"
"&gt; Without knowing the encoding you cannot even implement 'ls' correctly (as your tty HAS some encoding).\n\nI can do it trivially, I'd just dump filenames on tty. If it comes out garbled, the user can actually do something.. (Install a font, pipe my output through decoder, rename the file). It's suboptimal, but the alternative is *WORSE*. If your program just throws an exception then your user is really screwed...\n\n\n(And of course, if the filesystem does have a notion of default filename encoding, Id use it at app level)\n\n\n &gt;it wouldn't be a problem for Python to simply declare all filenames are expected to be UTF-8. If someone decides to choose insane things, let them feel the pain and not hurt everyone else.\n\nWhat? I am not doing insane things, it's my users who are doing insane things (like reading old media, how dare they?)\n\nAlso, is not Windows using UTF-16? \n\n&gt; Its one of those silly inherited things from the dark POSIX past that should be nuked. \n\nIt's called backward compatibility... It's a good thing."
"At some point this \"web\" thing made fast go out of fashion."
"I think the title is a bit sensationalist. Structure packing and laying out isn't a lost art, it's just that fewer programmers have to deal with the lower level details now compared to a decade ago.\n\nWhen I joined Symbian back in 2004, that was the first thing I learned (and remember that on ARM misalignment can be punished harshly, unlike x86) and any embedded or systems programmer would be very familiar with this, along with things like efficient ways of laying out data for cache friendliness etc.\n"
"Yes, I never thought of this as lost. It's alive and well among systems programmers -- people working on OS kernels, language runtimes, backend (database/web/cache/search) servers, game programmers...\n\nThe difference is that you no longer need to understand low-level concepts in order to be a good (not great) programmer in a high-level language."
"Yup, [this is how Matlab looks like](http://blogs.mathworks.com/images/desktop/ken_orr_graphical_user_interfaces_are_just_plain_better/matlab_7_6.png)."
"I've used bug reporting systems for UX successfully\n\nDifficulty or inconsistency is a type of bug. Report it as such.\n\n"
"That is not the GUI. [See here.](http://www.reddit.com/r/programming/comments/1u60xs/gnu_octave_free_alternative_to_matlab_releases/ceev4t9)"
"Not just that, but it looks like any general form of parallelism has just been discovered for this author. I expect to see a \"How MapReduce will change computing\" from him next."
"Not really, the left the 360's JTAG open at launch which led to countless compromised consoles. After that was patched for good (damn e-fuses) the scene moved on to putting custom firmware on the DVD drives, which was good for piracy but less interesting technically. Nowadays we have the RGH which blows most 360s wide open"
"So, I'm newish to C#. Is there an easy way to step over these chained statements in VS (2010)? Currently I just decompose them into several assignments, but that seems to be against the intention of these chained statements."
"Gof is in my mind used the wrong way by a lot of people. It describes how to solve problems using programming patterns. But then people started implementing the patterns (not solving anything) and calling them frameworks and that's where thing went bad."
"&gt; Your recommendation would be some worthless functional language?\n\nSo... you're a troll then, good to know.\n\nYou said:\n\n&gt; They really need to bring the analysis and tools into the present.\n\nMy comment asked you how C++ fit this bill.\n\nYou responded with an attack instead.\n\nSo, further confirmation that you're a troll."
"There's also the embedded world where structure packing is still very much alive.\n\nThe article title is kind of annoying to me personally, since I almost always pay attention to the packing of my structures."
"But distributing binaries is so complicated that it is easier to install these twenty cross-linked libraries and change, by hand, few undocumented options in makefile."
"That screenshot is from February. I doubt it's showing the new experimental GUI that is the topic of discussion."
"clang -Wpadded"
"Yep, Scilab rocks!\nIt is quite efficient and since I started using it, I never went back to Matlab. However, one needs to keep in mind that Matlab and Scilab share the same core concepts but the syntax is not 100% identical."
"This is perfect. Thank you!"
"This isn't an OSS problem.  Go to xda, ddwrt, any enthusiast forum.  It's exactly the same.  Reddit now has \"stickies\" which was done because this is sadly such a widespread practice that it is now better to do the wrong thing than the right thing because users are trained a certain way.\n\nI think this happened because the ubiquity of easy to install forums became repositories for information that should have been wikis.\n\nSo now we have forums and subreddits full of people asking the same questions over and over again (some of the most popular subreddits are the Ask*) and rather than the people with knowledge spending time on new information, they are mostly regurgitating."
"You can query the servers and give them a list of phone numbers, and they will answer if any of them belong to users. So they just spammed away with likely numbers."
"Brilliant."
"Ah the downvotes. Friggin hipsters all of you.\n\nhttp://imgur.com/Qy5nlGy"
"&gt; Edit: And it doesn't take a designer to realize it's not OK to require users to compile the software\n\nWhat makes it not OK?  If I can't compile it myself I ain't running it."
"No since it's experimental.  "
"So provide both a binary and the source (which many projects already do). \n\nGetting back to feature prioritization, most will prefer the binary (so make that the easiest to get), and a few will want the source (so it's OK if that takes a couple extra clicks to get)."
"I wonder if fail/succeed is really the measurement. I think of non-software government structures. There's medicare, the military, the DMV, ... Some, like the DMV, are horrible, and yet they stick around forever. Maybe healthcare.gov is the DMV of software. Some are probably decent and serve their purpose. Granted there's no competition which means the people involved take their best stab at it and then it's largely maintained like that until it becomes deprecated for outside reasons. It's not a great system compared to the free market where capital is invested behind certain interests and those that do it best succeed and everyone else goes away. But building Healthcare.gov (for instance) is just one of those things we have to do together, I can't think of how a free market ownership of a product like that would be wise."
"Better Quality: http://www.youtube.com/watch?v=G-TM9ubxKIg\n"
"I actually find one-indexing to be perfect for Matrix-laboratory.  Most of the real-world matrices I see use one-indexing: ie.  Stress tensor: \ns11 s12 s13\n\ns21 s22 s23\n\ns31 s32 s33\n\nI think it's pretty clear Matlab was meant for engineers and prototyping.  I think one-indexing helps that."
"They're still government software projects whether the dev team is in house or contract workers/company. The point of interest is the problem + funding. It's whether spending taxes on a piece of software with a goal produces lower quality software than if that capital was used in the free market. \n\nOr maybe the parent commented isn't bringing capital into this at all. Just whether if the government and a private company were both told to build digital product, which would fail less often. I've worked both government contracts and start-ups and so I think the answer is: the private sector would spend 1/3 as much money, would be twice as likely to fail, but if they fail they'd go away and the employees would scatter, while if the government failed they'd call it a success and move to maintain the product forever on a limited budget."
"So... An IDE?"
"I think Julia with its iJulia gui is amazing. It also does stuff that R can do and is blazing fast."
"&gt; The non-obfuscated version is about 800 lines.\n\n    #define sv static void\n\n*This* counts as *non*-obfuscated these days?"
"Can I ask how many projects you've done this with? I certainly appreciate the input, but I'm really hoping this isn't representative of EVERY open source project."
"It's right at the top of the file, next to the only other macro."
"You seem to be conflating the ideas of requiring compilation and allowing compilation."
"Tip: If you want verbatim formatting, prefix your text with 4 spaces.\n\nLike this:\n\n    s11 s12 s13\n    s21 s22 s23\n    s31 s32 s33\n\nThen you won't even need two new-lines to make a newline."
"Political action is still possible in the US. The levers of power are all there, waiting to be used. But we have to convince enough Americans that this stuff matters. I live in Oregon, and the two Senators who represent this state (Ron Wyden, Jeff Merkley) support meaningful NSA reform. But it won't get done well if we don't collectively hold Congressional feet to the fire."
"&gt; GPL is filled with limitations and should be avoided.\n\nIt all depends on one's perspective. For me, I never want any code that I write to facilitate proprietary software. So I prefer to *release* code under GPL, often even AGPL.\n\nFrom the other end, there's no reason to avoid *using* GPL unless you prefer to facilitate proprietary software."
"[deleted]"
"From the paper:\n\n&gt;   TweetNaCl is not “obfuscated C”: in indented form it is easily human-readable. It does  \n&gt; use two macros and five typedefs, for example to abbreviate for (i = 0;i &lt; n;++i) as  \n&gt; FOR(i,n) and to abbreviate unsigned char as u8, but we believe that these abbreviations  \n&gt; improve readability, and any readers who disagree can easily remove the abbreviations.  \n"
"I know where it is; how do you think I quoted it? The point is that the code is full of function declarations like this:\n\n    sv sel25519(gf p,gf q,int b)\n\nIf that's not poorly-readable code, I don't know what is."
"The exact same thing happened on two projects where I put some serious effort in and had some data to back up my conclusions. Both times it was ignored. For one, my manager agreed to let me work on the job to help the project because we were using it internally. That made us both of us look like idiots.\n\nThese weren't really huge projects like firefox, but they had a decent user base and collection of contributors. The toughest aspect of UX design is realizing the you are not every user. Convincing the developers that they are not every user is the second most difficult challenge."
"The continuous wave device at the end has a scary power rating (1000W), but power dissipates rapidly at a distance. We don't know exactly in which circumstances the CW device is used, so it may be a mistake to assume that random people are necessarily being fried with radiation.\n\nNotwithstanding that, this video was full of information and surprises."
"I guess there is also quite a bit of fear of UX people ruining the UI like they did for Gnome 3.0 which is technically one of the best desktop systems out there but the UX just has far too much visible disturbance for every single basic task from launching an app to switching between running apps, everything you do the whole screen changes rapidly.\n"
"[deleted]"
"That's why people use package management.."
"That's probably POSIX extended Regular Expressions, which are mostly useless.  Generally Perl like Regular Expressions are what people talk about extended regex now.  "
"Having worked at a progressive tech company surrounded by forward thinking people, I can say that there are some great ideas and concepts buried in there.  \n\nBut really, I can't help thinking that these ideas are already prevalent in the West and don't need to be packaged up as Eastern philosophy.  Much of it seemed like common sense, techniques that I had worked out for myself in the early part of my career.\n\nIf a job's worth doing, do it right.  Listen to advice.  Don't get distracted. Etc.  We've all been getting the same advice since school!\n\nWhat I found more useful were the lessons learnt from Japanese production lines, at least this was backed up with practical techniques and systems that could be given a try out in our dev shop.  Focusing on flow through the system rather than being beaten over the head by deadlines - definitely a shift from traditional Western project guidelines.\n\nThe last part of the article seemed more nihilistic than anything else?  We are all insignificant and everything we do is insignificant?  Well why bother programming in the first place?  I may as well jump off a cliff!\n\nThe flaw in the logic there is framing our daily lives in the context of the entire universe.  Well, yes, of course everything we do is insignificant.   But actually, in the frame of my own existence I am pretty special,in fact in that context I am the single most important thing there is.  Husband, father, friend, colleague, etc...  \n\nLike I said, some nice ideas in the article and we should always be on the look out for new ways to improve our approach to work, but I think trying to manipulate your life into a specific framework doesn't seem sensible.  Or much fun.\n\n"
"This exactly! I guess one of the real reasons that GNU Octave lacks is that many people, myself included, simply use Python+NumPY/SciPy it offers everything I need and it's a usable programming language that doesn't hurt my eyes or my mind."
"That's akin to saying that one time, there was a bad developer, so we don't optimize performance anymore."
"Easiest way: Calculate the average colour of each image, and then calculate the average colour of each subdivided square in the picture you want to recreate, and pick the closest match for each. Possibly use some dithering method to improve the result.\n\nSlightly harder: Don't use average colours of the entire pictures, subdivide each image into four or nine or however many areas, and calculate average colours for those, and then match on that.\n\nThe latter should work better if you have *lots* of source images, with a lot of variation."
"The problem is that wikis need to be kept up to date while forum posts are inherently up to date. Forum posts also inherently allow for dissent and controversy while wikis expect a good amount of cooperation. \n\nSomething that provides you the right information inefficiently is better than something that provides you the wrong information efficiently."
"Thanks for the feedback.\n\nFor Gnome, do you mean that you would like to see the gconftool requirement removed? If so, this PR may solve that issue:\nhttps://github.com/cknadler/vim-anywhere/issues/14\n\nAs for via a terminal emulator, there is an open issue regarding this. Definitely planned in the future.\n\nhttps://github.com/cknadler/vim-anywhere/issues/5 "
"In principle you're right, however a bad developer will just stop getting code in when there is some reviewing of changes. On the other hand the developers that most often lead open source projects need to blindly trust their UI designers because it's not their area of expertise."
"Without domain knowledge, the whole file is perfectly unreadable. However, they seem to be following conventions from the literature and when you are familiar with these things it is nice to have the short, familiar names.\n\nThere are no comments here. You are expected to already know what they are trying to do."
"It's NOT a lost art in the embedded world of microcontrollers"
"Exactly.  Python/scipy makes so much more sense coming from previous experience in C/Java type languages.  \n\nGranted R and octave/matlab have their uses."
"I work for a large engineering company and when the few of us that use Matlab lost our licenses (no one wanted to pay for it anymore) we switched to Scilab."
"It's cited at the bottom of the submitted page, but not to be missed on this topic is the [paper by Melissa E. O’Neill: The Genuine Sieve of Eratosthenes](http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf). It's a fairly easy read if you just skim the complexity analysis. I admit to just nodding my head that it looked reasonable and not verifying any of it."
"&gt; good code comes from collaboration and code reviews\n\nIn my experience, code reviews are a form of torture resulting in design-by-committee code. The people who are overly enthusiastic about code reviews tend to be the same people who are overly enthusiastic about the *one-true-programming-method-of-the-year*. Those people use code reviews to continuously demand that I use their favorite technique, and the result is shitty code.\n\nYour comments lead me to believe you'd be one of those people.\n\nA good code reviewer will attempt to find bugs, and will point out any surprises waiting to bite the development team. A good reviewer will only occasionally point out stylistic issues, or comment on how they'd solve the same problem with their favorite method.\n\nA bad code reviewer will leave me 10+ bugs on stylistic syntax issues, and demand that I rewrite my simple, easy to read 30 line module as a difficult to debug, difficult to understand 100 line monstrosity in the image of monstrosities they've already written. To be more \"consistent\".\n\nIn short, good programmers like good code reviewers keep a focus on what's practical and important."
"[deleted]"
"Is there an alternative for OS X? Since it's part of elfutils it's not availaible (trough OS X has DWARF)"
"From my perspective, if I was your manager, I would rather you fork the project and use your own variation internally, and then bring your changes to the main branch and have them decide if they'd like to implement any of those changes or not. \n\nEither way, I'm still hoping that those two projects are outliers, and that other OSS developers are more open to new ideas."
"Just because that explanation exists, doesn't mean it's not *also* a musical reference. Names don't have single, unambiguous explanations."
"I hope they make it somewhat language agnostic so the Python community can benefit. "
"Did you ever consider contacting the developer(s) beforehand and asking them if such a change would be welcome before putting in a serious amount of effort?"
"Gnome 3.0 is absolute BS. They want to mold your behavior by removing features. And I'd be fine with it if they just tried to promote different ways of interaction, but instead they remove stuff that people came to rely on, stuff that came from paid ux design studies. All I want in Linux DE is something close to Windows 7/8 UI, and some comes DEs come close but nobody is quite there, Gnome 3 is unfortunately the farthest. \n\nEDIT: Gnome 3 is even worse than KDE which used to be an example of why you should let blind people design UX.  While KDE is just ugly, Gnome 3 is dysfunctional. "
"Ah yes, autotools. Should have known..."
"Lost art? Not in the C++ community. Not by a mile."
"Alignment does matter on x86 too. Your compiler is probably shielding you from the worst effects."
"Mono is open source, just like them. Was there a point to that list?"
"Looks like matlab"
"[deleted]"
"&gt; And it doesn't take a designer to realize it's not OK to require users to compile the software\n\nThe lack of precompiled binaries is without a doubt the single biggest issue I take with open source software, especially with open source game engines. I have been keeping an eye out for a good and simple open source 3D game engine and [Polycode](http://www.polycode.org/) looks promising but with no precompiled binaries and no way for me to compile it at the moment I've been unable to try it out."
"Everyone knows the actual free alternative to Matlab is [Python](http://www.python.org/) with [scipy](http://www.scipy.org/) and its relatives."
"Yup. That's what I did.\n\n"
"[deleted]"
