"A couple of comments:\n\n* The text editor is called Notepad++, not Notepad+.\n\n* You go into a great amount of detail about how the DOCTYPE tag has to be typed exactly that way, but then beginning at 1:54 in the video all of your DOCTYPE tags are wrong."
"Yup. Easy answer :)!"
"Is the CRC check in the XML file? Do you know if it's the standard CRC check or something custom? Just calculate a new CRC for the new file if so."
"The major things are always the ones I miss... I swear\nThanks!"
"It looks like your user id doesn't have sufficient user access rights to create a database on the MySQL server. \n\nYou will need to configure your user id to have admin rights, or at least the right to create database objects, on the MySQL server."
"how do I do that "
"The `Rect` curly brace stuff is [aggregate initialization](http://en.cppreference.com/w/cpp/language/aggregate_initialization), correct?\n"
"&gt;I hear that having a lot of self made projects can kind of deter the conversation away from algorithms and more on my own projects, is this true?\n\nIts a way of showing that you can program. Something that not everyone applying for the job can do.\n"
"Forgive me if I'm clueless, but wouldn't you need to use the Android SDK or Xcode to be native?"
"I honestly think that they're both very different in terms of development style. Web dev (front-end, as in HTML/CSS/JS) is all about the Document Object Model (DOM) and native programming has no web view (unless you request one to display a web page, PDF, etc). The similarities between the two lie in Object Oriented Programming — but there's not much more than that, in my opinion.\n\nI do believe certain skills will and can cross over. MVC patterns tend to be the same, even in different languages. Using objects (JSON via rest) is similar (native side you may have to serialize/deserialize). Understanding XYZ coordinate systems is a lot like absolute positioning in CSS. \n\nSo in my opinion, it's not too ambitious, but don't be surprised if you get your wires crossed! Learning Java and JavaScript will help your marketability undoubtedly—I know guys who write their own REST in Java and catch it on the JS side, and they are highly valued in the market for being able to cross the stack.\n\nAlso—Appcelerator supports Tizen and HTML5 apps, but I can't vouch for them as I've never worked on either via Appcelerator."
"I'm in a similar position. I know how to program but I lack a solid CS foundation, I cant wait."
"Very good summary.  The important (missing) part to remember is that you should write code so that it **easy to read**.  By using the correct type of loop, you can more rapidly understand the intent of the code."
"I would suggest Googling *MySQL admin rights*."
"&gt; It would seem that your problem is the exact opposite of mine\n\nAnd what would that be? \n\nHe asked for a small os written in C, it would have to be open source how else would you come across such a thing? Find a floppy in your local CS department? This is a project that's been solved hundreds of times before. I did also provide instructions on how to write your own. "
"You don't remember all the functions. You look them up in the FM. Keep the FM bookmarked, search the FM, check the index, RTFM in the bathroom, etc. If something in the FM is confusing, that's when to resort to Google to find a tutorial or the answer to a question. But, really, just keep R-ingTFM and just keep coding. The more you code, the more your knowledge sticks in your head.\n"
"Correct."
"Thanks. I'll definitely check this out. Will probably look up that MIT course if I ever have time.\n\nI feel like OS development (along with compilers) is a huge thing I'm missing in my understand. Since my degree was in EE, I didn't take any of those specific programming roles. Wanted to see what I missed out on! "
"I wish my OS class was taught this way. We had to reenact most of those algorithms on paper. With diagrams and in code. "
"Thanks for the advice. Is it correct to assume that people ask algorithms a lot because thats what uni's teach? they are asking questions based on their education since they have no projects to speak of"
"[deleted]"
"No idea."
"You're pretty much spot on I'd say. "
"On what OS?"
"If you know what process you're killing (explorer.exe, for example), then it might be simpler just to use system() and run a command specific to the OS you're writing the program for. http://www.cplusplus.com/reference/cstdlib/system/\n\nhttp://www.tech-recipes.com/rx/446/xp_kill_windows_process_command_line_taskkill/\n\n    system(\"taskkill /f explorer.exe\");"
"A couple incarnations ago, I xeroxed stuff and kept handwritten notes in a 3-ring binder. This was known as an engineer's notebook. I still have the binder I started over 30 years ago stashed away somewhere. Oh, and last year I found my dad's old notebook. Keeping a notebook has a long tradition. But nowadays I bookmark online docs, download zipped docs for when I'm not online, write my own notes in a few text files, and either bookmark or download various interesting articles. I guess the drawback to bookmarking online stuff and storing stuff on a computer is, there will no longer be a legacy of interesting notebooks. :-(\n"
"My first job was writing unit tests. I hated it, and consequently moved towards jobs where unit tests weren't needed. That doesn't mean it's not important, it's just boring and tedious. If someone comes up with a better testing paradigm, I'd like to know about it."
"Yes I know what process I am killing, in this case would be google chome"
"Another way you can get in if the front door is locked and you don't have a key.\n\nNormally the visitor doesn't realize there is a back door, as they only see the front entrance. The third party exploits it by rummaging around the back of the store looking for the back door.\n"
"Well, there's a lot of things there that are really important concepts that you will need to know, so if you want to be a successful computer scientist, I suggest you work your ass off for good marks here.\n\nAnyway, practice, practice, practice. Concepts like recursion tend to be confusing for beginners, and practice is hands down the ultimate way to be come comfortable with recursion. You can't just ask for explanation after explanation (although there's a wealth of such explanations online). At some point of time you'll have to draw the line and try to apply recursion yourself.\n\nI used recursion in the above example (since it was one of the first things you listed that I commonly see beginners struggle with), but this applies to many concepts that seem confusing at first.\n\nYou want to use your three weeks to get a head start? Start reading your text and practice as much as you can.\n\nI'm assuming from your text and description that this class will be C and something object orientated. The basics of C should be very easy to pick up with an understanding of the basics of Java. C is a pretty simple programming language. However, that simplicity means you'll have to get used to working with lower level code.\n\nThe fact you will be going over OOP concepts like inheritance, however, strikes me as unusual. Most first year classes that I've seen don't use multiple languages. Just to be sure, you're definitely using a C textbook? Because everything you listed could be done with Java and it strikes me as an unusual choice to use C and Java in the same course.\n\nAnyway, I sound like a broken record by now, but I'm not kidding: **practice**! Let me tell you from experience that practice will be the absolute number one way to make programming concepts *stick*."
"All right, thanks anyways!"
"Why a video? I'm not a very good judge because I'm hardly a beginner, but it seems to me there's a few minutes of content being stretched out into 6 something minutes of video. You don't even take advantage of how videos can demonstrate small details, since you're just reading static slides.\n\nSerious question: are you an expert in HTML? Because I don't really think it's a good idea to try teaching concepts to others if you're not very well versed in them. There's just too many other people who are better qualified."
"Lmao, well I feel like an idiot. Hahahaha. My b. "
"Build an app. Seriously if you're going to do a year long program, you would be better off churning out a working product. There is not point to a challenge for the sake of challenge when you can challenge yourself to make something relevant."
"The [FAQ](http://www.reddit.com/r/learnprogramming/wiki/faq#toc_1) should tell you how to get started."
"Downvoted to hell and back. *Don't use a debugger*?? What on earth are you talking about?\n\nStepping through the code to understand what's happening is the most *basic* of things you should be doing."
"Well, a bit. But knowledge of data structures and algorithms is extremely important in many programs.\n\nSuppose the employer wants you to implement the forward and back buttons on a web browser. What data structure would you use to store data needed for these buttons? What algorithm can you use to get the data from this data structure (such as when we click on the back button)?\n\nOr for another example, what if the employer expects you to sort a very large file? How can we do this without using too much memory?\n\nIt's common for employers to ask questions pertaining to whatever it is they do, including what data structures and algorithms you would apply to real world problems.\n\nIt's also generally preferable to have efficient programs (this matters more in real world programs than in most school assignments). You should know how to be able to compare algorithms and choose which would work best. For example, what might be the best sorting algorithm if we can expect that our data is almost always already sorted?"
"Then for you I'll repeat myself: only use a debugger as a last resort. If you honestly think that you need a tool to understand what's happening in your code, I think you should go back to basics (which have nothing to do with tools)."
"don't kill explorer.exe ... It took me forever to get it back"
"Well, you've noticed that you need to learn SQL. I don't understand why you're having difficulty finding beginners tutorials, though. There's tons of tutorials available for SQL. [Here's one that works fine](http://www.sqlcourse.com/index.html).\n\nLearn SQL first, then look up using PHP with SQL. [Here's the reference page](http://www.php.net/manual/en/book.mysqli.php). This is not a tutorial, and thus why you need to learn SQL first. In particular, you'll want to look at the [mysqli class](http://www.php.net/manual/en/class.mysqli.php) (the connection to the database), the [mysqli_stmt class](http://www.php.net/manual/en/class.mysqli-stmt.php) (an actual SQL statement), and the [mysqli_result class](http://www.php.net/manual/en/class.mysqli-result.php) (the result set returned by executing a statement which selects rows). The pages have examples, but teach how to use the library, not how to use SQL.\n\nSo work on those two things first. Throw together some basic sites that use a database. Once you're comfortable with using databases, you can start making your site. You'll likely need to implement a user account system, so should look into using [PHP sessions](http://www.php.net/manual/en/features.sessions.php) and [web security](http://programmers.stackexchange.com/a/46760) (side note: this link contains resources for everything you should know about web design, not just security).\n\nAs a side note, I wouldn't store large videos in the database directly, but would place them at some unique path and store this path in the database.\n\nThere's a lot of work here, but lots of potential for learning. Have fun.\n\n**Side note**: There's a few flavours of SQL with small differences between them. The tutorial I linked is *mostly* software independent, but there may be some differences. Nothing you won't be able to resolve with some Google-fu, though. [Here's the syntax section of the MySQL reference](https://dev.mysql.com/doc/refman/5.6/en/sql-syntax.html)."
"Yes, swing is a good choice. I don't recommend using the WYSIWYG editors. Get down and dirty. Get used to using layout managers."
"My name, along with some other names, is on a software patent. We created a web app for meteorologists 13-14 years ago, back when CSS was just becoming useful, Microsoft had just invented XMLHttpRequest, the term AJAX had not yet been coined, and the term web app had not yet been coined. Languages? The front end is a combination of HTML, CSS, and Javascript, although strictly speaking, HTML and CSS are not programming languages. The back end is Perl, bash scripts, and a huge pile of C++, Fortran, and C. Actually, we had written all the C++, Fortrash, and C in earlier years for creating weather data graphics and animations. But it was 13-14 years ago that we put together the continually-updating file-based database of every type of weather data available in the U.S. converted to JPEGs and transparent PNGs with a browser interface for selecting, displaying, animating, etc. So, the bash, Perl, HTML, CSS, and JS were the newer work.\n\nThat's old work, but it probably gives you an idea of the tech jargon you'll encounter.\n"
"awesome!, thanks for the help! "
"This! The internet is pretty clogged up with newbie/tinkerer produced tutorials. They are basically a case of the blind attempting to teach other blind people how to see."
"Yes, The boot part is a little assembly, and all the other part is in C.\nI have learned much from http://wiki.osdev.org/Main_Page,\nyou can find lot from here: http://wiki.osdev.org/Projects\nalso search OS in github will give you some projects."
"I have a desire to build a little OS during in school, but just finish it after graduation. I have some struggle during the process, but it's worth because I learned much, which can not got from books. even this is a so crude one."
"Yes, because donors get excited about buildings, not web sites.\n"
"&gt; While I understand what you were probably trying to get at here\n\nWhat do you think I was trying to get at?\n\n&gt; ... I don't think it's useful to frame it as \"debuggers are tools of last resort\", which is ridiculous.\n\nThat's exactly what I meant, though. I even inserted the extra \"ever\". :)\n\nIt's nice you learned to work with one and are happy to use it. However I honestly believe you will be a better and faster programmer if you avoid using a debugger. Not because debugging \"by hand\" is doing it the hard way and that makes you more of a programmer, but because source code is easier to understand than object code (that's why we invented programming languages) and (almost always) holds the source of the problem.\n\nI'm sure there are situations in which using a debugger will lead you to find the problem faster and easier than by hand. I just think on average, you will find the cause of your problem faster and with less effort without using a debugger.\n\nActually, I'm surprised this is so controversial. Everyone I've met in real life and know to be a good programmer, feels the same way I do (about debuggers being a last resort at least, I don't know whether they share my justification). Maybe it's a university thing?"
"That is just the way he comunicate, Zed is a cool guy."
"I registered several months ago. I've been very surprised by the lack of emails leading up to it."
" ... About the same, but with more penguins?"
"How do you expect \"open-source\" to affect the appearance of an application ?"
"Cool!\nI'm also interested in doing this sort of thing, can ask if you found any good sources when you were doing it?"
"Yes.  But only for the UI assembly and final compilation.\n\nIf you are using Mono, you will do most of your coding in Xamarin Studio.  Xcode and Android IDE will be used mainly for final packaging."
"It doesn't start for another month, but this free course on [coursera] (https://www.coursera.org/course/algs4partI) might interest you"
"GOOD SAMARITAN!"
"thanks I already signed up for both. But I am still at the question, which tutorial route? mit..berkley..coursera...I am certainly not doing all of them since they are 1 hour lectures at 25+, just not enough time T_T. I think I may just lean towards coursera because the mit video seem boring and crappy quality, hurts my eyes literally "
"Until you port the code to a different compiler...\n"
"\n* this is awesome, http://www.jamesmolloy.co.uk/tutorial_html/ \n* and you can find lots from http://wiki.osdev.org/Main_Page"
"After you fix `Fchar = str[0]` and `Lchar = str[-1]`, your solution will still be buggy. [Do you know why?](http://docs.python.org/3/library/stdtypes.html#str.replace)\n"
"I can't say much about the others because I haven't taken classes from them yet. I know coursera is very simple to un-enroll from classes if you decide it is not for you. In the past I have taken coursera classes on Python. What really made me like the class is the large enrollment. The class had a very active forum on topics being covered in the class. Also students grade each others work. I thought that it was great to get a little positive feedback/constructive criticism, and see the way that other people approached the problems. I would say to at least try the class even if you aren't sure if you are going to stick with it. You don't really have much to lose in trying it out haha"
"So are early Basic, early Fortran, and DOS Batch. Thank your stars for [structured programming](https://en.wikipedia.org/wiki/Structured_programming).\n"
"Thanks!"
"Are you drunk?"
"&gt; 53 long\n\nSurely char is enough for 53 :-)\n"
"It's probably at least as fast as converting everything to JSON..."
"[NOBODY expects the Spanish Inquisition!](http://people.csail.mit.edu/paulfitz/spanish/script.html)"
"I deliberately wrote it so that I didn't have to reverse the condition as that's not always possible or desirable."
"If you want to get a head start on it go to www.cs50.net  All of the lectures and problem sets are up there.  The short videos are probably the most worthwhile investment of time besides the actual work on the problem sets."
"definitely something custom. not in the xml itself. how do I calculate a new CRC?"
"I followed along with CS50 this fall and I have to say that it was one of the best courses I've ever taken and a phenomenal introduction to computer science. "
"&gt;  A point in the right direction.\n\nIf the syllabus hasn't already pointed you towards what you're going to need to learn, then you're going to have real problems."
"Maybe split each number into a list of digits, and apply the processes as you loop through the digits. Maybe use a function or two from the [`itertools` module](http://docs.python.org/3/library/itertools.html).\n"
"Most compilers for a language detect the same errors and issue similar warnings for *most* cases. These days, gcc and Clang pretty much recognize the same issues, though they are reported differently. javac and gcj are practically identical for warnings.\n\nAnd the sorts for issues you'd see between compilers? Expect *worse* issues if you hop between cpython, pypy, and jython."
"I mentioned this in other threads, but I feel it needs mentioning. I know microsoft gets a lot of hate around the web and probably rightly so when there are free alternatives available, however I am a current student in internet application development and have done quite a bit of work with database driven websites using MS SQL Server and IIS so it's all I really have experience with. We learned the hard way first and honestly it would take me hours and hours to make a simple website with a database.\n\nHaving said that I recently had a course in asp.net MVC. I could literally throw a site like you want up in a matter of 15-20 minutes now. With MVC you just create a class with properties, we did it in C#, and then you do a couple of clicks and boom EVERYTHING is wired up for you. The database is created, all the html fields are wired to them and it all just works. \n\nI know there are alternatives to asp MVC out there and I'm sure there is something that uses php and mysql, so you just have to find it. I also think this is what Ruby on Rails is all about.\n\nSo before you start programming all this stuff by hand, look into rapid application development tools. It will make your life a lot easier."
"Actually I'm taking two matlab classes next semester! I'll check Cody out!"
"There's also /r/javahelp, but /r/learnprogramming is more active.\n"
"Or click share and check the \"Start at:\" checkbox. "
"Never used swing myself but the equivalent tools for windows forms with C# are pretty nice. I don't think using a designer like that is cheating- sometimes it's the best tool for the job. You will do well to learn and understand what it's doing under the hood though. Usually they just generate code that you can then go and read."
"&gt; but because source code is easier to understand than object code \n\nOhhh, you think debuggers only work with object code?\n\nYou're one of today's lucky 10,000 pal. Allow me to introduce you to [symbolic debugging.](http://www.seas.upenn.edu/cets/answers/gcc.html)\n\nMost debuggers (like the gcc example above) can read 'debugging symbols' that are created at compile time (usually a compiler feature). The debugger reads these symbols and then has the entire source code right at your fingertips, ready for you to do whatever you need.\n\nGuaranteed to be your favorite debugging tool."
"If you go into more complicated phrases with a noob. They are not going to understand what you are saying. So you need to dumb it down."
"I'm glad to you've set your goals high, but because of that, you've got a long way to go. If you're just starting out, definitely checkout the FAQ like Syrak said. You can find all sorts of great resources online if you know where to look, and a lot of them are free, so use it to your advantage, but if you're looking for a more personal approach, university classes will give you a lot more feedback then online resources. If you really enjoy computing, and programming like most people here do, it shouldn't be too difficult to stick with it, especially getting started at such an early age. Good luck!"
"Tried [Project Euler](https://projecteuler.net/)?"
"Never heard of it until now, but it looks like just what I'm looking for. Thanks!"
"This is the correct answer."
"I remember spending a few days chasing down bizarre bugs after a C++ code base was ported from various whatever compilers on Unix boxen to a MSWin compiler. It turned out, the non-MS compilers gave `%` higher precedence than `*` and `/`, and the code relied on this nonstandard \"feature.\" Or maybe it was the other way around. Anyway, this was a long time ago, but unit tests would have easily revealed the problem.\n"
"I just tried this. It was easy to get back by launching the task manager. "
"What have you books and other learning resources have you used so far? Have you tried building some of your own projects or just the assigned exercise projects?\n"
"True, but that doesn't mean the *teacher* should be dumb. Not that *you* are dumb, it's just that there are already too many online lessons taught by people who either don't fully understand their subject matter or don't know how to teach.\n"
"any way though ewidthoff or anybody to not have to o ths manually"
"There's a contest called ICPC that has a bunch of algorithm-based problems. There's a big collection of them [here](http://uva.onlinejudge.org/) along with an automated tester."
"I'll do a lot more research for my next video. TY\n-Happy New Year"
"Mathematical problems aren't really C++'s strong point.  Take a look at various data structures and practice implementing those; you will on the one hand learn about pointers and resource management, and on the other about templates and exception safety."
"I have an idea. \n\nI've always found that I am more motivated to learn something if there is a point to it. e.g. Though I'm quite good at Maths, I've never found it fun to learn any new concept, because I can't see the point. However when I starting programming, the first task was to draw a house, in Processing(Java) using lines, circles etc. I **needed** maths to do that and I was *eagerly* learning about midpoint formulas, tan, sin etc. \n\nMy point is that there are plenty of plenty of *standard* tutorials out there and they are helpful, but again...for most things there isn't really a **really strong point** for learning it. \n\nWhat you could do: well after picking a programming language, set a goal, something you will do. e.g. first week you'll draw a house and you introduce lots of concepts and how people can use them, 2nd week you'll create a paint program or a tick-tack-toe. \n\nI think this way people will be more engaged as there is something concrete behind the learning, a more compelling reason to learn. For some people there doesn't need be a 'compelling reason', they just fall in love with it and will devour countless books on programming with no problem at all, but the average Joe is not that passionate, he might need that 'compelling reason'. \n\n**Plus** you are teaching them about *approaches*. Lots of people have a good handle on concepts, but they don't know how to tackle a problem. You know when 2 or more things can be used to achieve something, but you're not sure which one is better? Or how you can build something with as few lines of code as possible, so that the computer runs it faster. You can show them that! \n\nSo, there's my 2 cents. "
"&gt; Would you like to see youtube videos of me teaching a concept and then coding it?\n\nOh please don't.  Start with a medium where you have immediate feedback both from people who are learning from you and people more experienced than you; if you are still at the \"I want to become a programmer\" stage, the latter are particularly important.  (I'd tell you that you're obviously nowhere near experienced enough to teach and so simply shouldn't, but that would be hypocritical.)  This subreddit, StackOverflow, and various IRC channels (`#learnprogramming` on Freenode, for example) are all good places, though each has its own quirks."
"I , too , am very excited..\n\nI am creating a subreddit for this year's CS50x.. Will you guys join me?\n\nEDIT: Here is the subreddit : http://www.reddit.com/r/CS50x2014/\nCan anyone help me make it more usable? Please reply if you can help me"
"I've only ever mapped it to : . I can't see myself ever going back -- it's just so much easier not having to press Shift whenever I want to enter a command."
"I didn't remember enrolling, but I got an email a few days ago so I'll be there. "
"If you are thinking about C, then you get a file descriptor which refers to a socket. Read and write don't work on all types of sockets, but you have sendto and recvfrom and other functions as well."
"thank you everyone for posting, do people do like mentor stuff on skype or other things?,\n\nOr which IDE do you guys use do you guys use netbeans or Eclipse or both? "
"I guess I understand that I guess I am kinda little nervous well not nervous but almost kinda intmidated by the IDE's etc\n\nBut I understand would you guys recommend any beginner PDF's like basic ones?"
"Well how about if I give them like what they should be able to understand/do at the end of the video?\nEDIT: Or whatever medium I use."
"Thank you for your response and I will just keep reading"
"I didn't really see the need to switch either. [Then I watched this](http://net.tutsplus.com/articles/news/perfect-workflow-in-sublime-text-free-course/) and it helped me switch. I've gotten spoiled by parts of Sublime text and haven't been able to switch away. Multi-line editing, syntax completion, and snippets are part of my workflow now."
"Haven't tried, but a quick google search shows something called [Emmet LiveStyle](http://livestyle.emmet.io/). Might be worth a look!"
"I mean that you yourself program Pong / Breakout, for example. Then you will at least have a small understanding of game programming."
"I gotta be honest. You have no programming skills but you expect to be able to create a site like ebay (but with bitcoins). I don't think you quite grasp the difficulty of doing so. \n\nAt any rate, learn HTML, CSS, JS, a server side language of your choice (PHP, Python, etc), and SQL and you have a start. You'd also need to focus heavily on web security.\n\nSeriously, don't do this. Use an existing e-commerce framework, many which already support bitcoin."
"I'll take some time to go through it, but I have seen NetTuts rave about Sublime before. Now in Notepad++ I already have multiple cursors and syntax completion... I'm not currently using snippets but I know N++ can do that do. Then whenever I try to start with SublimeText, I just can't get oriented and things seem less straightforward than NP++ (do I always have to edit this flat file to change settings?). But I'd still try to stick with it if it wasn't nagware until you pay $$ for it.\r\rSo I'll go through the course and see how it guides persons trying to switch, but can you briefly tell me what it does that Notepad++ doesn't that's the primary motivator? "
"I think this question is more about how to propagate ideas and concepts to the general public than really education (because those two goals are very difficult to do simultaneously -- the best education is one-to-one rather than one-to-many), so my answer would be to write fiction incorporating computer science concepts, much as Asimov did for science, and lately Shades of Gray for S&amp;M."
"Having users hate using your product is a kind of unit test result, or it can be if you implement a unit test for it."
"Can't see how it would work. \n\nYou probably know that 90% one learns from these tutorials by trying to replicate what the guy is doing on the video in his computer and in between you got some theory and tips. Without the guy doing something on the screen it would be just a *theory*. \n\nAnd I can't see how you'd be able to do what I suggest at the end of the video without it being *theory*, just a bunch of stuff that you run through as you go down a list. Does not seem very engaging to me and I can see people pausing the video every time you get to that point, skipping it altogether...or not watching it altogether.\n\nEDIT: I want to say though, that this is your project, your thing and you can't really base it off the comments of a stranger on reddit. I'm just offering my opinion, in no way am I an expert on the matter.  "
"I'm interested in writing an ebook based on weird beginner programming questions. This doesn't strike me as a very weird question, but maybe something about the assumptions are weird. What do you imagine a web server is or what it does?"
"The main pull for me was the multi-line editing. Helped me when I was doing minor changes to a very lengthy table. I downloaded it, hit 4 keys and was on my way to mass editing the entire file. Turned a 2 hour job into about 5 minutes of work. Now, N++ probably could have done the same, however I didn't have to try very hard or look far to get sublime text to work. I also like the quick glance on the right, shows what text looks like throughout the document (Helps find functions quickly, or things like missing data).\nDownside, the settings are in a flatfile. Upside, I only modified it once I think, the defaults have served me well. \n\nAlso, it doesn't nag too often. Just enough to be a reminder, not an annoyance and as soon as I can cough up the dough to pay for it, I will. It's just that coding is TECHNICALLY in my job description, but I do code a bit on the side and for small projects at work."
"If you have a for loop controlled by int i, and inside the loop you modify i... \n\nLet's just say it doesn't end well when someone reads your code. \n\nControl variable modification should be used in while loops, not for loops. "
"    while(fgets(buf, sizeof(buf), stdin)) {\n        ...\n    }\n\nis equivalent to:\n\n    for(;fgets(buf, sizeof(buf), stdin);)\n    {\n         // ...\n    }\n\nwhich is what I think OP was getting at.\n\nOf course the while is easier to read, but both are quite readable.\n"
"I plan to make a site just as a personal project to gain experience/knowledge, not as a business venture or anything serious. \n\n&gt;  learn HTML, CSS, JS, a server side language of your choice (PHP, Python, etc), and SQL \n\nI know html basics and python (Did lpthw and understood all of it if not most of it).\n Awesome! Thanks for the reply"
"\nMIT is undoutably the best and most complete set of lectures. They have a newer set of lectures of better quality [here](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/). "
"I imagine a web server simply replies to requests from the clients but I don't understand what else it does (caching? https/ssl different protocols? what are the differences between webservers or does it even matter for what is a test/learning project for me?)"
"Cheers!"
"OK thanks. Sounds like Notepad++ will serve me just fine then since it has both those features."
"If you are using python, the SimpleHTTPServer.py that is included might be a good and small example to start out with. This might sound like odd advice, but instead of an ebay clone, you might try creating an internet radio streamer first to help wrap head around what a webserver can do besides just putting up pages."
"I disagree with using C as a pedagogical language, and suspect if you tried tackling these subjects in a different language such as python before enrolling in this course, you'll find the concepts a little easier to grasp."
"it's an abstraction on top of all the hardware, OS, and protocol levels.  The Wikipedia page has some good info:\n\nhttp://wikipedia.org/wiki/Network_socket\n"
"I believe diaspora is open source, and one that Zuckerberg ironically contributed money to. You can take a look at that to see what it looks like. There's a sad story behind the creator, though."
"thanks alot!\n\n"
"awesome!"
"alright.."
"Well, you can make a for loop do this, but it feels unnatural and dirty. Here's some Javascript:\n\n    var total = 0\n    for (var x = true; x != false; x = confirm(total + \": Do you want to keep running?\")) {\n        total++;\n    }\n\n"
"[deleted]"
"Only one way to find out."
"I think you have a very distorted view of debuggers.  I don't know where this \"source code vs object code\" stuff is coming from -- when I use a debugger I step through the program at a source level, and I inspect and modify variables at the source level.  You don't need to know anything about assembly language to use a debugger, although it helps.  If you're referring to the fact that compiler optimizations can cause the generated code to not resemble what was written, that can be worked around by building the affected code at -O1, -O0, or the new -Og.\n\nI can't count the number of questions that I see posted here that can be trivially answered in 10 seconds just by running the code in a debugger and seeing which line of code caused the fault.  I see new programmers going to great pains to find that information, like littering their code with print statements left and right in an attempt to suss out where it's faulting, in a long and tedious process of elimination.  It kills me to see people waste hours doing that when a debugger can tell them that information in two seconds without having to modify anything.  Don't get me wrong, printf-debugging has its place, but this is most certainly not it.\n\n\n\n"
"I am trying out [Mega Project List](https://github.com/karan/Projects) to expand my programming skills."
"Watched part of the course lectures via iTunesU, and enjoyed what I watched. Signed up to actually take part in the course. Thank you for leading me back to this!"
"I'm not saying this to discourage you, but it looks like you're in way over your head.\n\nStart small, try to create some static site at first to grasp the front-end stuff like HTML, CSS, JS. Only then you should move to server side programming (Python, PHP, Ruby etc.) and SQL. While it's not absolutely necessary to learn them in that order, you definitely shouldn't try to learn everything at the same time. Any e-commerce site will probably require quite a lot more than what I listed, but you have to start somewhere.\n\nProject like this will require a lot of time and knowledge, even when using existing solutions (either some framework or CMS with good e-commerce capabilities). You have to learn to walk before you can run."
"It's not about need.  You don't *need* a map or GPS to get around in an unfamiliar city; you could just wander around until you eventually find your destination.\n\nThis idea that you can work out every problem by deep thought and meditation and sheer will is nonsense.  There wouldn't be any bugs if you could do that, because you wouldn't have made the mistake that you made.  Bugs in code you wrote are, by definition, errors in your thinking, so it seems rather silly to apply pure thought to a problem stemming from deficiencies in your mental model.  When I'm faced with a bug, I want to know what's actually happening, not what I think is happening, because the latter is almost always wrong.\n\nAnd what if it's not \"your\" code?  When confronted with a crash in somebody else's program that's 10k lines, I'm certainly not going to sit down and read every line.  I'm going to use a debugger before ever even looking at the code.\n"
"Learning another language will only complicate things.  If you can't complete the assignments on /r/dailyprogammer, then that tells me you have difficulty with algorithm development and basic problem solving.  Learning c++ won't help this.  I suggest focusing on your weaknesses and trying the easy challenges on /r/dailyprogrammer.  If you can't quite figure those out, then ask for help here.  If you still cant solve those problems, then you either don't quite understand python/programming, or you just aren't cut out to be a programmer.  But I believe anyone with average intelligence can become a programmer with patience and perserverence.  Good luck!"
"&gt; that's not always possible or desirable.\n\nSay what?  There is no condition that can't be inverted simply by adding `!` in front of it, possibly with an extra pair parentheses."
"Get a rubber duck... \n\nSeriously, it was the single best tool to get me used to walking through my code. I suggest it to most of the students I lab assist. Telling that duck, or whatever other fluffy critter is hanging around, exactly what each piece of your code is doing in your native tongue makes it click. \n\nAs well as the other suggestions already posted. You can't really just adopt one tool and hope it works. It's pretty damn hard to nail something together using a screwdriver. "
"Make something interactive!\n\nInteractive teaching is infinitely better than just reading a blog or watching a video.\n\nI think we've only begun to scratch the surface of what's possible via interactive websites where people learn lessons and then try the exercises themselves.\n\nFor example, for any given exercise there are probably lots of common mistakes that lots of beginners make. Wouldn't it be cool if the system could automatically detect those errors and respond with targeted feedback?\n"
"[ Learn Python the Hard Way](http://learnpythonthehardway.org/book/).\n\nOne of the best tutorials on the net."
"Overall I like it! Here are the first few things that jump out at me:\n\n* In your comment, say \"Time\" instead of \"Amount of ms\", and put \"ms\" into the variable name, like placeholderFullyReadableMs. (Don't use Hungarian notation for variables in general, but indicating the *units* of a numerical variable name is usually a good idea.)\n* Personally I think jQuery is redundant and just artificially limits the audience. Nothing wrong with using jQuery for your own site, but not everyone likes it, so many people won't use your library.\n* Instead of \"var self = this\", learn to use \"bind\". All modern browsers support it natively in JavaScript, but if you want your code to work in older versions of IE without bind built-in, it's easy to implement.\n* You don't seem to be using this.timeout - maybe just ignore the return value?\n* I think this one line below is too much for a one-liner. Use a helper function with a clear name, split it up into more lines of code with more clear variables. Would you be able to understand this line immediately if you came back to it 6 months from now, or would you have to puzzle it out?\n\n\n        this.counter = !this.isDeleting ? (this.counter+1 &lt; text.length) ? this.counter+1 : text.length : (this.counter-1 &gt; 0) ? this.counter-1 : 0;\n"
"&gt; I'm not really sure where start exactly\n\nAs in most similar cases you'd better try to start with google.\n\nFind some tutorial and try it (for example you may find [official tutorial](http://docs.python.org/3.3/tutorial/) at official site). After first few first steps you will have some basic info which will help you to choose where to move next.\n\nAt least when asking anything at forums it would be good to tell what you have already tried, which skills you have etc."
"If you plan on continuing to work with databases it would prove useful in the long run to look into and learn about database design http://en.m.wikipedia.org/wiki/Database_design"
"This so much. I've had multiple industry professionals recommend this book to get started and after starting to work through it, I\"d definitely recommend it as a starting point. I'm only halfway through the lessons and it's helped me quite a bit. This book won't teach you absolutely everything but it will give a good starting point."
"For loops are while loops. If you separate the components of a for loop (initialisation, condition, after instruction), you have the same elements of a while loop. There are the two different expressions because of convention but the computer will turn the for into a while."
"[deleted]"
"I use eclipse and hate it. I'm sure I'd hate netbeans too. Just pick one. This is not a make-or-break decision."
"Thanks. Btw, if a person wants to create a JavaScript code, what windows program would he use? if you know what I mean"
"in command-line:\n\n    Cscript.exe \"C:\\someDirectory\\myJavaScript.js\"\n\nI think what you really want to do, though, is run your javascript in a browser like Chrome or Firefox. To do that, either reference a javascript in an `.html` file with `&lt;script&gt;` tags and open that file with your browser, or use an integrated development environment (IDE) like http://jsfiddle.net/ or http://ideone.com/"
"Thank you.\nThe issue is this:\nImagine you are in a bar, take a picture, share it with your contacts, and localize in a map where you are."
"thanks for that!"
"I did, but with no luck :("
"Hey man, i pmed you on reddit are you able to answer ? :)"
"How in the world would i learn how things work ? It seems very complicated, but i'm very interested in this ;)"
"I've been using [codeacademy](http://www.codecademy.com/) and would definitely recommend it. I think it does a great job at explaining the concepts and the functions of python. The only problem, imo, is that there's not a lot of thinking involved about how to get the solution. By that I mean, it'll say \"use x to y\", but never \"get y using any means you've learnt so far\", so I've been meaning to get on something like /r/dailyprogrammer as well. But apart from that I really like codeacademy.\n\nThere's also resources listed in /r/learnpython or you could ask this again there if you like."
"I'm not planning to sell it, but as you know I did release the source code, so those who have what it takes can make one."
"Yeah, i'm really interested in making my own ;) How much did you spend totally ?"
"Udacity - Introduction to Computer Science"
"less than $50, a little bit more if you have to buy everything from scratch."
"Netbeans is pretty, but it's annoying. The default settings, which can be changed, are bad. For example, tabs are actually 4 spaces rather than one long indent. If I want spaces, I can use the space bar. There are also some annoying things that can't even be changed like when I wanted code completion on but parameter completion off. Eclipse is just much easier to tweak to my liking, and its default settings are great. \n\nThe only thing I like about Netbeans is that settings are global and I don't have to re-do settings when I start a new project."
"I use ST for about a year now and it's one perfect IDE for web development. It is NICE which is a major feature for me. And it's text prediction works well with dynamic languages like Javascript and Ruby.\n\nAlso not to mention it's additional packages for everything you need."
"How did you learn to make such things ?"
"On a Unix system, a file descriptor is a generic handle for a resource.  A fd can refer to a file, directory, device, pipe, fifo, socket, as well as some platform-specific interfaces, like epoll, futex, kqueue, and so on.\n\nOn Win32, the situation is a little murkier.  Everything still uses handles, but there are different kinds of handles rather than having one unifying type as with Unix.\n\nIn either case, a socket is just an abstraction used to represent some end-point.  It's a handle to a resource that is managed for you by the operating system kernel.\n"
"Did you follow any tutorials to make things like this ? or did you just learn it ?"
"[An Introduction to Interactive Programming in Python](https://www.coursera.org/course/interactivepython)\n\nThere are some great video tutorials and exercises here that may provide you a good foundation from which to begin. :)\n\nJust because the course was last year some time doesn't mean you can't sign up and run through the material independently."
"I came up with everything and built it by myself. I learned most background basics(programming, digital / analog circuit design, prototyping etc) because of my major, but learned microcontroller by myself, mainly because it has a lot in common with what I'm studying, and arduino is very easy to code to begin with."
"This guy has a very organized list of Python video tutorials.\n\nhttp://www.youtube.com/playlist?list=PL0213E8DC3AA8E21B"
"Well, i'm really amazed i wish i had the skills to build this thing :) can you recommend any tutorials to get started ?"
"there are a lot of arduino beginner's tutorials on the internet, however, if the only reason that you take up electronics is to make this, you would have a hard time since there're a lot of technical basis to cover. Just don't expect to do it in a week or two, it takes time."
"Which language? "
"I went through the course a few months back by myself (not through edX since it was already too late to join). Having also taken a few other MOOCs and average college classes, I can say that it was __the__ best experience among them all. I would heartily recommend this course to anyone."
"Wow, stupid of me, sorry :P\nJavascript "
"= is used for assignment. You assign a value to a variable.\n\n`var myVariable = 3;`\n\n== is used for comparison, but without checking variable types (integer, string, etc.).\n\n`\"123\" == 123` returns true.\n\n=== is used for comparison, but it also checks the variables' types!\n\n`\"123\" === 123` returns false!"
"I just wanna compliment your code. It is really, really nice."
"Well, i'm not only trying to learn it because of that, but that's one of the reasons, aswell as i would love to make my own kind of creations :)"
"So what have you mapped `.` to? `.` is an incredibly useful key, it repeats your last insert."
"OK, so I'll never forget what = does as it's unique, but I'm still a little confused as to what the difference between == and === is.\nIf === includes variables, would that mean;     \n**var myAge = 17;\nmyAge === 17**         is correct?"
"Thanks."
"I would recommend going until about exercise 45 or so. After that, take a break, reinforce what you've learned with other books or something like codecademy. LPTHW becomes very frustrating after exercise 40. "
"= is assignment. You take value at right side and put it into left side.\n\n    var a = 17;\n    a = 16;\n    a = a + 5;\n\n== and === are comparation operators. They differ in one thing. === does exact comparation (including types). == tries to compare values, transforming types.\n\n15 == \"15\" is true, but 15 === \"15\" is false, because type of 15 is number and type of \"15\" is string, but you can cast 15 to \"15\", which is equal to \"15\", so == yields true."
"have a try on topcoder."
"Anything"
"Wikipedia probably has a bunch of great examples."
"[MITx: 6.00.1x Introduction to Computer Science and Programming](https://courses.edx.org/courses/MITx/6.00.1x/3T2013/courseware/Week_0\n/)\n\nand\n\n[Introduction to Computer Science from Udacity](https://www.udacity.com/course/cs101)\n\nThese are for Python and can be used individually at any time."
"Easy to read is almost always better. If you use a compiled language the compiler will probavly optimize the hell out if the loop anyway, so readability is the most important part."
"thank you for the reply I will start working on what I need to thank you for everything."
"It doesn't teach *all* the GoF design patterns, but *Head First Design Patterns* is all Java code."
"[This site seems interesting](https://pythonmonk.com/)\n\nWish I could have used it myself, might wanna check it out.\n\n"
"Came here to say this. This course was awesome, and it's all learning by doing challenging practical things."
"PHP, Python, Java, Ruby (on rails) just to name the most popular ones. Add a MySQL server to that and you can do anything. Wanna do cool realtime multi-user functionalities? Try Node.js"
"If you're wanting controls beyond the traditional button, I highly recommend you start from scratch and put together your own library of GUI elements you can modify/extend depending on your needs.  It might seem like a lot to learn, but in the long run you will be able to get what you want incredibly fast since you know how things are actually pieced together.\n\nIf you're wanting this for Euler problems, I'm going to assume you know how to solve them.  A GUI on top of that would be flair for bonus points and that's why you should put together your own library from scratch."
"This is really hard to quantify, but if there's any one way I'd say the number of public repositories per language on github.\n\nOn Github, the top 3 languages are, in order:\n\n1. Javascript\n2. Ruby\n3. Java\n\n"
"I'm pretty familiar with Bukkit plugins.  The reason 12 zombies might be spawning in is that in the current version of Minecraft, zombies spawn more zombies when you hit them.\n\nI'm assuming you have other code, i.e. a main plugin class with onLoad() functions and the like.  If not, that is something you'll need.\n\nKeep in mind that variables created in a method are destroyed after that methods completes.  You'd have to create an array to put sZombie in with the current way you're using.  It would be easier to add\n\nif(event.getEntity().getSpawnReason() == SPAWN_NATURALY){do.something()}\n\ninstead of checking sZombie.  You can get rid of the EntitySpawnEvent.\n\nReply if you need anymore help.  I don't I explained this the best, and it could be a bit confusing.\n\nEDIT: Submitted too early.  Finished post."
"I think this is incredibly cool. Very good job. I love D, I think it's the language of the future!"
"I'm not really sure what you're talking about or why you felt the need for a condescending attitude. I took a 30 hour course in mvc and felt that it is well-suited for many database-driven applications. Why would an experienced programmer spend 30 hours developing a site when he can us RAD tools and build it in 5?"
"This is a bit of a silly question, because programming languages generally have their own field of applications. So asking about the most popular programming language without a field of application is quite meaningless.\n\nBut, if you're interested in some educated guess and useless data, you can look up statistics about frequency on Github, for example. [This website](http://langpop.corger.nl/) looks nice. It says Javascript, PHP, Java, Python and C measured by lines of code changed."
"That is the worst thing to learn. Even worser thing would be to guide someone to learn it."
"It's a [regular expression](http://en.wikipedia.org/wiki/Regular_expression) based replacement request. It finds every character not contained in the `[^ ]` brackets and replaces it with `''`, i.e. nothing."
"Has anyone here tried the [CS50 certificate option](https://www.extension.harvard.edu/cs50-certificate)? It costs $350, but you get access to teaching assistants in discussion forums and virtual office hours with David Malan himself.\n\n$350 is a fair bit of money, but it could be worth it if you have the time to devote to the class."
"I only clicked because \"pickup python\" sounds like a new meme."
"Awesome, that was a huge help. But what about the:\n\n\n      /... +/g\nparts"
"Yeah, it's a shame it couldn't be something like c#. Unfortunately, I don't make the rules :/ On the plus side we also learn about different types of software/hardware and their applications, as well as html/CSS so the course isn't a total waste of time. "
"[Functional programming](http://en.wikipedia.org/wiki/Functional_programming) on wikipedia:\n\n&gt;  Functional programming emphasizes functions that produce results that depend only on their inputs and not on the program state - i.e. pure mathematical functions. \n\nThis aspect (above) of functional programming is hard to achieve if side effects and mutable variables are allowed.\n\n(btw it's not the value that is mutable)"
"You are trying to use C strings in C++. While it works, you shouldn't do that. You're also using a C array when you should be using a vector. What are you using to learn C++? I warn you, most resources out there that claim to teach you C++ are utter garbage, and it's worth buying a decent book.\n\nIt looks like you want something like this:\n\n     std::string description1 = \"tasty\";\n     std::string description2 = \"salty\";\n     \n     std::vector&lt;std::string&gt; bacon(2); // possibly bacon(2,\"\") if C++11\n     bacon[0] = description1;\n     bacon[1] = description2;\n\nThe std::vector&lt;std::string&gt; is an array which handles memory automatically for you: you shouldn't be doing it manually unless you know that it can't be done with a vector. You can access its elements using the [] operator. Remember to put #include &lt;vector&gt; and #include &lt;string&gt; at the top of the file. http://en.cppreference.com/w/cpp/container/vector\n\nI didn't test the code before posting.\n\nedit: Are you trying to concatenate the strings? I.e do you want bacon to be a string that says \"tasty salty\"? In that case, you need a stringstream. Remember to #include &lt;sstream&gt;\n\n     std::stringstream ss;\n     ss &lt;&lt; description1 &lt;&lt; \" \" &lt;&lt; description2;\n     std::string bacon = ss.str();"
"That's what I feared so thank you for clearing it up for me.  I've looked at Cisco courses that offer certs and they all cost a little over $3k which is nuts.  Thank you for saving me money!"
"It may seem logical, but it's not. You declare `bacon` as an array of characters, but it's not: it's an array of arrays of characters.\n\nYou can do this in two ways, both of which are a bad idea:\n\n    char description1[] = \"tasty\";\n    char description2[] = \"salty\";\n\n    char * bacon1[] = {description1, description2};\n    char bacon2[][6] = {\"tasty\", \"salty\"};\n\nThe first works in general, because you're not creating an array of arrays, but an array of pointers. The second works accidentally here because both your strings happen to be 6 characters long.\n\nMy advice:\n\n- Read up on what arrays are;\n- Once you understand the concept of arrays and have practised a little, favour using `std::array` and `std::vector`.\n- Do not use c-strings in C++: use `std::string`."
"Hmm... you've given me a lot to think about.  I also looked into college programs and couldn't help but notice there are a lot of affordable options online!  Georgia Tech offers a masters degree program for only $7k!  So I'll have to research more.\n\nIn the mean time, I'm keeping up the lessons on codeacademy.org and also learnpythonthehardway.org"
"thanks this helps a little bit I'm coming from an OOP background and I'm trying to learn F# I've heard rumors that learning a Functional programming language can help you with math. so this whole functional thing is new to me"
"You can do some neat things with PHP and it's a pretty fun and easy language to learn."
"You just gotta practice. You can't do well unless you practice outside of homework and school projects. "
"So you know the concepts but are bad at the actual coding and don't want to practice coding to get better? Well there is no magic switch to make you a better coder especially for your school. You could try using different language(like a higher level one where you don't have to handle memory) but ultimately if you don't want to program now(since you need to motivate yourself so much to practice) you have to ask yourself why are you in school for programming? "
"I also heard something about it not being updated for Xcode 5, is this true, and does it matter?"
"Everything from the first slash to the `g` is part of the regex literal, which is being passed as the first parameter to `replace()`.  See [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) for a good summary.  The stuff inside the brackets is a character class formed by negating a range of characters.  The `+` indicates that it's to match one or more characters from the preceding class, and the `g` flag means search globally: find every match of the regular expression in the string and replace each one with the empty string.\n\n"
"[deleted]"
"Well if you're interested in Game Development you should just do a few games in your spare time, this will teach you a lot.\n\nIf you don't want to start a game from scratch you could also look into working on Open Source games, there's certainly a bunch [on this list](http://en.wikipedia.org/wiki/List_of_open-source_video_games) that are written in C++.\n"
"This one is mine:\n\nhttp://ProgramArcadeGames.com\n\nFree textbook on-line, lots of videos, example code, worksheet problems, sample tests, and it is all oriented around the concept of making 80's style video games."
"About style:\n\n    let f = fun x y z -&gt; ...\n\nis identical to\n\n    let f x y z = ...\n\n---\n\nIn your function `root2`, the value of x never changes, so you can get rid of the first argument."
"Very helpful, thanks."
"Thanks a lot - just a kind of advice I've looked for. With these changes code looks much nicer!"
"Nice thanks for the list. Is rails a framework?"
"1. This is a strategy that has worked for me with a number of languages I am not good at: implement the entire project first in an easier language, then port it over.  The PLEAC project is a great resource for learning how to do the same thing in multiple languages.\n\n2. Pick small projects, something you can do in a day or even an hour. Much harder to get frustrated."
"[deleted]"
"[deleted]"
"Yes Ruby on Rails is a Framework."
"http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\n\nUnfortunately, I pretty much taught myself without a decent book, but I don't recommend it. So I can't personally recommend any of these for beginning. Maybe someone else can?"
"Please show more code. These two lines out of context are not very helpful. How are the threadIDs assigned? What happens in the loop?"
"What do i and q even represent?  Why are you setting q to q + obj.NO_OF_THREADS?  That doesn't even change according to the code you have showed us.  What is threadID supposed to be, the id of the first thread???  Do you have any other code, or is this 2 lines all you have?"
"I doubt it will magically help you with Math."
"If you're using C++11, just initialize the vector directly:\n\n    std::vector&lt;std::string&gt; bacon { description1, description2 };\n\nOr better, get rid of those temporary lvalues entirely:\n\n    std::vector&lt;std::string&gt; bacon { \"tasty\", \"salty\" };\n\n"
"I knew there was something I was missing about initializing the vector in C++11, thanks!"
"Ahh okay"
"Challenge: using only python, take the contents of one text file and put all of it into a new text file.\n\nListen OP, everyone is requesting that you spend your time reading but I disagree with that. You can read or you can do and the engineer in you is screaming for you to do. I hope you accept my challenge. If you get stuck or just want the code I will provide it just let me know :)"
"There's already a sub at www.reddit.com/r/CS50."
"This is the reason why I never took an AS in Computing, I did a BTEC instead. The BTEC courses were more comprehensive and much more in depth about programming languages (C#, mainly)"
"Thanks man.  This is the kind of answer I was looking for.  Hope you made some money off that patent, sounds pretty sweet."
"Then why are you doing C++?"
"I'm glad you'll rot in jail you disgusting cunt"
"&gt; I've been sick on and off for months\n\nDepending on the cause you can get tests moved around."
"Not really."
" It's a bit of everything. All those things you mentioned, they all help you develop as a programmer. You get an idea for a project, start working on it, realise you don't know something, and then research it. And now you know one more thing.\n Remember to keep getting off of your comfort zone."
"&gt; I started taking classes ... a few years ago\n\nI do not want discourage you, but nowadays few years are sufficient to become middle (or even senior) developer from noob. Perhaps you should keep practicing more thoroughly.\n\n&gt; I toyed with the idea of going on to a 4-year school\n\nWell, I fear it will not help you as much as you wish if courses did not.\n\nI suppose you need instead concentrate on making yourself a good self-learner. It is most common way into programming career today thanks to tons of materials on internet.\n\n&gt; Self-driven programming projects?\n\nI believe it would be the best option for you if you can concentrate on this way enough...\n\nIt is hard to tell more not knowing your skills more precisely."
"If you looked at any of the resources you'd see something like LPTHW or code academy isn't \"just learn by exclusively reading\". And to solve problems you have to, y'know, read about things eventually..."
"It's been mentioned but pleeeease visit [/r/learnpython](http://www.reddit.com/r/learnpython).  It's a great subreddit with lots of helpful people."
"[deleted]"
"Using an IDE won't automatically make you dumber or less able to program well.  I would argue that if you become dependent on an IDE (i.e. you cannot write functioning code without one), then you might have an issue, but choosing to use one for convenience should not reflect poorly on your skills.\n\nFor the most part, using an IDE is a matter of personal choice.  I typically do not use them because I prefer a simple environment over a complex system of menus and tabstrips, but if an IDE helps you get the job done, by all means don't give it up because some dude on the internet claims they make you dumber."
"read the sidebar"
"I could not program for work without Resharper. "
"It seems like a strange choice, to say the least; perhaps you have a good reason, but it is certainly not apparent."
"IDEs are all right. And in professional programming nowadays it is hard to do without them - we need to rely on them for refactoring code, for traversing it etc. Projects are just too big to surf them with a simple editors.\n\nHowever, for pure beginners I always recommend spend significant time on working without IDEs.\n\nAs professional developer I keep on working partly out of IDEs (and other cool tools) - i.e. I often switch to simpler editors for some smaller or temporary projects, utils etc."
"They're training wheels that create an artificial environment that prevents a real world programming development cycle. Real programmers have a problem, they do some research, and create a solution.\n\nThe problem with sites like codecademy and \"learn python by punching yourself in the nuts\" is that you are subjecting yourself to the opinions of another's opinion on what you need to know when you could develop yourself more organically by doing.\n\nThanks for the down vote by the way. Screw me, right? I'm just a professional programmer, what do I know?"
"While starting, it's important to learn the code, not the IDE.\n\nFor real work though... well, you should know how to use a hammer, but that shouldn't stop you from using a nail gun."
"Ouch. Can you still use the forum without it? Other students can generally help you out so I wouldn't worry about office hours and seems expensive for a cert considering it was free last time. Than again it was easily better than all of my uni courses which were about $500 so it's good value if u think of it that way."
"Here's a few off the top of my head:\n\n*Golfer*: You implemented your solution in the least amount of characters.\n\n*Communicator*: Your code is clear and well commented.\n\n*Stack Smasher*: You implemented your solution using recursion.\n\n*Hacker*: You used and abused the rules of the language to implement your solution in a novel way.\n\n\n"
"I apologize for the incomplete code and incomplete question:\n\nI created the threads by extending the thread class and included a constructor to include my object(obJ) and threadID(which is 0 to # of threads - 1) The threadIDs and the number of threads are determined in the main method. The ids are initialized through a for loop. My main method works correctly in terms of generating the matricies, prompting the threads to start, and printing the result.\n\nThe issue is in the extended thread class below:\n\n     public class testing1 extends Thread {\n            Matrix obj;\n            int threadID;\n    \t\n      public testing1(Matrix obj, int threadID) {\n\t\tthis.obj = obj;\n\t\tthis.threadID = threadID;\n\t}\n\t\nAfter reviewing the code further I realized that I do not need \"q\". The code will be fine with only \"i\" since \"i\" and \"q\" were doing the same thing. \"i\" represents the Matrix's column which is the entry point for the thread.  \n\nSo the issue is that the line works when threadID = 0 but not when threadID = 1 since thread_1 enters in column 1 instead of column 2.\n\n    public void run() {\n       int i, j, k;\n             for ( i = threadID ; i &lt; threadID + 2 ; i + )\n               for ( j = 0; j &lt; 4; j++)\n                   for ( k = 0; k &lt; 4; k++)\n                        obj.array3[i][j] += obj.array1[i][k] * obj.array2[k][j];\n\n"
"Clearly you're also a moron since OP is trying to learn fundamentals too. But yeah, screw you. Oh and your ego too."
"I forgot to add that the i = i + i.obj.NO_OF_THREADS to let the next thread jump to the appropriate column. "
"A good IDE can do (among other things):\n\n  1. Provide autocompletion (intellisense)\n  2. Refactor\n  3. Integrate with version control\n  4. Automate the build process\n  5. Provide text manipulation tools (find and replace, etc)\n  6. Real-time error detection\n  7. Code generation (optional)\n\nThese are usually good things, it helps you write code faster, work with your team more easily, and helps prevent errors while building.\n\nUnfortunately, it's a double-edged sword.  These tools have to be very generalized to work for everyone's use case.  Sometimes the automated build system in Visual Studio just doesn't work for your multi-language project.  Maybe you came across a weird situation where you needed to do some really complicated version control management.  In these cases, you've been conditioned to rely on a button instead of learning how these tools work \"under the hood\".\n\nWorking in a terminal most of the time can help you to learn the inner workings of your workflow tools, but has the disadvantage of being more difficult to learn and use.\n\nI believe it is important to know how to use both.  There are times when the power of an IDE can help you write your project much faster, and times when it's better to know how to use a shell to get the job done.  A lot of companies these days prefer IDE experience anyway, so being able to say that you know VS and Emacs is better than being able to say that you only know one."
"I'm reading the latest edition to pick up objc and in my opinion it's not detailed enough for a complete beginner. However, It does teach enough to get by. Second Ed does cover Xcode 5."
"It depends.\n\nDo you care about nitty gritty details and pointer magic and XORs and whatnot?\n\nIDE's and autocompletion and such aren't really for you.\n\nDo you care about top-down, abstract solutions via intricate design patterns, where you're accessing public/protected members left and right? IDE's are the solution.\n\nCompare a C NDIS driver (my first job)'s implementation to a C# MVC project with Visual Studio and ReSharper.\n\nApples and oranges."
"May I ask why? I have looked at it but the curriculum seems all over the place."
"Do the kids like these?"
"&gt; He states that using an IDE will turn you stupid...This is pretty hard for me to blindly accept.\n\nIt's like you didn't even read the note right below it. :|\n\n&gt; As a professional C# programmer, I can hardly even imagine programming without intellisense and the works. It just saves so much time...\n\nA) As a professional programmer, you aren't learning the language for the first time.\nB) As someone who's reading a beginner C book, you aren't doing professional programming.\nC) As a professional programmer, these claims about IDEs making you so much more productive always sound fishy to me.\n\n&gt; Also, I am not doubting that this is true, because I am having loads of fun learning emacs and using the terminal to compile code. I just want to avoid believing something simply because A guy with a book believes it.\n\nThen believe it because you just said you don't doubt it?\n\n&gt; Is this guy correct in what he says?\n\nYes.\n\n&gt; Have I been turned stupid for being brought up in an IDE world?\n\nIf you can't use the compiler and other tools without the IDE, then yes, that's what he means.  If you never read the API and you never learn about the language because you can get by just by using intellisense, then yes.\n\n&gt; What benefits does typing out functions and variables by hand have?\n\nYou remember the methods and don't need intellisense to tell you what they are and you're easily able to code/compile/etc. when you're not on your own computer/using your favorite setup.\n\nThe fact that you are choosing to not differentiate between learning a language and using it professionally makes your whole post look idiotic."
"If you're learning, not using IDE might be better in the long run (have to analyze your code and possible mistakes more which in turn develops your skills faster). However for any serious work, IDE will help you tremendously (for example, refactoring)."
"Will that Linux gazette tutorial still apply to the raspberry pi? It boots off of an SD card."
"[deleted]"
"Thanks! My experience with D so far has been really enjoyable. "
"This is immensely silly, so I suppose the students might like it. Some of these might only be relevant to C and C++. Some of these might not be relevant to an intro class at all.\n\nThe Best Kind of Achievement: You interpreted some obviously incorrect assignment instructions literally instead of asking for clarification. \n\nBlessing and a Curse (C / C++): Your code invokes undefined behavior, runs fine anyway\n\nWhere we're going we won't need loops: while, for, etc. forbidden. goto, switch, or recursion ok.\n\nSocialite: Put your assignment up on github (or similar) after the due date\n\nShort Circuit Shocker: Misuse short circuit evaluation to do something complex with a single conditional expression. \n\nLibrarian: Use a language or library feature that wasn't covered in class\n\nMaster of the Dark Arts (C / C++): use inline assembly to do something nontrivial.\n\nA place for every error, and every error in it's place: handle every possible exception that could be thrown in your code.\n\nFreedom fighter (C / C++): write code that allocates memory, but doesn't have any memory leaks.\n\nPretty Fly for a RAII guy (C++ only): Write code that allocates memory on the heap, but only calls new in constructors (if at all), and delete in destructors.\n\netc. etc. "
"Wait, the CS50x certificate used to be free?\n\nIf that's the case, perhaps I should have completed the class sooner..."
"&gt; Freedom fighter (C / C++): write code that allocates memory, but doesn't have any memory leaks.\n\nNice, I like that one."
"It's not considered the most beginner friendly language. I started with Java, others recommend Python. If you have an actual concrete reason to learn C++ though, go for it. It's not worth learning Java first if what you want is to program in C++."
"Interesting. The aspects of the IDE that I am most disapointed to give up for C are intellisense, syntax highlighting, and real time error detection.\n\nI am enjoying building my programs manually through terminal, so that's a good reason to not use an IDE."
"Hmm, it looks like the link for the [walkthrough for problem set 0](https://cs50.harvard.edu/psets/0) is broken, but I found another version of it on [Youtube](https://www.youtube.com/watch?v=ICE4Y2JPt_4)."
"There is a whole subset of education right now studying how gamification improves attention, classroom participation, etc etc etc.  It's not unique to schools; look at web sites like CodeAcademy or Code School.  Both of them give you points and badges of achievement for completing lessons.  Khan Academy has points and achievement badges up the wazoo.\n\nWhich is a roundabout way to say: *shrug*.  I didn't use them last year. I'm incorporating them this year just for fun. If they fail (and the most likely way they'll fail is that it will be just too much hassle to update for all students, unfortunately) then I won't do them next year."
"Do you think it would be worth it to do an online course along side it? or just not even bother with the book."
"No. But I did learn something about IDEs when I started to learn Java. Not all IDEs are created equally. You could argue that there are bad and good IDEs. All I know is when I first started to use NetBeans, I was cursing and cussing constantly because it was nowhere as good as Visual Studio.\n\nIronically, my go to language is now Java, not a huge difference from C# I know. But I think an IDE has to draw a good line between doing everything for you and forcing you to know the language."
"&gt;  Do you get like a file descriptor or something that you can read and write to? \n\nYes, it's both.  You just said you know you can transfer data with it, so why are you asking if you can read and write with it?"
"Well the class has only run once but it was free. I presume its a physical certificate though? Last time was only digital."
"I hadn't thought about that. \n\nQuestion:\n\nWhy is autocompletion and intellisense bad if i wan't to care about the nitty gritty details? I can completely see why automatic project building would get in the way, but how does having a context menu pop up when I'm accessing a member of an object interrupt anthing?\n\nGenuine question btw. I appreciate your input. "
"I like \"Golfer\" in theory though that establishes bad programming practices (bad variable names, etc.)  Maybe a \"one liner\" achievement is better.\n\nCommunicator is good.\n\nStack smasher is also good, but, of course, recursion is one of the final topics of the term, and I don't want to give an achievement for solving a problem that they're SUPPOSED to solve using recursion. I might save it for my advanced class in the spring.\n\nHacker: Also good, but hard to quantify.  I guess it could be anything in a way I had not intended when I wrote the assignment problem.  Unfortunately, I found the students who were using truly Pythonic solutions involving things I had not taught yet were the students who were pulling their answers off of, well, message boards like these."
"Autocompletion really just isnt as much of a thing in that kind of coding style. There isn't as much member accessing.\n\nYou can still have some semblance of objects, but it's often more functional than object-oriented."
"Maybe you could try something like /r/dailyprogrammer, but where you have the assignments tie together, and increase in difficulty, branching off for different projects, and with a wiki where you show everyone's solutions with an index page so you don't have to go back through the assignments 1 by 1?"
"I was thinking of a \"Real life coder\" achievement where students show me code that they have written completely separate from any assignment that solved some real life problem for them, or made their life easier in some way."
"So, Zed Shaw likes to rant. It's often hard to tell if his rants are elaborate trolls or if he actually believes them, but I think it's important to critically examine anything he says. He's arrogant, and he's done enough quality software that he deserves to be, but occasionally he seems to take a hard left turn towards crazytown.\n\nSo:\n\n&gt; He states that using an IDE will turn you stupid.\n\nHe's not *entirely* wrong, but as usual, that's an extreme statement.\n\nYou should learn all the individual commandline tools that an IDE might replace, and that's doubly important for something like C. You should be able to use a text editor that's not part of an IDE, you should be able to write Makefiles and understand what they do, and so on. This has at least two major advantages:\n\n* If your IDE ever fails you, you'll be able to dig under the hood and figure out what went wrong.\n* If you want to do something your IDE doesn't support yet, you don't have to wait for your IDE to catch on.\n\nFor example: When Git came out, people who were comfortable with the commandline (and with not using IDEs) just picked it up and started usig it. There was a bit of a learning curve, but if you already knew SVN, it wasn't that big of a switch.\n\nThe people who spent most of their time in IDEs, especially people from a Windows culture who weren't comfortable with the commandline, said \"Oh, I can't use that until there's a Visual Studio plugin,\" or \"I'll wait for TortoiseGit to be as good as TortoiseSVN.\"\n\nNow, Git is a goddamned force of nature, so we have all that stuff now, but there are tons of other tools you might be missing out on -- even whole languages -- because they don't have good IDE support, or even because they're not well-supported in your favorite IDE.\n\nI've done a fair amount of Java recently, and I'd hate to do it without Eclipse. I've done a fair amount of Ruby recently, and I've *never* used an IDE for that. I've used Git everywhere, and I've never bothered with IDE plugins to make it work. I don't think IDEs have made me stupid, but I don't *rely* on IDEs to do everything for me. They're just another tool.\n\nI'm not sure Zed would actually disagree with me here, but he's shortened all of the above to \"IDEs make you stupid.\" And that's not a bad lesson for someone starting out, especially if they're supposed to \"learn X the hard way\". Learn C without an IDE first, and *then* learn what an IDE can do for you.\n\nAfter all, look at what you're doing already -- you're using Emacs. Emacs is often used to replicate a complete IDE, and to do *many* other things in that one program. There's an old joke: \"The Emacs operating system needs a better editor.\""
"&gt; certain things in programming (working with the file system, web connectivity) are opaque to me.\n\nSo learn how to do those things.  Can't you use Google and your language's API?\n\n&gt; I just get lost in reading most high-level code, but I can no longer learn from the beginner’s stuff. I don’t feel I’m ready for any programming job that isn’t the most entry of entry-level.\n\nSo get an entry level job.\n\n&gt; I toyed with the idea of going on to a 4-year school, but financially that’s a problem as I have a degree already and don’t qualify for much aid. \n\nReally?  I thought people went from 2 year degrees to 4 years degree regularly.\n\n&gt; Free online courses? Self-driven programming projects?\n\nWhy haven't you done these already?  You now officially have my permission."
"How do you tell if a student copy pasted their solution off the net? Just ask them some questions about how it works or something?\n\nAlso I agree Golfer doesn't really teach best practices."
"How am I not differentiating between learning a language and using it professionally? It's pretty obvious that if I'm using an introductory book, than that's not the language that I am a developer in. \n\nI'm sorry if I lead anyone to believe that I am a professional C developer. I thought given the context that it was blatantly obvious that it is brand new to me.\n\nAlso, no offence, but none of what you posted was helpful in the slightest."
"This was my initial impression. Thanks for the input."
"Emacs supports syntax highlighting, you should make sure you have it enabled.\n\nIf you want a good \"middle ground\", I would recommend looking at Sublime Text.  You can use the free version for an unlimited period of time, you just have to deal with the popup asking you to buy it every once in a while.  It's a general purpose code editor that comes with a large suite of built-in tools and great plugin system.\n\nIt'll take a bit to get set up, but after you install the package manager plugin manually, there are hundreds of plugins available.  It has syntax highlighting, great code manipulation, and I know there's a ctags plugin for C autocompletion.  You can set it up to build your program for you, but I prefer just having a terminal open along side it anyway."
"Exactly.  If a student is struggling to understand how basic variables work, and their code has a list comprehension and you've just started talking about for loops, it's pretty obvious.\n\nThe bigger issue is students who copy off of other students in class.  I have lenient \"work together\" rules in my classroom, but I tell them that as much as they're allowed to help each other, they are NOT allowed to just copy each other's code.  The lines there are blurry, though, because I got quite a bit of code last year that was variable changes and nothing else."
"www.jsfiddle.net is a great sandbox tool"
"Worth it. The book also has an online forum where you can ask for help and you can always ask here too."
"An IDE will not make you stupid. Just try not to become dependent on it. Also try to learn how to do what ever language you are doing/learning without one, as you might learn something new."
"Hmm I'm not sure which forum you are referring to. On the [CS50x courseware page](https://courses.edx.org/courses/HarvardX/CS50x/2014_T1/info), I only see three options under the discussion tab: reddit's /r/cs50, facebook and twitter.\n\nDid previous versions of CS50x have some sort of publicly accessible forum?"
"&gt; How am I not differentiating between learning a language and using it professionally?\n\nBy using the IDE you use at work to cast doubt on what he says about how people should learn the language.\n\n&gt; It's pretty obvious that if I'm using an introductory book, than that's not the language that I am a developer in.\n\nYes, that was obvious.\n\n&gt; I'm sorry if I lead anyone to believe that I am a professional C developer. I thought given the context that it was blatantly obvious that it is brand new to me.\n\nYes, that was obvious.\n\n&gt; Also, no offence, but none of what you posted was helpful in the slightest.\n\nOf course not.  You don't have a real programming problem and you don't want help."
"I love these \"learn it the hard way\" books - it's quick and lean.. sick of flicking thorugh an 800 page book only to find there were about two or three things that was actually useful."
"Yea it's a tricky one I guess. I'm a bit envious of these kids getting to do coding in highschool, when I went we learned typing on typewriters! How things change...\n\n"
"The only thing I can think of right this second is something like me streaming a lesson on twitch and answering people's questions in the chat"
"Do you know another language?  I found Learn Python the Hard Way too basic as it was also teaching general programming which I didn't need.  However, if you have no/little programming experience, it's the best out the there by far.\n\nI used code academy to learn the basics of Python.  I was able to move through it really fast and I feel like I can now jump in and read/write python."
"Thanks! This is exactly what I was looking for!\n\nThis is the first time I have read his work, so I wasn't sure if he literally meant that an IDE was bad in all scenarios or what.\n\nThat whole paragraph sort of reminded me of Linus ranting about C++ being the worst language. There aren't many programmers more well respected than Linus, but clearly, C++ has its uses, and I think he even admits that when he isn't trying to prove his point.\n\nMy point to this post was basically to find out if this guys opinion was well founded, and respected. According to what I am seeing, it is!\n\nThanks for the input! :)"
"If you were a beginner just learning to code, I would recommend not using an IDE for two main reasons. First, you now have two problems: you're trying to learn both how to program and how to use the IDE. An IDE like Eclipse can be absolutely daunting and learning it gets in the way of learning to program. Second, some aspects of the IDE, such as automatic build configurations, can hide things that are important. With what little experience I have of Visual Studio, I found it nearly impossible to figure out what it was doing when it built my code, which made it extremely difficult to fix it when it wasn't building properly. In my usual environment, I start with compiling things at the command line and build my own automation so I inherently understand how it works. Automation is certainly useful, but it's important to know how it works so that you can make it work for you and some IDEs make that difficult.\n\nThe way I see it, IDEs can be very helpful and practical, but a beginner should avoid them and start simple before adding on layers of automation and abstraction.\n\nAs for Zed Shaw, every man is entitled to his opinion, and he's certainly vocal about his opinions. That doesn't necessarily make him right (or wrong)."
"Awesome, I'll have to look into that. \nAfter I posted that I noticed that emacs has the syntax highlighting too. My bad."
"True, I think I may have incidentally been approaching C from an OO mindset. I'm looking through the Linux Kernel source right now and there is far less member accessing than I am accustomed to. \n\nIt'll probably take a while for me to stop thinking in the OO paradigm."
"It was more about David's teaching style that struck me. Since those videos were of normal classes that one would attend at Harvard, I didn't expect them to be better than the ones that are specifically-made for MOOCs. But the entire course went so well. You should try out the first lecture video (or even a half) available at [cs50.net](http://cs50.net) and see for yourself."
"Passive-aggressive Elitism is really pointless on a beginning programming forum. I came here because I *know* I know nothing about C, and had a genuine question.\n\nThat being said, I appreciate your attempts to answer my questions."
"Exactly. That's why I learned to do basic programming in MSIL. Its alwasys good to understand whats going on in the background. \n\nAs for Zed Shaw, I just wanted to make sure his opinion was well respected. \n\nThanks!"
"Yeah, I didn't have the opportunity either.  There was supposed to be a programming class when I was in high school, but was cancelled because not enough students were interested.  Small school problems, I guess.  I don't have that issue (there are 28 in the class)."
"http://www.global-webnet.com/blog/post/2012/04/14/Kinect-SkeletalViewer-Cannot-open-include-file-SDKDDKVerh-No-such-file-or-directory.aspx"
"Nothing I said was either passive-aggressive or elitist.  Are you high on crack?"
"Get books and practice. Also internet."
"I disagree about IDEs not being useful for low level stuff. I work on drivers for a private RTOS (vxWorks), their IDE is based on eclipse, and makes driver and kernel module development way easier.  \nA few highlights:\n\n* kernel API documentation viewable through the IDE.  \n* Less manual work with makefiles (Still need to do some manual work)  \n* When you need to worry about namespace collision, autocomplete is a godsend.  \n"
"I know Java, some C and C++"
"I don't know what language you're specifically trying to learn but if you have the time you should audit this edX course\n\nhttps://www.edx.org/course/uc-berkeleyx/uc-berkeleyx-cs169-1x-software-service-1136\n\neven if you don't take the class they offer plenty of programming resources—especially if you go to their Wiki section (you'll see it once you register). \n\nThey also have free online resources here that are tremendously helpful\nhttp://beta.saasbook.info/students\n\ngood luck man "
"Ya in one of my classes this year we had to create a driver for a pretty basic homemade USB controller and interface it with a game. Fun stuff"
"Try this:\n\n    public void run() {\n    int num_threads; // init with the number of threads!\n\n    for (int i = threadID ; i &lt; 4 ; i += num_threads )\n        for (int j = 0; j &lt; 4; j++)\n            for (int k = 0; k &lt; 4; k++)\n                obj.array3[i][j] += obj.array1[i][k] * obj.array2[k][j];\n    }\n"
"Sure, but it sounds like your private RTOS is the exception, not the norm, by definition alone."
"Im familiar with his style from watching the Google Python course. If you enjoy his style you should check that out although its more of a lecture series than a class.\n\nWill have to check this out. Cheers!"
"Hard link the package to the o e you want to to be used?  Maybe touch it as well? "
"Hey dude, yea you can try and find work arounds for this, maybe make a hackintosh? "
"No, Linus would never likely admit that.\nLol.\nHe is completely against Object Oriented Programming and would rather the wheel be reinvented at every turn.\nBecause apparently it's \"not portable\".\nWhich is both a legit and laughable remark.\nSome things aren't portable in C++. Especially when you're not working with the standard library, or when compilers for certain machines, such as mac, don't support specific standards.\nI believe standard threads were once an example of this.\n\nThe issue here, however, is that these things do eventually become portable.\nOnce compilers catch up with the standard changes, your C++ code works cross platform pretty easily.\nAnd most libraries that people would use now a days, wrap non-portable code in a way that makes it portable.\nSpecifically, boost library.\n\nAt the end of the day, as long as you're not doing something you shouldn't, the code should work on most/all machines with minimal changes needed.\nUnless you're using system specific functions.\nTo which, lol."
"If you know literally nothing about coding, can you learn python on  codeacadamy? "
"In my limited experience, the most useful thing I find and IDE does that a text editor doesn't do is automatically telling you when you have made a mistake and what the mistake is. Not only does this make programming easier but it also makes it easier to learn from your mistakes when you know what they are."
"I'm currently working on MIT 6.00SC intro to comp sci. I like the course, and i recommend it."
"Find out what kind of learning motivates you. Books, tutorials, video lectures? Try them out and see what suits you. Then use that type of resource in your learning.\n\nThen get a simple project going. You want to create games with Unity3D, so make a game with it. First do a simple Mario or Tetris clone. Break down the whole game into simple steps and do them. Just start doing the things you want to do, and when you hit a roadblock fall back to tutorials and documentation and internet help. \n\nStart simple, practice a lot, and just do do do do."
"Replying to this to remind myself to check it out later. "
"oh that sucks, yeah we had an open forum which was a godsend. Although reddit would be a decent replacement, just not as good at sorting the problems"
"If you know Java, C, and C++, Python will be a piece of cake. It was for me."
"&gt; I apologize for not knowing how to directly paste the code line by line in the comment itself.\n\nThat's fine.\n\n---\n\nThe code must be between the brackets under the `main` function:\n\n    int main(void)\n    {\n        ... // Code here\n    }\n\n    // You can't put a switch statement out here\n\n---\n\nEDIT: When I read your code I saw the closing (curly) bracket line 4 and didn't bother looking for the \"actual\" closing bracket."
"This.  If you get tons and tons of errors, you probably forgot a semi-colon or bracket, or you have one too many brackets."
"I had thought that the brace in line 21, after the return 0 ; was the what kept everything within the main function's brace in line 3, is this not the case?"
"What about the brace in line 4 ? (~~not 21~~)\n\n--- \n\nYou should indent your code."
"A few things.\n\n* Zed Shaw is a really good programmer\n* Zed Shaw is opinionated, and he often delivers those opinions in the highest form of assholery\n* Zed Shaw is usually right about things\n\nWith these in mind, know that to learn a language, it's best to learn it outside of a canned experience like an IDE.  Most IDEs do things that are tremendously convenient, such as code sense, refactoring support, test integration, etc.  This is great for anyone who knows a language inside and out, but terrible for anyone actually trying to learn a language.  Why?  Because an IDE will try to approximate the \"best\" way to program in language X, and will do many things behind the scenes that are considered boilerplate.  It's this boilerplate stuff that you need to be able to do in your sleep that really helps you learn the ins and outs of any language.\n\nThis is why Zed shuns IDEs in his books.  "
"[deleted]"
"[deleted]"
"Meh, it was alright. I also tried the Coursera one which was a little bit better. I'm off to edX now!"
"When I'm messing about with JS I typically just use my text editor and then paste code into a blank-page in chrome via the developer-tools console. \n\nI feel like such a noob :D"
"Oh! I had an extra brace! I didn't understand what you meant at first, but after looking it over I got it, haha. Thanks much!"
"I am working through a class online now and have a few coming up on coursera. From the advice I'm getting, I gather I should buckle down and practice more, and look for my first entry level job. As for the going to a four year, I can't afford to pay out of pocket and am unwilling to take on more student loans. Thanks for the advice. I'm going to start working on a project to sharpen my skills as soon as I get home."
"Others explained this pretty well but I wanted to chime in with my 2c as well.\n\nI think a better word for *stupid* would be *lazy* and I would agree with Zed there. IDEs can make you lazy if you rely on them too much. I fully agree with what /u/SanityInAnarchy said. "
"Why not take on more loans?  You could start at 90k with a 4 year degree.  Without one, you'd be lucky to start at half of that."
"Please read the FAQ linked on the sidebar. (as instructed by the banner at the top and the yellow box when submitting a post on /r/learnprogramming)"
"You can always invert a condition with `!`:\n\n    if(!myRE.test(myString)) {\n        // did not match\n    }\n\nThis is not specific to regular expressions, it's a basic property of conditional statements.\n\n"
"In what domains? \n\nWeb? Probably still PHP or Perl although that is just from a measurement of code. Python is hugely popular now but there is still loads of legacy code in many other languages.\n\nClient apps? C and C++.\n\nOS/Kernel dev? C obviously."
"?: is a ternary operator, there is a [wikipedia article](http://en.wikipedia.org/wiki/%3F:) describing its meaning."
"Thank you very much for the advice. I do stay in my comfort zone too often for sure.\n"
"Yes you can. The more things you read however, the better. Its helpful to have several resources from which to learn all the important information. Myself, I'm learning slowly but surely and I've used a combination of Codecademy, Learn Python the Hard Way, and the book [Prelude to Programming](http://www.amazon.com/Prelude-Programming-Concepts-Edition-Computer/dp/0132167395/ref=pd_sim_b_4) that I picked up as part of an entry level computer science course. "
"Perhaps its because I had such a torrid time paying off the loans from my first bachelor's. I'm 35 and just now paid it off..."
"aha, thanks very much ! \n\ngoogling c++ with ? : did not reveal much results ! \n\n\n"
"I have a hard time describing my skills, I suppose that's one of my big problems. I'm pretty good with python and have done some web programming with django. I suppose that's my best skill. \n\nI'm going to look into more projects and consider re-considering on school.\n\nEdit:I forgot to thanks you. Everyone has given such good advice."
"This is a great breakdown. \n\nHe really seems like he knows his stuff. Looking into who he is, I feel much more comfortable just accepting what he says for truth. For now at least :)"
"I think the file that hard links to the file that's protected is a file that I can't modify because I don't have the tools. Isn't there a way that I can modify my duplicate file so that it is favored over the other one? maybe if I rearrange the information?"
"Next time, google \"&lt;language&gt; operators\" and you will get a nice summary [like this](http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B).\n"
"Sweet, thanks. Recently picked up some books for Arduino and Python (I want to learn a few different types of programming before I start getting really into one). Codeacadmy is really cool so far"
"&gt;  That python code would do all kinds of stuff to the data stored in verse, like **drawing it to your screen**, or implementing a physics engine. The sandbox is secure, so **it can't really do anything on you computer, it can't draw stuff on screen** or access your files.\n\nI don't think you've quite thought this through."
"I go on right beneath it to talk about the permissions model, and how to let it do stuff like that securely. But I agree it was unclear."
"Oh, sorry, I didn't realise it since I'm on my mobile, thanks, I'll have to check it out when I get home tommorow."
"Actually, you can't invert a logical condition.\n\nWhat you meant to say is, \"negate.\""
"How much experience do you have in coding? Because if you are still learning coding, Unity 3D is probably too big and powerful for now. I've coded for several years and after taking a quick look at unity I say I'd probably need a week to get a good overview.\n\nFind yourself something, that is a bit above your current abilities, but that doesn't overwhelm you.\nAnd you have to find a good mix of looking at tutorials and writing code yourself. Doing only one of those isn't as useful.\n\nI think 3D games are an overkill for learning programming, it's just too much. Maybe you could start with 2D games. Since you're using C# you could use Gdi+, it's not very powerful, but easy to use.\n\n[Link1](http://www.c-sharpcorner.com/uploadfile/mahesh/drawing-ellipses-and-circles-in-gdi/)\n\n[Link2](http://msdn.microsoft.com/en-us/library/aa984364.aspx)"
"You sound angry."
"No, just experience and realistic."
"Wtf? http://www.thefreedictionary.com/torrid\n\nAnyway, were you making 90k/year while paying those off?  You should consider your future salary, not what you made a decade ago..."
"The original of course; https://www.goodreads.com/book/show/85009.Design_Patterns?from_search=true\n\nYou can read the GoF wiki too; http://c2.com/cgi/wiki?DesignPatterns\n\nAnd ya, wikipedia has articles on all of the patterns\nhttps://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29"
"I think his thing is that he hates the way normal programmers write with C++. I'm sure he could write good code in it :)"
"Ouch yeah that seems like a big downgrade for the course. Maybe they think they'll increase the quality of the forum by limiting to paying students, but then again the reduced population of the forum could also work against that."
"You are correct.\n\n    var myAge = \"17\";\n    myAge == 17; (true; Javascript converts myAge to an integer)\n    myAge === \"17\"; (!!false!! myAge is not an integer!)"
"Indenting is super important!"
"Ok, here's the way sane people do it.\n \n&gt;&gt;&gt;def incr(n):\n&gt;&gt;&gt;    i = n + 1\n&gt;&gt;&gt;    return i\n"
"It's a ternary if operator. Some refer to it as an arithmetic if.\n\nSimply put, it's another way of selecting a value based on a condition other than an if statement. For example, I might go:\n\n    if(x &lt; 0) {\n        cout &lt;&lt; \"Negative.\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"Positive.\" &lt;&lt; endl;\n    }\n\nIn the above example, we're choosing what to print based on the value of `x`. We can make this a lot shorter and arguably cleaner by doing the following:\n\n    cout &lt;&lt; (x &lt; 0 ? \"Negative.\" : \"Positive.\") &lt;&lt; endl;\n\nIt follows the basic sort of structure as an if-statement...\n\n    condition ? [if true] : [if false]"
"Thanks!"
"1. These aren't really \"other kinds\" of HTML, they just are all \"markup languages.\" You probably don't need to learn a lot about them unless the job specifically asks for the knowledge.\n\n2. Every person has a different learning style, so they may work better for you. Keep in mind that certifications and education are not the same. In most cases, you can become certified just by passing a test, doesn't matter how you learned the material. As far as certificates go, usually people with them say they help and people without them say they are useless. I think this just shows they are multiple paths to success. Consider your background and the types of place for which you want to work.\n\n3. Again, this is probably a question for you to answer for yourself. As long as you aren't overwhelmed, then you should be fine. Lots of technologies overlap, especially in front end web development."
"1. XML may be worth learning, but if you're only doing frontend stuff, you can probably skip it. XML isn't a programming language though, it's a way to organize data. Sorta like how you can put data in an Excel spreadsheet, or you can put it in an SQL database, or you can just write it down on a sticky note, etc. XML is just another way of recording info so that it can be retrieved easily. XHTML is not necessary to learn, I'd stick with HTML5.\n\n2. NO! Do not pay for learning resources in programming (unless it's a book that many people recommend or something), there are plenty of great, free resources, as well as other people to get help from for free. Certifications are fantastic to have, they look good on a resume. What people actually want to see though, is your portfolio. They want to see the work you've done in the past so they can gauge your skill level. I don't think you'll really be tested per se, maybe during the interview a tiny bit? Not like a \"sit down, take this multiple choice test on HTML\" or  anything like that, those are done when you get certifications though.\n\n3. No, you're not learning too much! Try to become proficient at things though, being knowledgeable in many areas is cool, but if you only have a fundamental knowledge of like 30 languages, you're not really useful to any company. If you have a really good knowledge of three languages though, you're much more useful."
"What kind of game do you want to make? My suggestion is to make a very simple version of that game in javascript/html5, then try to port it to C#."
"ROSALIND\n\nIt's a bioinformatics site designed to teach algorithms and makes it interesting by applying it to biotech.\n\nwww.rosalind.info"
"At this point, I'll be more than happy to just make a box move to the left/right at the press of a key. I dont want to make anything big like a tetris clone at this time. I just feel really overwhelmed."
"Curl. "
"Thank you for prompt responses. I can only say my new-ness is the reason i get crossed on if its a different version or a different language entirely!\n\nThanks on the paid bit- i'm currently using ''for dummies'' range, as i realise a basic knowledge might get my foot in the door then learn more specifics in the role (which is what most of you mention for huuuuge ones like .net)\n\nportfolio actually presents more questions- as i've never had to do one before. Just a CV. I'm planning on making a website for a friend and that will be something to refer people to. But do folks have it all online? or do you have a literal folder like in school (its been a long time as you can see). I presumed i'd just show the process of putting together the site in a neat binder, and the site can be accessed and read the script to the employer's convenience..."
"Though best practices are important, I believe things like Golfer encourage an underrated talent -- the creativity to break conventions of things to find minimums or maximums that conventions would not let you consider. I'm mulling writing an ebook for weird programming questions posed by beginners. If you could message me some examples from your students, I'd appreciate it. Thanks!"
"Do you know any other programming?  Have you found anything interesting with Google?"
"To clarify IntelliJ IDEA and Android Studio are my goals but I know I should defiantly start smaller just don't know where.\nEdit: I know hardly any code of any type...just need a starting place."
"Like Yahoo or Google Pipes?"
"Teaching it?"
"Inversion and negation are synonyms in this context.  [What do you call this gate?](https://en.wikipedia.org/wiki/Inverter_%28logic_gate%29)\n"
"Those are just a couple of IDEs it doesn't matter what IDE you really use. It sounds like you want to learn java and android development."
"It's almost certainly not a great idea to conflate learning 3d programming with learning the basics."
"In that case I'd encourage you to work your way up to making a javascript/html5 pong game. Before that, look up how to display and draw boxes and circles with html5/canvas. Get comfortable with that before moving onto adding keylisteners."
"In his own words, yes, yes he could.\nBy not using a single thing C++ has given him, and sticking to just writing standard C code."
"this guy has been the best so far for me, every time I get stuck on a concept from a python tutorial or LPTHW I go watch bucky's video on it and then it makes perfect sense!"
"I dont have the knowledge to parse it myself yet. I will soon, but not yet. "
"Have you [read the FAQ](http://www.reddit.com/r/learnprogramming/wiki/faq)?"
"&gt; Google Pipes\nI don't think it was from one of the giants, but that might work. \n"
"I have been wondering this same thing.\n\nIf you aren't working for anybody then you are going to need to sell a product. Try video game development or just write a piece of software that people want and sell it."
"look at it like this: what if you were learning a foreign language such as Spanish. Would you expect to be able to speak it fluently by just completing the academic assignments ? C++ is the same thing. A new language, and progress is slow and directly proportionate to the amount of time you put in to studying it."
"I thought it was cancelled though.  Python and beautiful soup? would work, too."
"Short answer: C/C++(yes I mean both :P).\n\nLonger answer: I would start with C++(procedurally), and then learn about Object Oriented Programming in C++(After I had a solid foundation of procedural programming).\n\nAt some point I feel the switch to C when learning things procedurally is necessary. Lower level memory management is a good topic, and C snippets are likely going to be not only useful, but necessary for any large project you start.\n\nIt's essentially the same thing as C++ syntax wise(minus objects), except you're using scanf/printf instead of cin/cout. Though, personally, I prefer printf to cout anyway.\n\nThen I would move onto learn C#(since it's relevant to you) when I felt I had a good grasp of object oriented programming in C++.\n\nThe reason I feel this is important is because C# is entirely object oriented, and OoP was a mine field for me to wrap my head around when I first saw it.\nNow that I've had some good experience with it in C++? Not so much.\n\nEDIT: As for where you could start with C++, I'd start with C++ Primer 5th edition, or with youtube.\n\nIf you need to learn C# like, ASAP without all the other cruft, you may want to start here: https://www.youtube.com/watch?v=x_9lfHjYtVg&amp;list=PL0EE421AE8BCEBA4A\n\nJust so you can get a grasp on the language, and then pick up a book. Unfortunately, I can't suggest any books for C# :P. Good luck"
"I found the lists and dictionary lessons were lacklustre but like /u/BarkyCarnation mentions, using multiple sources really helps. "
"Beautiful soup is very easy but you will have problems with speed at some point for sure. lxml is bit more difficult to use but it's way faster.\n\nBut other than that I think it's good suggestion and very easy to learn."
"If you're running programs from the command line, Batch (.bat files) would be sufficient for your needs.\n\nThere's a neat scripting language called AutoHotkey, where you can actually tell it to move your mouse to specific coordinates and click on things, that sounds like something that might useful to you. "
"Since you're talking about `.exe`, I'm assuming Windows.\n\n- For macro'ing general Windows applications easily, [Autohotkey](http://www.autohotkey.com/) is practically undefeated. If you need to interact with other program GUI's, this may well be your best bet.\n\n- If you want to rename files and add lines of text to plain-text files, any scripting language (or even Windows `.bat` files) will do. My top two suggestions would be to look at Windows Powershell and Python."
"ok now want to cry in a corner that everything says its ''so easy'' but i'm reading and am blinded.\nRealised from some searches I am incapable of a portfolio- i'm too new to it. Instead I've opted for purchasing server/hosting stuff and just get a blog going on my progress.... wordpress is often the way on this. but on your own site, with own domain etc. i found a 'for beginners' thing...starts waffling about php and mysql....i've not got to them yet lol, can't make a blog about learning, because not learnt the stuff to make blog haha"
"Was it [Dapper](http://open.dapper.net/index.php)?"
"I would look for any entry level job in programming I could get.\nMy first real job was in web development.\nNot exactly what I really wanted to do, but I learned /a lot/ from that.\nWays to approach complex problems, and how to do things without counting on an object.\n\nNow, if you want some good books to buy or... -cough-(I won't blame you), I can suggest quite a few when dealing with C/C++.\nC++ Primer for example. An amazing book that helped me in a lot of ways :3.\n\nIf you want to learn about \"web connectivity\", or what I'm assuming you mean by that, you'll want to learn about socket programming.\nI can't really suggest a good book for that unfortunately. Or at least not for someone who's kind of a beginner.\nAs a lot of the books dealing with socket programming are out dated which would require you to try update the source code yourself.\n\nI can suggest that youtube is an amazing place that can teach you all about it :3.\n\nGood luck sir, and always remember.\nFailure is not only an option, it's a must.\nIf we don't fail, we don't grow."
"http://inventwithpython.com/chapters/"
"1- phew! seemed pointless to delve into something html5 will hopefully replace (for some)\n2-this is what makes me think its not overly worth it, and just delve in to learn rather than 'tick boxes'.\n3- overwhelmed now i just had a look on making a blog to display my learning! haha\nthanks for help :D"
"[deleted]"
"Wow, I'd never even heard of `std::rotate`. That does not happen often.\n\n`std::swap` will work fine for swapping. E.g. `std::swap(vector.front(), vector.back())` will swap the first and the last element (but make sure the vector is non-empty before calling). Or do I misunderstand what you're trying to achieve?"
"1- ah haaa!\n2-i've considered books, so far on the 'dummies' ones. yet to see anything recommended by folks, besides the links on here. Portfolio is a whole other ball game (see other post)\n3- yeah profficiency is going to be a huge issue. I have bad memory loss and don't do well with short term, so i'm currently writing everything i learn, all comes back when i look it up though, so not a huge worry (i discovered digging here, thats normal). i'm literally choosing those i see written on job specs the most, then discovering what overlaps, adding it to my list etc.\n\nthanks for reply :)"
"Try using [LWJGL](http://lwjgl.org/). Here's the [tutorial](http://lwjgl.org/wiki/index.php?title=Main_Page). It could be a good introduction into OpenGL"
"I need some way of moving an iterator to the front of the vector. Isn't there some kind of function like this: `std::put_in_front(BlockList, it)`?"
"    std::rotate(BlockList.begin(), it, it + 1);"
"As far as I can tell, this isn't possible at the moment. The firmware on devices like these tend to be very locked down to keep people from modifying them. That isn't to say people aren't able to get into these devices and open them up so that they can be modified, but that normally requires the product to have more interest. The PS3 for example, has a fairly large hacking community. The firmware has been at least partially opened up, and people can run their own code on the PS3. The problem here is that the car stereo has no hacking community, so no one has really done anything to them."
"Have you looked if they offer you some type of skinning option? That's the easiest solution.\n\nIf you need to change the source code, in general this will be very difficult. Companies rarely make it easy to mess with their software. To have any kind of chance at all, you need someone to have done most of the work for you. Google for \"&lt;your device&gt; hacking\", \"modding\", \"flashing\" etc. If nobody has done any work for you, it's possible to try to figure everything out yourself, but likely it will take months if not years.\n\nYou could also email the company and kindly request their source code, documentation or anything else that can be of help, but the chances they actually respond positively are ... quite slim, to put it mildly."
"It worked! I tried something similar to that:\n\n`std::rotate(it - 1, it, BlockList.end());`\n\nWhy didn't that work?"
"I don't have a tutorial handy, but I highly recommend using LibGDX over LWJGL or any other Java graphics library. LibGDX is more actively developed, and has many more features than LWJGL, such as the ability to output your game to Windows, OS X, Linux, HTML5, and Android all at once."
